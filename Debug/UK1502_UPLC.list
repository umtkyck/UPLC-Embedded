
UK1502_UPLC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be90  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000610  0800bfa0  0800bfa0  0001bfa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5b0  0800c5b0  0002034c  2**0
                  CONTENTS
  4 .ARM          00000000  0800c5b0  0800c5b0  0002034c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c5b0  0800c5b0  0002034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c5b0  0800c5b0  0001c5b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c5b4  0800c5b4  0001c5b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000034c  20000000  0800c5b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001744  2000034c  0800c904  0002034c  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  20001a90  0800c904  00021a90  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002034c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f71b  00000000  00000000  00020375  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000455d  00000000  00000000  0003fa90  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001490  00000000  00000000  00043ff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012c0  00000000  00000000  00045480  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019744  00000000  00000000  00046740  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000157a6  00000000  00000000  0005fe84  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007a78e  00000000  00000000  0007562a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000efdb8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ce0  00000000  00000000  000efe34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000034c 	.word	0x2000034c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bf88 	.word	0x0800bf88

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000350 	.word	0x20000350
 800014c:	0800bf88 	.word	0x0800bf88

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2f>:
 80008fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000900:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000904:	bf24      	itt	cs
 8000906:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800090a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800090e:	d90d      	bls.n	800092c <__aeabi_d2f+0x30>
 8000910:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000914:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000918:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800091c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000920:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000924:	bf08      	it	eq
 8000926:	f020 0001 	biceq.w	r0, r0, #1
 800092a:	4770      	bx	lr
 800092c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000930:	d121      	bne.n	8000976 <__aeabi_d2f+0x7a>
 8000932:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000936:	bfbc      	itt	lt
 8000938:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800093c:	4770      	bxlt	lr
 800093e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000942:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000946:	f1c2 0218 	rsb	r2, r2, #24
 800094a:	f1c2 0c20 	rsb	ip, r2, #32
 800094e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000952:	fa20 f002 	lsr.w	r0, r0, r2
 8000956:	bf18      	it	ne
 8000958:	f040 0001 	orrne.w	r0, r0, #1
 800095c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000960:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000964:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000968:	ea40 000c 	orr.w	r0, r0, ip
 800096c:	fa23 f302 	lsr.w	r3, r3, r2
 8000970:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000974:	e7cc      	b.n	8000910 <__aeabi_d2f+0x14>
 8000976:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800097a:	d107      	bne.n	800098c <__aeabi_d2f+0x90>
 800097c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000980:	bf1e      	ittt	ne
 8000982:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000986:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800098a:	4770      	bxne	lr
 800098c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000990:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000994:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_frsub>:
 800099c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009a0:	e002      	b.n	80009a8 <__addsf3>
 80009a2:	bf00      	nop

080009a4 <__aeabi_fsub>:
 80009a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009a8 <__addsf3>:
 80009a8:	0042      	lsls	r2, r0, #1
 80009aa:	bf1f      	itttt	ne
 80009ac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009b0:	ea92 0f03 	teqne	r2, r3
 80009b4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009b8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009bc:	d06a      	beq.n	8000a94 <__addsf3+0xec>
 80009be:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009c2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009c6:	bfc1      	itttt	gt
 80009c8:	18d2      	addgt	r2, r2, r3
 80009ca:	4041      	eorgt	r1, r0
 80009cc:	4048      	eorgt	r0, r1
 80009ce:	4041      	eorgt	r1, r0
 80009d0:	bfb8      	it	lt
 80009d2:	425b      	neglt	r3, r3
 80009d4:	2b19      	cmp	r3, #25
 80009d6:	bf88      	it	hi
 80009d8:	4770      	bxhi	lr
 80009da:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4240      	negne	r0, r0
 80009ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009ee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009f2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009f6:	bf18      	it	ne
 80009f8:	4249      	negne	r1, r1
 80009fa:	ea92 0f03 	teq	r2, r3
 80009fe:	d03f      	beq.n	8000a80 <__addsf3+0xd8>
 8000a00:	f1a2 0201 	sub.w	r2, r2, #1
 8000a04:	fa41 fc03 	asr.w	ip, r1, r3
 8000a08:	eb10 000c 	adds.w	r0, r0, ip
 8000a0c:	f1c3 0320 	rsb	r3, r3, #32
 8000a10:	fa01 f103 	lsl.w	r1, r1, r3
 8000a14:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a18:	d502      	bpl.n	8000a20 <__addsf3+0x78>
 8000a1a:	4249      	negs	r1, r1
 8000a1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a20:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a24:	d313      	bcc.n	8000a4e <__addsf3+0xa6>
 8000a26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a2a:	d306      	bcc.n	8000a3a <__addsf3+0x92>
 8000a2c:	0840      	lsrs	r0, r0, #1
 8000a2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a32:	f102 0201 	add.w	r2, r2, #1
 8000a36:	2afe      	cmp	r2, #254	; 0xfe
 8000a38:	d251      	bcs.n	8000ade <__addsf3+0x136>
 8000a3a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a42:	bf08      	it	eq
 8000a44:	f020 0001 	biceq.w	r0, r0, #1
 8000a48:	ea40 0003 	orr.w	r0, r0, r3
 8000a4c:	4770      	bx	lr
 8000a4e:	0049      	lsls	r1, r1, #1
 8000a50:	eb40 0000 	adc.w	r0, r0, r0
 8000a54:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a58:	f1a2 0201 	sub.w	r2, r2, #1
 8000a5c:	d1ed      	bne.n	8000a3a <__addsf3+0x92>
 8000a5e:	fab0 fc80 	clz	ip, r0
 8000a62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a66:	ebb2 020c 	subs.w	r2, r2, ip
 8000a6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a6e:	bfaa      	itet	ge
 8000a70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a74:	4252      	neglt	r2, r2
 8000a76:	4318      	orrge	r0, r3
 8000a78:	bfbc      	itt	lt
 8000a7a:	40d0      	lsrlt	r0, r2
 8000a7c:	4318      	orrlt	r0, r3
 8000a7e:	4770      	bx	lr
 8000a80:	f092 0f00 	teq	r2, #0
 8000a84:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a88:	bf06      	itte	eq
 8000a8a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a8e:	3201      	addeq	r2, #1
 8000a90:	3b01      	subne	r3, #1
 8000a92:	e7b5      	b.n	8000a00 <__addsf3+0x58>
 8000a94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a9c:	bf18      	it	ne
 8000a9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa2:	d021      	beq.n	8000ae8 <__addsf3+0x140>
 8000aa4:	ea92 0f03 	teq	r2, r3
 8000aa8:	d004      	beq.n	8000ab4 <__addsf3+0x10c>
 8000aaa:	f092 0f00 	teq	r2, #0
 8000aae:	bf08      	it	eq
 8000ab0:	4608      	moveq	r0, r1
 8000ab2:	4770      	bx	lr
 8000ab4:	ea90 0f01 	teq	r0, r1
 8000ab8:	bf1c      	itt	ne
 8000aba:	2000      	movne	r0, #0
 8000abc:	4770      	bxne	lr
 8000abe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ac2:	d104      	bne.n	8000ace <__addsf3+0x126>
 8000ac4:	0040      	lsls	r0, r0, #1
 8000ac6:	bf28      	it	cs
 8000ac8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	4770      	bx	lr
 8000ace:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ad2:	bf3c      	itt	cc
 8000ad4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ad8:	4770      	bxcc	lr
 8000ada:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ade:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ae2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae6:	4770      	bx	lr
 8000ae8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000aec:	bf16      	itet	ne
 8000aee:	4608      	movne	r0, r1
 8000af0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000af4:	4601      	movne	r1, r0
 8000af6:	0242      	lsls	r2, r0, #9
 8000af8:	bf06      	itte	eq
 8000afa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000afe:	ea90 0f01 	teqeq	r0, r1
 8000b02:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_ui2f>:
 8000b08:	f04f 0300 	mov.w	r3, #0
 8000b0c:	e004      	b.n	8000b18 <__aeabi_i2f+0x8>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_i2f>:
 8000b10:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b14:	bf48      	it	mi
 8000b16:	4240      	negmi	r0, r0
 8000b18:	ea5f 0c00 	movs.w	ip, r0
 8000b1c:	bf08      	it	eq
 8000b1e:	4770      	bxeq	lr
 8000b20:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b24:	4601      	mov	r1, r0
 8000b26:	f04f 0000 	mov.w	r0, #0
 8000b2a:	e01c      	b.n	8000b66 <__aeabi_l2f+0x2a>

08000b2c <__aeabi_ul2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f04f 0300 	mov.w	r3, #0
 8000b38:	e00a      	b.n	8000b50 <__aeabi_l2f+0x14>
 8000b3a:	bf00      	nop

08000b3c <__aeabi_l2f>:
 8000b3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b40:	bf08      	it	eq
 8000b42:	4770      	bxeq	lr
 8000b44:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b48:	d502      	bpl.n	8000b50 <__aeabi_l2f+0x14>
 8000b4a:	4240      	negs	r0, r0
 8000b4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b50:	ea5f 0c01 	movs.w	ip, r1
 8000b54:	bf02      	ittt	eq
 8000b56:	4684      	moveq	ip, r0
 8000b58:	4601      	moveq	r1, r0
 8000b5a:	2000      	moveq	r0, #0
 8000b5c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b60:	bf08      	it	eq
 8000b62:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b66:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b6a:	fabc f28c 	clz	r2, ip
 8000b6e:	3a08      	subs	r2, #8
 8000b70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b74:	db10      	blt.n	8000b98 <__aeabi_l2f+0x5c>
 8000b76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b7a:	4463      	add	r3, ip
 8000b7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b80:	f1c2 0220 	rsb	r2, r2, #32
 8000b84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b88:	fa20 f202 	lsr.w	r2, r0, r2
 8000b8c:	eb43 0002 	adc.w	r0, r3, r2
 8000b90:	bf08      	it	eq
 8000b92:	f020 0001 	biceq.w	r0, r0, #1
 8000b96:	4770      	bx	lr
 8000b98:	f102 0220 	add.w	r2, r2, #32
 8000b9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ba0:	f1c2 0220 	rsb	r2, r2, #32
 8000ba4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ba8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bac:	eb43 0002 	adc.w	r0, r3, r2
 8000bb0:	bf08      	it	eq
 8000bb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_fmul>:
 8000bb8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bc0:	bf1e      	ittt	ne
 8000bc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bc6:	ea92 0f0c 	teqne	r2, ip
 8000bca:	ea93 0f0c 	teqne	r3, ip
 8000bce:	d06f      	beq.n	8000cb0 <__aeabi_fmul+0xf8>
 8000bd0:	441a      	add	r2, r3
 8000bd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bd6:	0240      	lsls	r0, r0, #9
 8000bd8:	bf18      	it	ne
 8000bda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bde:	d01e      	beq.n	8000c1e <__aeabi_fmul+0x66>
 8000be0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000be4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000be8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bec:	fba0 3101 	umull	r3, r1, r0, r1
 8000bf0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000bf4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000bf8:	bf3e      	ittt	cc
 8000bfa:	0049      	lslcc	r1, r1, #1
 8000bfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c00:	005b      	lslcc	r3, r3, #1
 8000c02:	ea40 0001 	orr.w	r0, r0, r1
 8000c06:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c0a:	2afd      	cmp	r2, #253	; 0xfd
 8000c0c:	d81d      	bhi.n	8000c4a <__aeabi_fmul+0x92>
 8000c0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c16:	bf08      	it	eq
 8000c18:	f020 0001 	biceq.w	r0, r0, #1
 8000c1c:	4770      	bx	lr
 8000c1e:	f090 0f00 	teq	r0, #0
 8000c22:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c26:	bf08      	it	eq
 8000c28:	0249      	lsleq	r1, r1, #9
 8000c2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c32:	3a7f      	subs	r2, #127	; 0x7f
 8000c34:	bfc2      	ittt	gt
 8000c36:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c3e:	4770      	bxgt	lr
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	3a01      	subs	r2, #1
 8000c4a:	dc5d      	bgt.n	8000d08 <__aeabi_fmul+0x150>
 8000c4c:	f112 0f19 	cmn.w	r2, #25
 8000c50:	bfdc      	itt	le
 8000c52:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c56:	4770      	bxle	lr
 8000c58:	f1c2 0200 	rsb	r2, r2, #0
 8000c5c:	0041      	lsls	r1, r0, #1
 8000c5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c62:	f1c2 0220 	rsb	r2, r2, #32
 8000c66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c6e:	f140 0000 	adc.w	r0, r0, #0
 8000c72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c76:	bf08      	it	eq
 8000c78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c7c:	4770      	bx	lr
 8000c7e:	f092 0f00 	teq	r2, #0
 8000c82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c86:	bf02      	ittt	eq
 8000c88:	0040      	lsleq	r0, r0, #1
 8000c8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c8e:	3a01      	subeq	r2, #1
 8000c90:	d0f9      	beq.n	8000c86 <__aeabi_fmul+0xce>
 8000c92:	ea40 000c 	orr.w	r0, r0, ip
 8000c96:	f093 0f00 	teq	r3, #0
 8000c9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c9e:	bf02      	ittt	eq
 8000ca0:	0049      	lsleq	r1, r1, #1
 8000ca2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ca6:	3b01      	subeq	r3, #1
 8000ca8:	d0f9      	beq.n	8000c9e <__aeabi_fmul+0xe6>
 8000caa:	ea41 010c 	orr.w	r1, r1, ip
 8000cae:	e78f      	b.n	8000bd0 <__aeabi_fmul+0x18>
 8000cb0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cb4:	ea92 0f0c 	teq	r2, ip
 8000cb8:	bf18      	it	ne
 8000cba:	ea93 0f0c 	teqne	r3, ip
 8000cbe:	d00a      	beq.n	8000cd6 <__aeabi_fmul+0x11e>
 8000cc0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cc4:	bf18      	it	ne
 8000cc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cca:	d1d8      	bne.n	8000c7e <__aeabi_fmul+0xc6>
 8000ccc:	ea80 0001 	eor.w	r0, r0, r1
 8000cd0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cd4:	4770      	bx	lr
 8000cd6:	f090 0f00 	teq	r0, #0
 8000cda:	bf17      	itett	ne
 8000cdc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ce0:	4608      	moveq	r0, r1
 8000ce2:	f091 0f00 	teqne	r1, #0
 8000ce6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cea:	d014      	beq.n	8000d16 <__aeabi_fmul+0x15e>
 8000cec:	ea92 0f0c 	teq	r2, ip
 8000cf0:	d101      	bne.n	8000cf6 <__aeabi_fmul+0x13e>
 8000cf2:	0242      	lsls	r2, r0, #9
 8000cf4:	d10f      	bne.n	8000d16 <__aeabi_fmul+0x15e>
 8000cf6:	ea93 0f0c 	teq	r3, ip
 8000cfa:	d103      	bne.n	8000d04 <__aeabi_fmul+0x14c>
 8000cfc:	024b      	lsls	r3, r1, #9
 8000cfe:	bf18      	it	ne
 8000d00:	4608      	movne	r0, r1
 8000d02:	d108      	bne.n	8000d16 <__aeabi_fmul+0x15e>
 8000d04:	ea80 0001 	eor.w	r0, r0, r1
 8000d08:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d14:	4770      	bx	lr
 8000d16:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d1a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d1e:	4770      	bx	lr

08000d20 <__aeabi_fdiv>:
 8000d20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d28:	bf1e      	ittt	ne
 8000d2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d2e:	ea92 0f0c 	teqne	r2, ip
 8000d32:	ea93 0f0c 	teqne	r3, ip
 8000d36:	d069      	beq.n	8000e0c <__aeabi_fdiv+0xec>
 8000d38:	eba2 0203 	sub.w	r2, r2, r3
 8000d3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d40:	0249      	lsls	r1, r1, #9
 8000d42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d46:	d037      	beq.n	8000db8 <__aeabi_fdiv+0x98>
 8000d48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	bf38      	it	cc
 8000d5c:	005b      	lslcc	r3, r3, #1
 8000d5e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d62:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d66:	428b      	cmp	r3, r1
 8000d68:	bf24      	itt	cs
 8000d6a:	1a5b      	subcs	r3, r3, r1
 8000d6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d74:	bf24      	itt	cs
 8000d76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d82:	bf24      	itt	cs
 8000d84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d90:	bf24      	itt	cs
 8000d92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d9a:	011b      	lsls	r3, r3, #4
 8000d9c:	bf18      	it	ne
 8000d9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000da2:	d1e0      	bne.n	8000d66 <__aeabi_fdiv+0x46>
 8000da4:	2afd      	cmp	r2, #253	; 0xfd
 8000da6:	f63f af50 	bhi.w	8000c4a <__aeabi_fmul+0x92>
 8000daa:	428b      	cmp	r3, r1
 8000dac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db0:	bf08      	it	eq
 8000db2:	f020 0001 	biceq.w	r0, r0, #1
 8000db6:	4770      	bx	lr
 8000db8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dbc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dc0:	327f      	adds	r2, #127	; 0x7f
 8000dc2:	bfc2      	ittt	gt
 8000dc4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dcc:	4770      	bxgt	lr
 8000dce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd2:	f04f 0300 	mov.w	r3, #0
 8000dd6:	3a01      	subs	r2, #1
 8000dd8:	e737      	b.n	8000c4a <__aeabi_fmul+0x92>
 8000dda:	f092 0f00 	teq	r2, #0
 8000dde:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000de2:	bf02      	ittt	eq
 8000de4:	0040      	lsleq	r0, r0, #1
 8000de6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dea:	3a01      	subeq	r2, #1
 8000dec:	d0f9      	beq.n	8000de2 <__aeabi_fdiv+0xc2>
 8000dee:	ea40 000c 	orr.w	r0, r0, ip
 8000df2:	f093 0f00 	teq	r3, #0
 8000df6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dfa:	bf02      	ittt	eq
 8000dfc:	0049      	lsleq	r1, r1, #1
 8000dfe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e02:	3b01      	subeq	r3, #1
 8000e04:	d0f9      	beq.n	8000dfa <__aeabi_fdiv+0xda>
 8000e06:	ea41 010c 	orr.w	r1, r1, ip
 8000e0a:	e795      	b.n	8000d38 <__aeabi_fdiv+0x18>
 8000e0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e10:	ea92 0f0c 	teq	r2, ip
 8000e14:	d108      	bne.n	8000e28 <__aeabi_fdiv+0x108>
 8000e16:	0242      	lsls	r2, r0, #9
 8000e18:	f47f af7d 	bne.w	8000d16 <__aeabi_fmul+0x15e>
 8000e1c:	ea93 0f0c 	teq	r3, ip
 8000e20:	f47f af70 	bne.w	8000d04 <__aeabi_fmul+0x14c>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e776      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e28:	ea93 0f0c 	teq	r3, ip
 8000e2c:	d104      	bne.n	8000e38 <__aeabi_fdiv+0x118>
 8000e2e:	024b      	lsls	r3, r1, #9
 8000e30:	f43f af4c 	beq.w	8000ccc <__aeabi_fmul+0x114>
 8000e34:	4608      	mov	r0, r1
 8000e36:	e76e      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e3c:	bf18      	it	ne
 8000e3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e42:	d1ca      	bne.n	8000dda <__aeabi_fdiv+0xba>
 8000e44:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e48:	f47f af5c 	bne.w	8000d04 <__aeabi_fmul+0x14c>
 8000e4c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e50:	f47f af3c 	bne.w	8000ccc <__aeabi_fmul+0x114>
 8000e54:	e75f      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e56:	bf00      	nop

08000e58 <__gesf2>:
 8000e58:	f04f 3cff 	mov.w	ip, #4294967295
 8000e5c:	e006      	b.n	8000e6c <__cmpsf2+0x4>
 8000e5e:	bf00      	nop

08000e60 <__lesf2>:
 8000e60:	f04f 0c01 	mov.w	ip, #1
 8000e64:	e002      	b.n	8000e6c <__cmpsf2+0x4>
 8000e66:	bf00      	nop

08000e68 <__cmpsf2>:
 8000e68:	f04f 0c01 	mov.w	ip, #1
 8000e6c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e70:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e7c:	bf18      	it	ne
 8000e7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e82:	d011      	beq.n	8000ea8 <__cmpsf2+0x40>
 8000e84:	b001      	add	sp, #4
 8000e86:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e8a:	bf18      	it	ne
 8000e8c:	ea90 0f01 	teqne	r0, r1
 8000e90:	bf58      	it	pl
 8000e92:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e96:	bf88      	it	hi
 8000e98:	17c8      	asrhi	r0, r1, #31
 8000e9a:	bf38      	it	cc
 8000e9c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ea0:	bf18      	it	ne
 8000ea2:	f040 0001 	orrne.w	r0, r0, #1
 8000ea6:	4770      	bx	lr
 8000ea8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eac:	d102      	bne.n	8000eb4 <__cmpsf2+0x4c>
 8000eae:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000eb2:	d105      	bne.n	8000ec0 <__cmpsf2+0x58>
 8000eb4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000eb8:	d1e4      	bne.n	8000e84 <__cmpsf2+0x1c>
 8000eba:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ebe:	d0e1      	beq.n	8000e84 <__cmpsf2+0x1c>
 8000ec0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <__aeabi_cfrcmple>:
 8000ec8:	4684      	mov	ip, r0
 8000eca:	4608      	mov	r0, r1
 8000ecc:	4661      	mov	r1, ip
 8000ece:	e7ff      	b.n	8000ed0 <__aeabi_cfcmpeq>

08000ed0 <__aeabi_cfcmpeq>:
 8000ed0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ed2:	f7ff ffc9 	bl	8000e68 <__cmpsf2>
 8000ed6:	2800      	cmp	r0, #0
 8000ed8:	bf48      	it	mi
 8000eda:	f110 0f00 	cmnmi.w	r0, #0
 8000ede:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ee0 <__aeabi_fcmpeq>:
 8000ee0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee4:	f7ff fff4 	bl	8000ed0 <__aeabi_cfcmpeq>
 8000ee8:	bf0c      	ite	eq
 8000eea:	2001      	moveq	r0, #1
 8000eec:	2000      	movne	r0, #0
 8000eee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_fcmplt>:
 8000ef4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ef8:	f7ff ffea 	bl	8000ed0 <__aeabi_cfcmpeq>
 8000efc:	bf34      	ite	cc
 8000efe:	2001      	movcc	r0, #1
 8000f00:	2000      	movcs	r0, #0
 8000f02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f06:	bf00      	nop

08000f08 <__aeabi_fcmple>:
 8000f08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f0c:	f7ff ffe0 	bl	8000ed0 <__aeabi_cfcmpeq>
 8000f10:	bf94      	ite	ls
 8000f12:	2001      	movls	r0, #1
 8000f14:	2000      	movhi	r0, #0
 8000f16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1a:	bf00      	nop

08000f1c <__aeabi_fcmpge>:
 8000f1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f20:	f7ff ffd2 	bl	8000ec8 <__aeabi_cfrcmple>
 8000f24:	bf94      	ite	ls
 8000f26:	2001      	movls	r0, #1
 8000f28:	2000      	movhi	r0, #0
 8000f2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f2e:	bf00      	nop

08000f30 <__aeabi_fcmpgt>:
 8000f30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f34:	f7ff ffc8 	bl	8000ec8 <__aeabi_cfrcmple>
 8000f38:	bf34      	ite	cc
 8000f3a:	2001      	movcc	r0, #1
 8000f3c:	2000      	movcs	r0, #0
 8000f3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f42:	bf00      	nop

08000f44 <__aeabi_f2iz>:
 8000f44:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f48:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f4c:	d30f      	bcc.n	8000f6e <__aeabi_f2iz+0x2a>
 8000f4e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f56:	d90d      	bls.n	8000f74 <__aeabi_f2iz+0x30>
 8000f58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f60:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f64:	fa23 f002 	lsr.w	r0, r3, r2
 8000f68:	bf18      	it	ne
 8000f6a:	4240      	negne	r0, r0
 8000f6c:	4770      	bx	lr
 8000f6e:	f04f 0000 	mov.w	r0, #0
 8000f72:	4770      	bx	lr
 8000f74:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f78:	d101      	bne.n	8000f7e <__aeabi_f2iz+0x3a>
 8000f7a:	0242      	lsls	r2, r0, #9
 8000f7c:	d105      	bne.n	8000f8a <__aeabi_f2iz+0x46>
 8000f7e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f82:	bf08      	it	eq
 8000f84:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f88:	4770      	bx	lr
 8000f8a:	f04f 0000 	mov.w	r0, #0
 8000f8e:	4770      	bx	lr

08000f90 <SPI_RW>:
#define SPI_TIMEOUT		0xFF
#define DUMMY_BYTE		0xAB

//------------------------------------------------------------------------------------
uint8_t SPI_RW(uint8_t data)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af02      	add	r7, sp, #8
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
	uint8_t	ret;
	HAL_SPI_TransmitReceive(&hspi,&data,&ret,1,SPI_TIMEOUT);
 8000f9a:	f107 020f 	add.w	r2, r7, #15
 8000f9e:	1df9      	adds	r1, r7, #7
 8000fa0:	23ff      	movs	r3, #255	; 0xff
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	4807      	ldr	r0, [pc, #28]	; (8000fc4 <SPI_RW+0x34>)
 8000fa8:	f006 fd5d 	bl	8007a66 <HAL_SPI_TransmitReceive>
	//HAL_SPI_TransmitReceive_IT(&hspi,&data,&ret,1);
	while(hspi.State!=HAL_SPI_STATE_READY);
 8000fac:	bf00      	nop
 8000fae:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <SPI_RW+0x34>)
 8000fb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d1f9      	bne.n	8000fae <SPI_RW+0x1e>
	return ret;
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000598 	.word	0x20000598

08000fc8 <Flash_Init>:
	HAL_SPI_Receive(&hspi,pBuffer,count,SPI_TIMEOUT);
	//HAL_SPI_Receive_IT(&hspi,pBuffer,count);
}
//------------------------------------------------------------------------------------
void Flash_Init()
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
	Disable_CS();
 8000fcc:	2201      	movs	r2, #1
 8000fce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fd2:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <Flash_Init+0x20>)
 8000fd4:	f004 ffa4 	bl	8005f20 <HAL_GPIO_WritePin>
	Flash_WriteDisable();
 8000fd8:	f000 f81e 	bl	8001018 <Flash_WriteDisable>
	Flash_WaitForWriteEnd();
 8000fdc:	f000 f852 	bl	8001084 <Flash_WaitForWriteEnd>
	Flash_ReadStatusRegister1();
 8000fe0:	f000 f830 	bl	8001044 <Flash_ReadStatusRegister1>
}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40010c00 	.word	0x40010c00

08000fec <Flash_WriteEnable>:
//------------------------------------------------------------------------------------
void Flash_WriteEnable(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
	ENABLE_CS();
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ff6:	4807      	ldr	r0, [pc, #28]	; (8001014 <Flash_WriteEnable+0x28>)
 8000ff8:	f004 ff92 	bl	8005f20 <HAL_GPIO_WritePin>
	SPI_RW(0x06);
 8000ffc:	2006      	movs	r0, #6
 8000ffe:	f7ff ffc7 	bl	8000f90 <SPI_RW>
	Disable_CS();
 8001002:	2201      	movs	r2, #1
 8001004:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001008:	4802      	ldr	r0, [pc, #8]	; (8001014 <Flash_WriteEnable+0x28>)
 800100a:	f004 ff89 	bl	8005f20 <HAL_GPIO_WritePin>
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40010c00 	.word	0x40010c00

08001018 <Flash_WriteDisable>:
//------------------------------------------------------------------------------------
void Flash_WriteDisable(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	ENABLE_CS();
 800101c:	2200      	movs	r2, #0
 800101e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001022:	4807      	ldr	r0, [pc, #28]	; (8001040 <Flash_WriteDisable+0x28>)
 8001024:	f004 ff7c 	bl	8005f20 <HAL_GPIO_WritePin>
	SPI_RW(0x04);
 8001028:	2004      	movs	r0, #4
 800102a:	f7ff ffb1 	bl	8000f90 <SPI_RW>
	Disable_CS();
 800102e:	2201      	movs	r2, #1
 8001030:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001034:	4802      	ldr	r0, [pc, #8]	; (8001040 <Flash_WriteDisable+0x28>)
 8001036:	f004 ff73 	bl	8005f20 <HAL_GPIO_WritePin>
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40010c00 	.word	0x40010c00

08001044 <Flash_ReadStatusRegister1>:
{

}*/
//------------------------------------------------------------------------------------
uint8_t Flash_ReadStatusRegister1()
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
	uint8_t	status=0;
 800104a:	2300      	movs	r3, #0
 800104c:	71fb      	strb	r3, [r7, #7]
	ENABLE_CS();
 800104e:	2200      	movs	r2, #0
 8001050:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001054:	480a      	ldr	r0, [pc, #40]	; (8001080 <Flash_ReadStatusRegister1+0x3c>)
 8001056:	f004 ff63 	bl	8005f20 <HAL_GPIO_WritePin>
	SPI_RW(0x05);
 800105a:	2005      	movs	r0, #5
 800105c:	f7ff ff98 	bl	8000f90 <SPI_RW>
	status = SPI_RW(DUMMY_BYTE);
 8001060:	20ab      	movs	r0, #171	; 0xab
 8001062:	f7ff ff95 	bl	8000f90 <SPI_RW>
 8001066:	4603      	mov	r3, r0
 8001068:	71fb      	strb	r3, [r7, #7]
	Disable_CS();
 800106a:	2201      	movs	r2, #1
 800106c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001070:	4803      	ldr	r0, [pc, #12]	; (8001080 <Flash_ReadStatusRegister1+0x3c>)
 8001072:	f004 ff55 	bl	8005f20 <HAL_GPIO_WritePin>
return status;
 8001076:	79fb      	ldrb	r3, [r7, #7]
}
 8001078:	4618      	mov	r0, r3
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40010c00 	.word	0x40010c00

08001084 <Flash_WaitForWriteEnd>:
	Disable_CS();
return status;
}
//------------------------------------------------------------------------------------
void Flash_WaitForWriteEnd(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
	uint8_t	status=0;
 800108a:	2300      	movs	r3, #0
 800108c:	71fb      	strb	r3, [r7, #7]
	ENABLE_CS();
 800108e:	2200      	movs	r2, #0
 8001090:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001094:	480f      	ldr	r0, [pc, #60]	; (80010d4 <Flash_WaitForWriteEnd+0x50>)
 8001096:	f004 ff43 	bl	8005f20 <HAL_GPIO_WritePin>
	SPI_RW(0x05);
 800109a:	2005      	movs	r0, #5
 800109c:	f7ff ff78 	bl	8000f90 <SPI_RW>
	  do
	  {
		  status = SPI_RW(DUMMY_BYTE);
 80010a0:	20ab      	movs	r0, #171	; 0xab
 80010a2:	f7ff ff75 	bl	8000f90 <SPI_RW>
 80010a6:	4603      	mov	r3, r0
 80010a8:	71fb      	strb	r3, [r7, #7]
		  HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f003 fa98 	bl	80045e0 <HAL_Delay>
		  WDT();
 80010b0:	f002 f9c6 	bl	8003440 <WDT>
	  }
	  while ((status & 0x01) == 0x01);
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1f0      	bne.n	80010a0 <Flash_WaitForWriteEnd+0x1c>
	Disable_CS();
 80010be:	2201      	movs	r2, #1
 80010c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010c4:	4803      	ldr	r0, [pc, #12]	; (80010d4 <Flash_WaitForWriteEnd+0x50>)
 80010c6:	f004 ff2b 	bl	8005f20 <HAL_GPIO_WritePin>
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40010c00 	.word	0x40010c00

080010d8 <Flash_EraseChip>:
//------------------------------------------------------------------------------------
void Flash_EraseChip()
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
	Flash_WaitForWriteEnd();
 80010dc:	f7ff ffd2 	bl	8001084 <Flash_WaitForWriteEnd>
	Flash_WriteEnable();
 80010e0:	f7ff ff84 	bl	8000fec <Flash_WriteEnable>
	ENABLE_CS();
 80010e4:	2200      	movs	r2, #0
 80010e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010ea:	480a      	ldr	r0, [pc, #40]	; (8001114 <Flash_EraseChip+0x3c>)
 80010ec:	f004 ff18 	bl	8005f20 <HAL_GPIO_WritePin>
	SPI_RW(0xC7);
 80010f0:	20c7      	movs	r0, #199	; 0xc7
 80010f2:	f7ff ff4d 	bl	8000f90 <SPI_RW>
	Disable_CS();
 80010f6:	2201      	movs	r2, #1
 80010f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010fc:	4805      	ldr	r0, [pc, #20]	; (8001114 <Flash_EraseChip+0x3c>)
 80010fe:	f004 ff0f 	bl	8005f20 <HAL_GPIO_WritePin>
	Flash_WaitForWriteEnd();
 8001102:	f7ff ffbf 	bl	8001084 <Flash_WaitForWriteEnd>
	Flash_WriteDisable();
 8001106:	f7ff ff87 	bl	8001018 <Flash_WriteDisable>
	Flash_WaitForWriteEnd();
 800110a:	f7ff ffbb 	bl	8001084 <Flash_WaitForWriteEnd>
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40010c00 	.word	0x40010c00

08001118 <Flash_WritePage>:
//------------------------------------------------------------------------------------
void Flash_WritePage(uint8_t *pBuffer, uint32_t Page_Number, uint32_t NumByteToWrite_up_to_PageSize)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
	uint8_t addr;
	uint8_t *pbuf = pBuffer;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	617b      	str	r3, [r7, #20]
	Flash_WaitForWriteEnd();
 8001128:	f7ff ffac 	bl	8001084 <Flash_WaitForWriteEnd>
	Flash_WriteEnable();
 800112c:	f7ff ff5e 	bl	8000fec <Flash_WriteEnable>
	Page_Number = (Page_Number*256);
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	021b      	lsls	r3, r3, #8
 8001134:	60bb      	str	r3, [r7, #8]
	ENABLE_CS();
 8001136:	2200      	movs	r2, #0
 8001138:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800113c:	481b      	ldr	r0, [pc, #108]	; (80011ac <Flash_WritePage+0x94>)
 800113e:	f004 feef 	bl	8005f20 <HAL_GPIO_WritePin>
	SPI_RW(0x02);
 8001142:	2002      	movs	r0, #2
 8001144:	f7ff ff24 	bl	8000f90 <SPI_RW>
	addr = (uint8_t)((Page_Number & 0x00FF0000) >> 16);
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	0c1b      	lsrs	r3, r3, #16
 800114c:	74fb      	strb	r3, [r7, #19]
	SPI_RW(addr);
 800114e:	7cfb      	ldrb	r3, [r7, #19]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff ff1d 	bl	8000f90 <SPI_RW>
	addr = (uint8_t)((Page_Number & 0x0000FF00) >> 8);
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	0a1b      	lsrs	r3, r3, #8
 800115a:	74fb      	strb	r3, [r7, #19]
	SPI_RW(addr);
 800115c:	7cfb      	ldrb	r3, [r7, #19]
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff ff16 	bl	8000f90 <SPI_RW>
	addr = (uint8_t)((Page_Number & 0x000000FF));
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	74fb      	strb	r3, [r7, #19]
	SPI_RW(addr);
 8001168:	7cfb      	ldrb	r3, [r7, #19]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff ff10 	bl	8000f90 <SPI_RW>
	//SPI_Transmit(pBuffer,NumByteToWrite_up_to_PageSize);
	while(NumByteToWrite_up_to_PageSize--)
 8001170:	e007      	b.n	8001182 <Flash_WritePage+0x6a>
	{
		SPI_RW(*pbuf);
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff ff0a 	bl	8000f90 <SPI_RW>
		pbuf++;
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	3301      	adds	r3, #1
 8001180:	617b      	str	r3, [r7, #20]
	while(NumByteToWrite_up_to_PageSize--)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	1e5a      	subs	r2, r3, #1
 8001186:	607a      	str	r2, [r7, #4]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d1f2      	bne.n	8001172 <Flash_WritePage+0x5a>
	}
	Disable_CS();
 800118c:	2201      	movs	r2, #1
 800118e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001192:	4806      	ldr	r0, [pc, #24]	; (80011ac <Flash_WritePage+0x94>)
 8001194:	f004 fec4 	bl	8005f20 <HAL_GPIO_WritePin>
	Flash_WaitForWriteEnd();
 8001198:	f7ff ff74 	bl	8001084 <Flash_WaitForWriteEnd>
	Flash_WriteDisable();
 800119c:	f7ff ff3c 	bl	8001018 <Flash_WriteDisable>
	Flash_WaitForWriteEnd();
 80011a0:	f7ff ff70 	bl	8001084 <Flash_WaitForWriteEnd>
}
 80011a4:	bf00      	nop
 80011a6:	3718      	adds	r7, #24
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40010c00 	.word	0x40010c00

080011b0 <Flash_ReadPage>:
//------------------------------------------------------------------------------------
void Flash_ReadPage(uint8_t *pBuffer, uint32_t Page_Number, uint32_t NumByteToRead_up_to_PageSize)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
	uint8_t addr;
	uint8_t *pbuf = pBuffer;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	617b      	str	r3, [r7, #20]
	Flash_WaitForWriteEnd();
 80011c0:	f7ff ff60 	bl	8001084 <Flash_WaitForWriteEnd>
	Flash_WriteDisable();
 80011c4:	f7ff ff28 	bl	8001018 <Flash_WriteDisable>
	Flash_WaitForWriteEnd();
 80011c8:	f7ff ff5c 	bl	8001084 <Flash_WaitForWriteEnd>
	Page_Number = (Page_Number*256);
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	021b      	lsls	r3, r3, #8
 80011d0:	60bb      	str	r3, [r7, #8]
	ENABLE_CS();
 80011d2:	2200      	movs	r2, #0
 80011d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011d8:	481b      	ldr	r0, [pc, #108]	; (8001248 <Flash_ReadPage+0x98>)
 80011da:	f004 fea1 	bl	8005f20 <HAL_GPIO_WritePin>
	SPI_RW(0x0B);
 80011de:	200b      	movs	r0, #11
 80011e0:	f7ff fed6 	bl	8000f90 <SPI_RW>
	addr = (uint8_t)((Page_Number & 0x00FF0000) >> 16);
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	0c1b      	lsrs	r3, r3, #16
 80011e8:	74fb      	strb	r3, [r7, #19]
	SPI_RW(addr);
 80011ea:	7cfb      	ldrb	r3, [r7, #19]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff fecf 	bl	8000f90 <SPI_RW>
	addr = (uint8_t)((Page_Number & 0x0000FF00) >> 8);
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	0a1b      	lsrs	r3, r3, #8
 80011f6:	74fb      	strb	r3, [r7, #19]
	SPI_RW(addr);
 80011f8:	7cfb      	ldrb	r3, [r7, #19]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff fec8 	bl	8000f90 <SPI_RW>
	addr = (uint8_t)((Page_Number & 0x000000FF));
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	74fb      	strb	r3, [r7, #19]
	SPI_RW(addr);
 8001204:	7cfb      	ldrb	r3, [r7, #19]
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff fec2 	bl	8000f90 <SPI_RW>
	SPI_RW(DUMMY_BYTE);
 800120c:	20ab      	movs	r0, #171	; 0xab
 800120e:	f7ff febf 	bl	8000f90 <SPI_RW>
	//SPI_Receive(pBuffer,NumByteToRead_up_to_PageSize);
	while(NumByteToRead_up_to_PageSize--)
 8001212:	e009      	b.n	8001228 <Flash_ReadPage+0x78>
	{
		*pbuf = SPI_RW(DUMMY_BYTE);
 8001214:	20ab      	movs	r0, #171	; 0xab
 8001216:	f7ff febb 	bl	8000f90 <SPI_RW>
 800121a:	4603      	mov	r3, r0
 800121c:	461a      	mov	r2, r3
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	701a      	strb	r2, [r3, #0]
		pbuf++;
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	3301      	adds	r3, #1
 8001226:	617b      	str	r3, [r7, #20]
	while(NumByteToRead_up_to_PageSize--)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	1e5a      	subs	r2, r3, #1
 800122c:	607a      	str	r2, [r7, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d1f0      	bne.n	8001214 <Flash_ReadPage+0x64>
	}
	Disable_CS();
 8001232:	2201      	movs	r2, #1
 8001234:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001238:	4803      	ldr	r0, [pc, #12]	; (8001248 <Flash_ReadPage+0x98>)
 800123a:	f004 fe71 	bl	8005f20 <HAL_GPIO_WritePin>
}
 800123e:	bf00      	nop
 8001240:	3718      	adds	r7, #24
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40010c00 	.word	0x40010c00

0800124c <FlasherInit>:
#include <stdlib.h>
#include <stdio.h>

//-------------------------------------------------------------------------
bool FlasherInit()
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
	Flash_Init();
 8001250:	f7ff feba 	bl	8000fc8 <Flash_Init>
	return TestFlash();
 8001254:	f000 f9e8 	bl	8001628 <TestFlash>
 8001258:	4603      	mov	r3, r0
}
 800125a:	4618      	mov	r0, r3
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <getCRC>:
//-------------------------------------------------------------------------
unsigned long getCRC(char *pchBuf, int nBufLen)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
 8001266:	af00      	add	r7, sp, #0
 8001268:	1d3b      	adds	r3, r7, #4
 800126a:	6018      	str	r0, [r3, #0]
 800126c:	463b      	mov	r3, r7
 800126e:	6019      	str	r1, [r3, #0]
int i;
int nIndex;
char ch;
unsigned long res;
unsigned long table [] = {
 8001270:	f107 0308 	add.w	r3, r7, #8
 8001274:	4a26      	ldr	r2, [pc, #152]	; (8001310 <getCRC+0xb0>)
 8001276:	4618      	mov	r0, r3
 8001278:	4611      	mov	r1, r2
 800127a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800127e:	461a      	mov	r2, r3
 8001280:	f00a f898 	bl	800b3b4 <memcpy>
0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6,
0xBAD03605, 0xCDD70693, 0x54DE5729, 0x23D967BF,
0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94,
0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D
};
res = 0xFFFFFFFF;
 8001284:	f04f 33ff 	mov.w	r3, #4294967295
 8001288:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
for (i=0;i<nBufLen+4;i++)
 800128c:	2300      	movs	r3, #0
 800128e:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 8001292:	e02e      	b.n	80012f2 <getCRC+0x92>
{
nIndex = (res >> 24) & 0xFF;
 8001294:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8001298:	0e1b      	lsrs	r3, r3, #24
 800129a:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
if (i<nBufLen)
 800129e:	463b      	mov	r3, r7
 80012a0:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	da08      	bge.n	80012bc <getCRC+0x5c>
ch = pchBuf[i];
 80012aa:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 80012ae:	1d3a      	adds	r2, r7, #4
 80012b0:	6812      	ldr	r2, [r2, #0]
 80012b2:	4413      	add	r3, r2
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	f887 3413 	strb.w	r3, [r7, #1043]	; 0x413
 80012ba:	e002      	b.n	80012c2 <getCRC+0x62>
else
ch = 0x0;
 80012bc:	2300      	movs	r3, #0
 80012be:	f887 3413 	strb.w	r3, [r7, #1043]	; 0x413
res = (res << 8) | ch;
 80012c2:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 80012c6:	021a      	lsls	r2, r3, #8
 80012c8:	f897 3413 	ldrb.w	r3, [r7, #1043]	; 0x413
 80012cc:	4313      	orrs	r3, r2
 80012ce:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
res ^= table[nIndex];
 80012d2:	f107 0308 	add.w	r3, r7, #8
 80012d6:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 80012da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012de:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
 80012e2:	4053      	eors	r3, r2
 80012e4:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
for (i=0;i<nBufLen+4;i++)
 80012e8:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 80012ec:	3301      	adds	r3, #1
 80012ee:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 80012f2:	463b      	mov	r3, r7
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	3304      	adds	r3, #4
 80012f8:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 80012fc:	429a      	cmp	r2, r3
 80012fe:	dbc9      	blt.n	8001294 <getCRC+0x34>
      }
return res;
 8001300:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
}
 8001304:	4618      	mov	r0, r3
 8001306:	f507 6783 	add.w	r7, r7, #1048	; 0x418
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	0800bfa0 	.word	0x0800bfa0

08001314 <SendAnswer>:
//-------------------------------------------------------------------------

//-------------------------------------------------------------------------
void SendAnswer(uint8_t answ)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	71fb      	strb	r3, [r7, #7]
	uint8_t answer[2];
	answer[0]=COMMAND_PREFIX;
 800131e:	2340      	movs	r3, #64	; 0x40
 8001320:	733b      	strb	r3, [r7, #12]
	answer[1]=answ;
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	737b      	strb	r3, [r7, #13]
	Send_Data_To_CDC(answer,2);
 8001326:	f107 030c 	add.w	r3, r7, #12
 800132a:	2102      	movs	r1, #2
 800132c:	4618      	mov	r0, r3
 800132e:	f002 f891 	bl	8003454 <Send_Data_To_CDC>
}
 8001332:	bf00      	nop
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
	...

0800133c <HexBufToBuf>:
//-------------------------------------------------------------------------
uint8_t HexBufToBuf(uint8_t * Inbuf, uint8_t InLen, uint8_t *outbuf)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08a      	sub	sp, #40	; 0x28
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	460b      	mov	r3, r1
 8001346:	607a      	str	r2, [r7, #4]
 8001348:	72fb      	strb	r3, [r7, #11]
if(InLen*2>MAX_BUF) return 0;
 800134a:	7afb      	ldrb	r3, [r7, #11]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	2b64      	cmp	r3, #100	; 0x64
 8001350:	dd01      	ble.n	8001356 <HexBufToBuf+0x1a>
 8001352:	2300      	movs	r3, #0
 8001354:	e037      	b.n	80013c6 <HexBufToBuf+0x8a>
uint8_t hexstring[5];
uint8_t *uk = Inbuf;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
hexstring[0]='0';
 800135a:	2330      	movs	r3, #48	; 0x30
 800135c:	753b      	strb	r3, [r7, #20]
hexstring[1]='x';
 800135e:	2378      	movs	r3, #120	; 0x78
 8001360:	757b      	strb	r3, [r7, #21]
uint8_t len=0;
 8001362:	2300      	movs	r3, #0
 8001364:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
uint8_t * hex = (uint8_t*)(&hexstring[0]+2);
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	3302      	adds	r3, #2
 800136e:	61fb      	str	r3, [r7, #28]
for(uk=Inbuf; uk<Inbuf+InLen; uk=uk+2)
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	627b      	str	r3, [r7, #36]	; 0x24
 8001374:	e01f      	b.n	80013b6 <HexBufToBuf+0x7a>
{
	memcpy(hex, uk, 2);
 8001376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001378:	881b      	ldrh	r3, [r3, #0]
 800137a:	b29a      	uxth	r2, r3
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	801a      	strh	r2, [r3, #0]
	hex[2]=0;
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	3302      	adds	r3, #2
 8001384:	2200      	movs	r2, #0
 8001386:	701a      	strb	r2, [r3, #0]
	int c;
	sscanf((char*)hexstring, "%x", &c);
 8001388:	f107 0210 	add.w	r2, r7, #16
 800138c:	f107 0314 	add.w	r3, r7, #20
 8001390:	490f      	ldr	r1, [pc, #60]	; (80013d0 <HexBufToBuf+0x94>)
 8001392:	4618      	mov	r0, r3
 8001394:	f00a f822 	bl	800b3dc <siscanf>
	///outbuf[len]=(uint8_t)strtol((char*)hex,NULL,16);
	outbuf[len]=c;
 8001398:	6939      	ldr	r1, [r7, #16]
 800139a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	4413      	add	r3, r2
 80013a2:	b2ca      	uxtb	r2, r1
 80013a4:	701a      	strb	r2, [r3, #0]
	len++;
 80013a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80013aa:	3301      	adds	r3, #1
 80013ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
for(uk=Inbuf; uk<Inbuf+InLen; uk=uk+2)
 80013b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b2:	3302      	adds	r3, #2
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
 80013b6:	7afb      	ldrb	r3, [r7, #11]
 80013b8:	68fa      	ldr	r2, [r7, #12]
 80013ba:	4413      	add	r3, r2
 80013bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013be:	429a      	cmp	r2, r3
 80013c0:	d3d9      	bcc.n	8001376 <HexBufToBuf+0x3a>
}
return len;
 80013c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3728      	adds	r7, #40	; 0x28
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	0800c3a0 	.word	0x0800c3a0

080013d4 <WheitBusy>:
//-------------------------------------------------------------------------
void WheitBusy()
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
	Flash_WaitForWriteEnd();
 80013d8:	f7ff fe54 	bl	8001084 <Flash_WaitForWriteEnd>
}
 80013dc:	bf00      	nop
 80013de:	bd80      	pop	{r7, pc}

080013e0 <ProcessRecvedBuf>:
//-------------------------------------------------------------------------
bool ProcessRecvedBuf(uint8_t *inbuf, uint16_t len, bool PurgeBuf)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b0c4      	sub	sp, #272	; 0x110
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	1d3b      	adds	r3, r7, #4
 80013e8:	6018      	str	r0, [r3, #0]
 80013ea:	4608      	mov	r0, r1
 80013ec:	4611      	mov	r1, r2
 80013ee:	1cbb      	adds	r3, r7, #2
 80013f0:	4602      	mov	r2, r0
 80013f2:	801a      	strh	r2, [r3, #0]
 80013f4:	1c7b      	adds	r3, r7, #1
 80013f6:	460a      	mov	r2, r1
 80013f8:	701a      	strb	r2, [r3, #0]
	if(pageDataIndex>255) return false;
 80013fa:	4b55      	ldr	r3, [pc, #340]	; (8001550 <ProcessRecvedBuf+0x170>)
 80013fc:	881b      	ldrh	r3, [r3, #0]
 80013fe:	2bff      	cmp	r3, #255	; 0xff
 8001400:	d901      	bls.n	8001406 <ProcessRecvedBuf+0x26>
 8001402:	2300      	movs	r3, #0
 8001404:	e09e      	b.n	8001544 <ProcessRecvedBuf+0x164>
	if(PurgeBuf && pageDataIndex>0)
 8001406:	1c7b      	adds	r3, r7, #1
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d013      	beq.n	8001436 <ProcessRecvedBuf+0x56>
 800140e:	4b50      	ldr	r3, [pc, #320]	; (8001550 <ProcessRecvedBuf+0x170>)
 8001410:	881b      	ldrh	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d00f      	beq.n	8001436 <ProcessRecvedBuf+0x56>
	{
		//W25qxx_WritePage(pageData,PageAddr,0,pageDataIndex+1);
		Flash_WritePage(pageData,PageAddr,pageDataIndex+1);
 8001416:	4b4f      	ldr	r3, [pc, #316]	; (8001554 <ProcessRecvedBuf+0x174>)
 8001418:	6819      	ldr	r1, [r3, #0]
 800141a:	4b4d      	ldr	r3, [pc, #308]	; (8001550 <ProcessRecvedBuf+0x170>)
 800141c:	881b      	ldrh	r3, [r3, #0]
 800141e:	3301      	adds	r3, #1
 8001420:	461a      	mov	r2, r3
 8001422:	484d      	ldr	r0, [pc, #308]	; (8001558 <ProcessRecvedBuf+0x178>)
 8001424:	f7ff fe78 	bl	8001118 <Flash_WritePage>
		WheitBusy();
 8001428:	f7ff ffd4 	bl	80013d4 <WheitBusy>
		pageDataIndex=0;
 800142c:	4b48      	ldr	r3, [pc, #288]	; (8001550 <ProcessRecvedBuf+0x170>)
 800142e:	2200      	movs	r2, #0
 8001430:	801a      	strh	r2, [r3, #0]
		return true;
 8001432:	2301      	movs	r3, #1
 8001434:	e086      	b.n	8001544 <ProcessRecvedBuf+0x164>
	}
	uint16_t DataLen = len-8-1;
 8001436:	1cbb      	adds	r3, r7, #2
 8001438:	881b      	ldrh	r3, [r3, #0]
 800143a:	3b09      	subs	r3, #9
 800143c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint8_t prgData[257];
	if(inbuf[0]!='$' || inbuf[len-1]!='#') return false;
 8001440:	1d3b      	adds	r3, r7, #4
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b24      	cmp	r3, #36	; 0x24
 8001448:	d108      	bne.n	800145c <ProcessRecvedBuf+0x7c>
 800144a:	1cbb      	adds	r3, r7, #2
 800144c:	881b      	ldrh	r3, [r3, #0]
 800144e:	3b01      	subs	r3, #1
 8001450:	1d3a      	adds	r2, r7, #4
 8001452:	6812      	ldr	r2, [r2, #0]
 8001454:	4413      	add	r3, r2
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b23      	cmp	r3, #35	; 0x23
 800145a:	d001      	beq.n	8001460 <ProcessRecvedBuf+0x80>
 800145c:	2300      	movs	r3, #0
 800145e:	e071      	b.n	8001544 <ProcessRecvedBuf+0x164>
	if(DataLen>256*2) return false;
 8001460:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8001464:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001468:	d901      	bls.n	800146e <ProcessRecvedBuf+0x8e>
 800146a:	2300      	movs	r3, #0
 800146c:	e06a      	b.n	8001544 <ProcessRecvedBuf+0x164>
	DataLen = HexBufToBuf(inbuf+8,DataLen,prgData);
 800146e:	1d3b      	adds	r3, r7, #4
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	3308      	adds	r3, #8
 8001474:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8001478:	b2d1      	uxtb	r1, r2
 800147a:	f107 0208 	add.w	r2, r7, #8
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff ff5c 	bl	800133c <HexBufToBuf>
 8001484:	4603      	mov	r3, r0
 8001486:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	prgData[DataLen]=0;
 800148a:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800148e:	f107 0208 	add.w	r2, r7, #8
 8001492:	2100      	movs	r1, #0
 8001494:	54d1      	strb	r1, [r2, r3]
	ProgLen = ProgLen+DataLen;
 8001496:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800149a:	4b30      	ldr	r3, [pc, #192]	; (800155c <ProcessRecvedBuf+0x17c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4413      	add	r3, r2
 80014a0:	4a2e      	ldr	r2, [pc, #184]	; (800155c <ProcessRecvedBuf+0x17c>)
 80014a2:	6013      	str	r3, [r2, #0]
	for(int i=0; i<DataLen; i++)
 80014a4:	2300      	movs	r3, #0
 80014a6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80014aa:	e037      	b.n	800151c <ProcessRecvedBuf+0x13c>
	{
		if(pageDataIndex==255)
 80014ac:	4b28      	ldr	r3, [pc, #160]	; (8001550 <ProcessRecvedBuf+0x170>)
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	2bff      	cmp	r3, #255	; 0xff
 80014b2:	d112      	bne.n	80014da <ProcessRecvedBuf+0xfa>
		{
			//W25qxx_WritePage(pageData,PageAddr,0,256);
			Flash_WritePage(pageData,PageAddr,256);
 80014b4:	4b27      	ldr	r3, [pc, #156]	; (8001554 <ProcessRecvedBuf+0x174>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014bc:	4619      	mov	r1, r3
 80014be:	4826      	ldr	r0, [pc, #152]	; (8001558 <ProcessRecvedBuf+0x178>)
 80014c0:	f7ff fe2a 	bl	8001118 <Flash_WritePage>
			WheitBusy();
 80014c4:	f7ff ff86 	bl	80013d4 <WheitBusy>
			pageDataIndex=0;
 80014c8:	4b21      	ldr	r3, [pc, #132]	; (8001550 <ProcessRecvedBuf+0x170>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	801a      	strh	r2, [r3, #0]
			PageAddr=PageAddr+1;
 80014ce:	4b21      	ldr	r3, [pc, #132]	; (8001554 <ProcessRecvedBuf+0x174>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	3301      	adds	r3, #1
 80014d4:	4a1f      	ldr	r2, [pc, #124]	; (8001554 <ProcessRecvedBuf+0x174>)
 80014d6:	6013      	str	r3, [r2, #0]
 80014d8:	e01b      	b.n	8001512 <ProcessRecvedBuf+0x132>
		}
		else
		{
			pageData[pageDataIndex]=prgData[i];
 80014da:	4b1d      	ldr	r3, [pc, #116]	; (8001550 <ProcessRecvedBuf+0x170>)
 80014dc:	881b      	ldrh	r3, [r3, #0]
 80014de:	4619      	mov	r1, r3
 80014e0:	f107 0208 	add.w	r2, r7, #8
 80014e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80014e8:	4413      	add	r3, r2
 80014ea:	781a      	ldrb	r2, [r3, #0]
 80014ec:	4b1a      	ldr	r3, [pc, #104]	; (8001558 <ProcessRecvedBuf+0x178>)
 80014ee:	545a      	strb	r2, [r3, r1]
			received_cc[pageDataIndex] = prgData[i];
 80014f0:	4b17      	ldr	r3, [pc, #92]	; (8001550 <ProcessRecvedBuf+0x170>)
 80014f2:	881b      	ldrh	r3, [r3, #0]
 80014f4:	4619      	mov	r1, r3
 80014f6:	f107 0208 	add.w	r2, r7, #8
 80014fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80014fe:	4413      	add	r3, r2
 8001500:	781a      	ldrb	r2, [r3, #0]
 8001502:	4b17      	ldr	r3, [pc, #92]	; (8001560 <ProcessRecvedBuf+0x180>)
 8001504:	545a      	strb	r2, [r3, r1]
			pageDataIndex++;
 8001506:	4b12      	ldr	r3, [pc, #72]	; (8001550 <ProcessRecvedBuf+0x170>)
 8001508:	881b      	ldrh	r3, [r3, #0]
 800150a:	3301      	adds	r3, #1
 800150c:	b29a      	uxth	r2, r3
 800150e:	4b10      	ldr	r3, [pc, #64]	; (8001550 <ProcessRecvedBuf+0x170>)
 8001510:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<DataLen; i++)
 8001512:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001516:	3301      	adds	r3, #1
 8001518:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800151c:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8001520:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001524:	429a      	cmp	r2, r3
 8001526:	dbc1      	blt.n	80014ac <ProcessRecvedBuf+0xcc>

		}
	}
	pagedata_cc = pageDataIndex;
 8001528:	4b09      	ldr	r3, [pc, #36]	; (8001550 <ProcessRecvedBuf+0x170>)
 800152a:	881b      	ldrh	r3, [r3, #0]
 800152c:	461a      	mov	r2, r3
 800152e:	4b0d      	ldr	r3, [pc, #52]	; (8001564 <ProcessRecvedBuf+0x184>)
 8001530:	601a      	str	r2, [r3, #0]
    datalen_cc = DataLen;
 8001532:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8001536:	4a0c      	ldr	r2, [pc, #48]	; (8001568 <ProcessRecvedBuf+0x188>)
 8001538:	6013      	str	r3, [r2, #0]
	reclen_cc = len;
 800153a:	1cbb      	adds	r3, r7, #2
 800153c:	881b      	ldrh	r3, [r3, #0]
 800153e:	4a0b      	ldr	r2, [pc, #44]	; (800156c <ProcessRecvedBuf+0x18c>)
 8001540:	6013      	str	r3, [r2, #0]
	return true;
 8001542:	2301      	movs	r3, #1
}
 8001544:	4618      	mov	r0, r3
 8001546:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200008d0 	.word	0x200008d0
 8001554:	20000774 	.word	0x20000774
 8001558:	200007b8 	.word	0x200007b8
 800155c:	200008bc 	.word	0x200008bc
 8001560:	200005f4 	.word	0x200005f4
 8001564:	20000700 	.word	0x20000700
 8001568:	200006f8 	.word	0x200006f8
 800156c:	200006fc 	.word	0x200006fc

08001570 <FinishFlash>:
//-------------------------------------------------------------------------
extern void WDT();

void FinishFlash()
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
	ProcessRecvedBuf(NULL,0,true);
 8001576:	2201      	movs	r2, #1
 8001578:	2100      	movs	r1, #0
 800157a:	2000      	movs	r0, #0
 800157c:	f7ff ff30 	bl	80013e0 <ProcessRecvedBuf>
	WDT();
 8001580:	f001 ff5e 	bl	8003440 <WDT>
	PageAddr=0;
 8001584:	4b23      	ldr	r3, [pc, #140]	; (8001614 <FinishFlash+0xa4>)
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
	unsigned long CR=0;
 800158a:	2300      	movs	r3, #0
 800158c:	607b      	str	r3, [r7, #4]
	uint16_t pages = (ProgLen/256)+1;
 800158e:	4b22      	ldr	r3, [pc, #136]	; (8001618 <FinishFlash+0xa8>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	0a1b      	lsrs	r3, r3, #8
 8001594:	b29b      	uxth	r3, r3
 8001596:	3301      	adds	r3, #1
 8001598:	817b      	strh	r3, [r7, #10]
	for(int i=1; i<=pages; i++)
 800159a:	2301      	movs	r3, #1
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	e017      	b.n	80015d0 <FinishFlash+0x60>
	{
		memset(pageData,0,256);
 80015a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015a4:	2100      	movs	r1, #0
 80015a6:	481d      	ldr	r0, [pc, #116]	; (800161c <FinishFlash+0xac>)
 80015a8:	f009 ff0f 	bl	800b3ca <memset>
		//W25qxx_ReadPage(pageData,i,0,256);
		Flash_ReadPage(pageData,i,256);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015b2:	4619      	mov	r1, r3
 80015b4:	4819      	ldr	r0, [pc, #100]	; (800161c <FinishFlash+0xac>)
 80015b6:	f7ff fdfb 	bl	80011b0 <Flash_ReadPage>
		CR=CR+getCRC((char*)pageData,(int)255);
 80015ba:	21ff      	movs	r1, #255	; 0xff
 80015bc:	4817      	ldr	r0, [pc, #92]	; (800161c <FinishFlash+0xac>)
 80015be:	f7ff fe4f 	bl	8001260 <getCRC>
 80015c2:	4602      	mov	r2, r0
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4413      	add	r3, r2
 80015c8:	607b      	str	r3, [r7, #4]
	for(int i=1; i<=pages; i++)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	3301      	adds	r3, #1
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	897b      	ldrh	r3, [r7, #10]
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	dde3      	ble.n	80015a0 <FinishFlash+0x30>
	}
	memset(pageData,0,256);
 80015d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015dc:	2100      	movs	r1, #0
 80015de:	480f      	ldr	r0, [pc, #60]	; (800161c <FinishFlash+0xac>)
 80015e0:	f009 fef3 	bl	800b3ca <memset>
	pageData[0]=0xAB;
 80015e4:	4b0d      	ldr	r3, [pc, #52]	; (800161c <FinishFlash+0xac>)
 80015e6:	22ab      	movs	r2, #171	; 0xab
 80015e8:	701a      	strb	r2, [r3, #0]
	memcpy(pageData+1,&CR,4);
 80015ea:	4a0d      	ldr	r2, [pc, #52]	; (8001620 <FinishFlash+0xb0>)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6013      	str	r3, [r2, #0]
	memcpy(pageData+1+4,&ProgLen,4);
 80015f0:	4a0c      	ldr	r2, [pc, #48]	; (8001624 <FinishFlash+0xb4>)
 80015f2:	4b09      	ldr	r3, [pc, #36]	; (8001618 <FinishFlash+0xa8>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6013      	str	r3, [r2, #0]
	//W25qxx_WritePage(pageData,PageAddr,0,256);
	Flash_WritePage(pageData,PageAddr,256);
 80015f8:	4b06      	ldr	r3, [pc, #24]	; (8001614 <FinishFlash+0xa4>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001600:	4619      	mov	r1, r3
 8001602:	4806      	ldr	r0, [pc, #24]	; (800161c <FinishFlash+0xac>)
 8001604:	f7ff fd88 	bl	8001118 <Flash_WritePage>
	WheitBusy();
 8001608:	f7ff fee4 	bl	80013d4 <WheitBusy>
}
 800160c:	bf00      	nop
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000774 	.word	0x20000774
 8001618:	200008bc 	.word	0x200008bc
 800161c:	200007b8 	.word	0x200007b8
 8001620:	200007b9 	.word	0x200007b9
 8001624:	200007bd 	.word	0x200007bd

08001628 <TestFlash>:
//-------------------------------------------------------------------------
bool TestFlash()
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
pageDataIndex=0;
 800162e:	4b30      	ldr	r3, [pc, #192]	; (80016f0 <TestFlash+0xc8>)
 8001630:	2200      	movs	r2, #0
 8001632:	801a      	strh	r2, [r3, #0]
PageAddr=0;
 8001634:	4b2f      	ldr	r3, [pc, #188]	; (80016f4 <TestFlash+0xcc>)
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
WDT();
 800163a:	f001 ff01 	bl	8003440 <WDT>
//W25qxx_ReadPage(pageData,PageAddr,0,256);
Flash_ReadPage(pageData,PageAddr,256);
 800163e:	4b2d      	ldr	r3, [pc, #180]	; (80016f4 <TestFlash+0xcc>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001646:	4619      	mov	r1, r3
 8001648:	482b      	ldr	r0, [pc, #172]	; (80016f8 <TestFlash+0xd0>)
 800164a:	f7ff fdb1 	bl	80011b0 <Flash_ReadPage>
if(pageData[0]!=0xAB) return false;
 800164e:	4b2a      	ldr	r3, [pc, #168]	; (80016f8 <TestFlash+0xd0>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2bab      	cmp	r3, #171	; 0xab
 8001654:	d001      	beq.n	800165a <TestFlash+0x32>
 8001656:	2300      	movs	r3, #0
 8001658:	e046      	b.n	80016e8 <TestFlash+0xc0>
unsigned long CR=0;
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]
unsigned long fCR=0;
 800165e:	2300      	movs	r3, #0
 8001660:	603b      	str	r3, [r7, #0]
memcpy(&fCR,pageData+1,4);
 8001662:	4b26      	ldr	r3, [pc, #152]	; (80016fc <TestFlash+0xd4>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	603b      	str	r3, [r7, #0]
memcpy(&ProgLen,pageData+1+4,4);
 8001668:	4b25      	ldr	r3, [pc, #148]	; (8001700 <TestFlash+0xd8>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	461a      	mov	r2, r3
 800166e:	4b25      	ldr	r3, [pc, #148]	; (8001704 <TestFlash+0xdc>)
 8001670:	601a      	str	r2, [r3, #0]
uint16_t pages = (ProgLen/256)+1;
 8001672:	4b24      	ldr	r3, [pc, #144]	; (8001704 <TestFlash+0xdc>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	0a1b      	lsrs	r3, r3, #8
 8001678:	b29b      	uxth	r3, r3
 800167a:	3301      	adds	r3, #1
 800167c:	80fb      	strh	r3, [r7, #6]
for(int i=1; i<=pages; i++)
 800167e:	2301      	movs	r3, #1
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	e017      	b.n	80016b4 <TestFlash+0x8c>
{
	memset(pageData,0,256);
 8001684:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001688:	2100      	movs	r1, #0
 800168a:	481b      	ldr	r0, [pc, #108]	; (80016f8 <TestFlash+0xd0>)
 800168c:	f009 fe9d 	bl	800b3ca <memset>
	//W25qxx_ReadPage(pageData,i,0,256);
	Flash_ReadPage(pageData,i,256);
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001696:	4619      	mov	r1, r3
 8001698:	4817      	ldr	r0, [pc, #92]	; (80016f8 <TestFlash+0xd0>)
 800169a:	f7ff fd89 	bl	80011b0 <Flash_ReadPage>
	CR=CR+getCRC((char*)pageData,(int)255);
 800169e:	21ff      	movs	r1, #255	; 0xff
 80016a0:	4815      	ldr	r0, [pc, #84]	; (80016f8 <TestFlash+0xd0>)
 80016a2:	f7ff fddd 	bl	8001260 <getCRC>
 80016a6:	4602      	mov	r2, r0
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	4413      	add	r3, r2
 80016ac:	60fb      	str	r3, [r7, #12]
for(int i=1; i<=pages; i++)
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	3301      	adds	r3, #1
 80016b2:	60bb      	str	r3, [r7, #8]
 80016b4:	88fb      	ldrh	r3, [r7, #6]
 80016b6:	68ba      	ldr	r2, [r7, #8]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	dde3      	ble.n	8001684 <TestFlash+0x5c>
}
if(CR==fCR)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d107      	bne.n	80016d4 <TestFlash+0xac>
{
	FlashIsProgrammed=true;
 80016c4:	4b10      	ldr	r3, [pc, #64]	; (8001708 <TestFlash+0xe0>)
 80016c6:	2201      	movs	r2, #1
 80016c8:	701a      	strb	r2, [r3, #0]
	PageAddr=1;
 80016ca:	4b0a      	ldr	r3, [pc, #40]	; (80016f4 <TestFlash+0xcc>)
 80016cc:	2201      	movs	r2, #1
 80016ce:	601a      	str	r2, [r3, #0]
	return true;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e009      	b.n	80016e8 <TestFlash+0xc0>
}
else
{
	FlashIsProgrammed=false;
 80016d4:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <TestFlash+0xe0>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	701a      	strb	r2, [r3, #0]
	PageAddr=1;
 80016da:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <TestFlash+0xcc>)
 80016dc:	2201      	movs	r2, #1
 80016de:	601a      	str	r2, [r3, #0]
	ProgLen=0;
 80016e0:	4b08      	ldr	r3, [pc, #32]	; (8001704 <TestFlash+0xdc>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
	return false;
 80016e6:	2300      	movs	r3, #0
}
return false;
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	200008d0 	.word	0x200008d0
 80016f4:	20000774 	.word	0x20000774
 80016f8:	200007b8 	.word	0x200007b8
 80016fc:	200007b9 	.word	0x200007b9
 8001700:	200007bd 	.word	0x200007bd
 8001704:	200008bc 	.word	0x200008bc
 8001708:	200008b8 	.word	0x200008b8

0800170c <PC_BuffProcessing>:
//-------------------------------------------------------------------------
void PC_BuffProcessing(RecData * Recved)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
	if(Recved->len==0) return;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001718:	2b00      	cmp	r3, #0
 800171a:	d06d      	beq.n	80017f8 <PC_BuffProcessing+0xec>
	if(Recved->Data[0]==COMMAND_PREFIX)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b40      	cmp	r3, #64	; 0x40
 8001722:	d137      	bne.n	8001794 <PC_BuffProcessing+0x88>
	{
		if(Recved->Data[1]==ENTER_PROGRAMMING_MODE)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	785b      	ldrb	r3, [r3, #1]
 8001728:	2b50      	cmp	r3, #80	; 0x50
 800172a:	d116      	bne.n	800175a <PC_BuffProcessing+0x4e>
		{
			//W25qxx_EraseChip();
			Flash_EraseChip();
 800172c:	f7ff fcd4 	bl	80010d8 <Flash_EraseChip>
			WDT();
 8001730:	f001 fe86 	bl	8003440 <WDT>
			FlashIsProgrammed=false;
 8001734:	4b32      	ldr	r3, [pc, #200]	; (8001800 <PC_BuffProcessing+0xf4>)
 8001736:	2200      	movs	r2, #0
 8001738:	701a      	strb	r2, [r3, #0]
			ProgInited=false;
 800173a:	4b32      	ldr	r3, [pc, #200]	; (8001804 <PC_BuffProcessing+0xf8>)
 800173c:	2200      	movs	r2, #0
 800173e:	701a      	strb	r2, [r3, #0]
			PageAddr=1;
 8001740:	4b31      	ldr	r3, [pc, #196]	; (8001808 <PC_BuffProcessing+0xfc>)
 8001742:	2201      	movs	r2, #1
 8001744:	601a      	str	r2, [r3, #0]
			ProgLen=0;
 8001746:	4b31      	ldr	r3, [pc, #196]	; (800180c <PC_BuffProcessing+0x100>)
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
			pageDataIndex=0;
 800174c:	4b30      	ldr	r3, [pc, #192]	; (8001810 <PC_BuffProcessing+0x104>)
 800174e:	2200      	movs	r2, #0
 8001750:	801a      	strh	r2, [r3, #0]
			ProgrammingMode=true;
 8001752:	4b30      	ldr	r3, [pc, #192]	; (8001814 <PC_BuffProcessing+0x108>)
 8001754:	2201      	movs	r2, #1
 8001756:	701a      	strb	r2, [r3, #0]
 8001758:	e018      	b.n	800178c <PC_BuffProcessing+0x80>
		}
		else if(Recved->Data[1]==CLOSE_PROGRAMMING_MODE && ProgrammingMode)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	785b      	ldrb	r3, [r3, #1]
 800175e:	2b45      	cmp	r3, #69	; 0x45
 8001760:	d114      	bne.n	800178c <PC_BuffProcessing+0x80>
 8001762:	4b2c      	ldr	r3, [pc, #176]	; (8001814 <PC_BuffProcessing+0x108>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d010      	beq.n	800178c <PC_BuffProcessing+0x80>
		{
			FinishFlash();
 800176a:	f7ff ff01 	bl	8001570 <FinishFlash>
			ProgrammingMode=false;
 800176e:	4b29      	ldr	r3, [pc, #164]	; (8001814 <PC_BuffProcessing+0x108>)
 8001770:	2200      	movs	r2, #0
 8001772:	701a      	strb	r2, [r3, #0]
			if(!TestFlash())
 8001774:	f7ff ff58 	bl	8001628 <TestFlash>
 8001778:	4603      	mov	r3, r0
 800177a:	f083 0301 	eor.w	r3, r3, #1
 800177e:	b2db      	uxtb	r3, r3
 8001780:	2b00      	cmp	r3, #0
 8001782:	d003      	beq.n	800178c <PC_BuffProcessing+0x80>
			{
				SendAnswer(ERR_ANSWER);
 8001784:	2052      	movs	r0, #82	; 0x52
 8001786:	f7ff fdc5 	bl	8001314 <SendAnswer>
				return;
 800178a:	e036      	b.n	80017fa <PC_BuffProcessing+0xee>
			}
		}
		SendAnswer(OK_ANSWER);
 800178c:	204f      	movs	r0, #79	; 0x4f
 800178e:	f7ff fdc1 	bl	8001314 <SendAnswer>
		return;
 8001792:	e032      	b.n	80017fa <PC_BuffProcessing+0xee>
	}
	else if(!ProgrammingMode)
 8001794:	4b1f      	ldr	r3, [pc, #124]	; (8001814 <PC_BuffProcessing+0x108>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	f083 0301 	eor.w	r3, r3, #1
 800179c:	b2db      	uxtb	r3, r3
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <PC_BuffProcessing+0x9e>
	{
		SendAnswer(ERR_ANSWER);
 80017a2:	2052      	movs	r0, #82	; 0x52
 80017a4:	f7ff fdb6 	bl	8001314 <SendAnswer>
		return;
 80017a8:	e027      	b.n	80017fa <PC_BuffProcessing+0xee>
	}
	else if(Recved->Data[0]=='$' && ProgrammingMode)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b24      	cmp	r3, #36	; 0x24
 80017b0:	d116      	bne.n	80017e0 <PC_BuffProcessing+0xd4>
 80017b2:	4b18      	ldr	r3, [pc, #96]	; (8001814 <PC_BuffProcessing+0x108>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d012      	beq.n	80017e0 <PC_BuffProcessing+0xd4>
	{
		if(ProcessRecvedBuf(Recved->Data,(uint16_t)Recved->len, false))
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	2200      	movs	r2, #0
 80017c4:	4619      	mov	r1, r3
 80017c6:	f7ff fe0b 	bl	80013e0 <ProcessRecvedBuf>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d003      	beq.n	80017d8 <PC_BuffProcessing+0xcc>
		{
			SendAnswer(OK_ANSWER);
 80017d0:	204f      	movs	r0, #79	; 0x4f
 80017d2:	f7ff fd9f 	bl	8001314 <SendAnswer>
			return;
 80017d6:	e010      	b.n	80017fa <PC_BuffProcessing+0xee>
		}
		else
		{
			SendAnswer(ERR_ANSWER);
 80017d8:	2052      	movs	r0, #82	; 0x52
 80017da:	f7ff fd9b 	bl	8001314 <SendAnswer>
			return;
 80017de:	e00c      	b.n	80017fa <PC_BuffProcessing+0xee>
		}
	}
	else if(Recved->Data[0]=='!' && ProgrammingMode)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b21      	cmp	r3, #33	; 0x21
 80017e6:	d108      	bne.n	80017fa <PC_BuffProcessing+0xee>
 80017e8:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <PC_BuffProcessing+0x108>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d004      	beq.n	80017fa <PC_BuffProcessing+0xee>
	{
		SendAnswer(OK_ANSWER);
 80017f0:	204f      	movs	r0, #79	; 0x4f
 80017f2:	f7ff fd8f 	bl	8001314 <SendAnswer>
 80017f6:	e000      	b.n	80017fa <PC_BuffProcessing+0xee>
	if(Recved->len==0) return;
 80017f8:	bf00      	nop
	}
}
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	200008b8 	.word	0x200008b8
 8001804:	20000771 	.word	0x20000771
 8001808:	20000774 	.word	0x20000774
 800180c:	200008bc 	.word	0x200008bc
 8001810:	200008d0 	.word	0x200008d0
 8001814:	20000770 	.word	0x20000770

08001818 <InitGlobals>:
uint16_t pageDataIndex; //при выполнении программы тут индекс начала программы на странице 1


//----------------------------------------------------------------------
void InitGlobals()
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
	ProgrammingMode = false;
 800181c:	4b10      	ldr	r3, [pc, #64]	; (8001860 <InitGlobals+0x48>)
 800181e:	2200      	movs	r2, #0
 8001820:	701a      	strb	r2, [r3, #0]
	RecvData.len=0;
 8001822:	4b10      	ldr	r3, [pc, #64]	; (8001864 <InitGlobals+0x4c>)
 8001824:	2200      	movs	r2, #0
 8001826:	665a      	str	r2, [r3, #100]	; 0x64
	SendData.len=0;
 8001828:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <InitGlobals+0x50>)
 800182a:	2200      	movs	r2, #0
 800182c:	60da      	str	r2, [r3, #12]
	memset(&Channels,0,sizeof(Channels));
 800182e:	2240      	movs	r2, #64	; 0x40
 8001830:	2100      	movs	r1, #0
 8001832:	480e      	ldr	r0, [pc, #56]	; (800186c <InitGlobals+0x54>)
 8001834:	f009 fdc9 	bl	800b3ca <memset>
	FlashIsProgrammed=false;
 8001838:	4b0d      	ldr	r3, [pc, #52]	; (8001870 <InitGlobals+0x58>)
 800183a:	2200      	movs	r2, #0
 800183c:	701a      	strb	r2, [r3, #0]
	BusyFlag=false;
 800183e:	4b0d      	ldr	r3, [pc, #52]	; (8001874 <InitGlobals+0x5c>)
 8001840:	2200      	movs	r2, #0
 8001842:	701a      	strb	r2, [r3, #0]
	ProgInited=false;
 8001844:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <InitGlobals+0x60>)
 8001846:	2200      	movs	r2, #0
 8001848:	701a      	strb	r2, [r3, #0]
	CareOuts=false;
 800184a:	4b0c      	ldr	r3, [pc, #48]	; (800187c <InitGlobals+0x64>)
 800184c:	2200      	movs	r2, #0
 800184e:	701a      	strb	r2, [r3, #0]
	ProgLen=0;
 8001850:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <InitGlobals+0x68>)
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
	PageAddr=1;
 8001856:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <InitGlobals+0x6c>)
 8001858:	2201      	movs	r2, #1
 800185a:	601a      	str	r2, [r3, #0]
}
 800185c:	bf00      	nop
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20000770 	.word	0x20000770
 8001864:	20000708 	.word	0x20000708
 8001868:	200008c0 	.word	0x200008c0
 800186c:	20000778 	.word	0x20000778
 8001870:	200008b8 	.word	0x200008b8
 8001874:	20000705 	.word	0x20000705
 8001878:	20000771 	.word	0x20000771
 800187c:	20000704 	.word	0x20000704
 8001880:	200008bc 	.word	0x200008bc
 8001884:	20000774 	.word	0x20000774

08001888 <ParsersInit>:
Counter_S Counter;
CntChannels CntChnlsVal;
CntDataStr CntData;
//---------------------------------------------------------------------------
void ParsersInit()
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  memset(Xses,0,sizeof(Xs)*MAXIOVAR);
 800188c:	22f0      	movs	r2, #240	; 0xf0
 800188e:	2100      	movs	r1, #0
 8001890:	4809      	ldr	r0, [pc, #36]	; (80018b8 <ParsersInit+0x30>)
 8001892:	f009 fd9a 	bl	800b3ca <memset>
  memset(Timers,0,sizeof(Timer_S)*MAXTVAR);
 8001896:	22a0      	movs	r2, #160	; 0xa0
 8001898:	2100      	movs	r1, #0
 800189a:	4808      	ldr	r0, [pc, #32]	; (80018bc <ParsersInit+0x34>)
 800189c:	f009 fd95 	bl	800b3ca <memset>
  memset(Mvars,0,sizeof(bool)*MAXMVAR);
 80018a0:	220f      	movs	r2, #15
 80018a2:	2100      	movs	r1, #0
 80018a4:	4806      	ldr	r0, [pc, #24]	; (80018c0 <ParsersInit+0x38>)
 80018a6:	f009 fd90 	bl	800b3ca <memset>
  memset(Coils,0,sizeof(bool)*MAXCOIL);
 80018aa:	2202      	movs	r2, #2
 80018ac:	2100      	movs	r1, #0
 80018ae:	4805      	ldr	r0, [pc, #20]	; (80018c4 <ParsersInit+0x3c>)
 80018b0:	f009 fd8b 	bl	800b3ca <memset>
}
 80018b4:	bf00      	nop
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	200010e4 	.word	0x200010e4
 80018bc:	200008d4 	.word	0x200008d4
 80018c0:	200011dc 	.word	0x200011dc
 80018c4:	200010e0 	.word	0x200010e0

080018c8 <SetUp_PullUp_Mask>:
//---------------------------------------------------------------------------
void SetUp_PullUp_Mask(uint16_t mask)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	80fb      	strh	r3, [r7, #6]
int n = MAXIVAR+2;
 80018d2:	2307      	movs	r3, #7
 80018d4:	617b      	str	r3, [r7, #20]
if(n>16) n=16;
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	2b10      	cmp	r3, #16
 80018da:	dd01      	ble.n	80018e0 <SetUp_PullUp_Mask+0x18>
 80018dc:	2310      	movs	r3, #16
 80018de:	617b      	str	r3, [r7, #20]
bool temp;
for(int i=0; i<n; i++)
 80018e0:	2300      	movs	r3, #0
 80018e2:	613b      	str	r3, [r7, #16]
 80018e4:	e06a      	b.n	80019bc <SetUp_PullUp_Mask+0xf4>
{
	temp=(bool)(mask&1);
 80018e6:	88fb      	ldrh	r3, [r7, #6]
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	bf14      	ite	ne
 80018f0:	2301      	movne	r3, #1
 80018f2:	2300      	moveq	r3, #0
 80018f4:	73fb      	strb	r3, [r7, #15]
	mask=mask>>1;
 80018f6:	88fb      	ldrh	r3, [r7, #6]
 80018f8:	085b      	lsrs	r3, r3, #1
 80018fa:	80fb      	strh	r3, [r7, #6]
	switch(i)
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	3b02      	subs	r3, #2
 8001900:	2b04      	cmp	r3, #4
 8001902:	d858      	bhi.n	80019b6 <SetUp_PullUp_Mask+0xee>
 8001904:	a201      	add	r2, pc, #4	; (adr r2, 800190c <SetUp_PullUp_Mask+0x44>)
 8001906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800190a:	bf00      	nop
 800190c:	08001921 	.word	0x08001921
 8001910:	0800193f 	.word	0x0800193f
 8001914:	0800195d 	.word	0x0800195d
 8001918:	0800197b 	.word	0x0800197b
 800191c:	08001999 	.word	0x08001999
	{
		case 2:
			{
				if(temp)
 8001920:	7bfb      	ldrb	r3, [r7, #15]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d005      	beq.n	8001932 <SetUp_PullUp_Mask+0x6a>
					HAL_GPIO_WritePin(NP1_GPIO_Port,NP1_Pin,GPIO_PIN_RESET);
 8001926:	2200      	movs	r2, #0
 8001928:	2180      	movs	r1, #128	; 0x80
 800192a:	4828      	ldr	r0, [pc, #160]	; (80019cc <SetUp_PullUp_Mask+0x104>)
 800192c:	f004 faf8 	bl	8005f20 <HAL_GPIO_WritePin>
				else
					HAL_GPIO_WritePin(NP1_GPIO_Port,NP1_Pin,GPIO_PIN_SET);
				break;
 8001930:	e041      	b.n	80019b6 <SetUp_PullUp_Mask+0xee>
					HAL_GPIO_WritePin(NP1_GPIO_Port,NP1_Pin,GPIO_PIN_SET);
 8001932:	2201      	movs	r2, #1
 8001934:	2180      	movs	r1, #128	; 0x80
 8001936:	4825      	ldr	r0, [pc, #148]	; (80019cc <SetUp_PullUp_Mask+0x104>)
 8001938:	f004 faf2 	bl	8005f20 <HAL_GPIO_WritePin>
				break;
 800193c:	e03b      	b.n	80019b6 <SetUp_PullUp_Mask+0xee>
			}
		case 3:
			{
				if(temp)
 800193e:	7bfb      	ldrb	r3, [r7, #15]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d005      	beq.n	8001950 <SetUp_PullUp_Mask+0x88>
					HAL_GPIO_WritePin(NP2_GPIO_Port,NP2_Pin,GPIO_PIN_RESET);
 8001944:	2200      	movs	r2, #0
 8001946:	2140      	movs	r1, #64	; 0x40
 8001948:	4820      	ldr	r0, [pc, #128]	; (80019cc <SetUp_PullUp_Mask+0x104>)
 800194a:	f004 fae9 	bl	8005f20 <HAL_GPIO_WritePin>
				else
					HAL_GPIO_WritePin(NP2_GPIO_Port,NP2_Pin,GPIO_PIN_SET);
				break;
 800194e:	e032      	b.n	80019b6 <SetUp_PullUp_Mask+0xee>
					HAL_GPIO_WritePin(NP2_GPIO_Port,NP2_Pin,GPIO_PIN_SET);
 8001950:	2201      	movs	r2, #1
 8001952:	2140      	movs	r1, #64	; 0x40
 8001954:	481d      	ldr	r0, [pc, #116]	; (80019cc <SetUp_PullUp_Mask+0x104>)
 8001956:	f004 fae3 	bl	8005f20 <HAL_GPIO_WritePin>
				break;
 800195a:	e02c      	b.n	80019b6 <SetUp_PullUp_Mask+0xee>
			}
		case 4:
			{
				if(temp)
 800195c:	7bfb      	ldrb	r3, [r7, #15]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d005      	beq.n	800196e <SetUp_PullUp_Mask+0xa6>
					HAL_GPIO_WritePin(NP3_GPIO_Port,NP3_Pin,GPIO_PIN_RESET);
 8001962:	2200      	movs	r2, #0
 8001964:	2120      	movs	r1, #32
 8001966:	4819      	ldr	r0, [pc, #100]	; (80019cc <SetUp_PullUp_Mask+0x104>)
 8001968:	f004 fada 	bl	8005f20 <HAL_GPIO_WritePin>
				else
					HAL_GPIO_WritePin(NP3_GPIO_Port,NP3_Pin,GPIO_PIN_SET);
				break;
 800196c:	e023      	b.n	80019b6 <SetUp_PullUp_Mask+0xee>
					HAL_GPIO_WritePin(NP3_GPIO_Port,NP3_Pin,GPIO_PIN_SET);
 800196e:	2201      	movs	r2, #1
 8001970:	2120      	movs	r1, #32
 8001972:	4816      	ldr	r0, [pc, #88]	; (80019cc <SetUp_PullUp_Mask+0x104>)
 8001974:	f004 fad4 	bl	8005f20 <HAL_GPIO_WritePin>
				break;
 8001978:	e01d      	b.n	80019b6 <SetUp_PullUp_Mask+0xee>
			}
		case 5:
			{
				if(temp)
 800197a:	7bfb      	ldrb	r3, [r7, #15]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d005      	beq.n	800198c <SetUp_PullUp_Mask+0xc4>
					HAL_GPIO_WritePin(NP4_GPIO_Port,NP4_Pin,GPIO_PIN_RESET);
 8001980:	2200      	movs	r2, #0
 8001982:	2110      	movs	r1, #16
 8001984:	4811      	ldr	r0, [pc, #68]	; (80019cc <SetUp_PullUp_Mask+0x104>)
 8001986:	f004 facb 	bl	8005f20 <HAL_GPIO_WritePin>
				else
					HAL_GPIO_WritePin(NP4_GPIO_Port,NP4_Pin,GPIO_PIN_SET);
				break;
 800198a:	e014      	b.n	80019b6 <SetUp_PullUp_Mask+0xee>
					HAL_GPIO_WritePin(NP4_GPIO_Port,NP4_Pin,GPIO_PIN_SET);
 800198c:	2201      	movs	r2, #1
 800198e:	2110      	movs	r1, #16
 8001990:	480e      	ldr	r0, [pc, #56]	; (80019cc <SetUp_PullUp_Mask+0x104>)
 8001992:	f004 fac5 	bl	8005f20 <HAL_GPIO_WritePin>
				break;
 8001996:	e00e      	b.n	80019b6 <SetUp_PullUp_Mask+0xee>
			}
		case 6:
			{
				if(temp)
 8001998:	7bfb      	ldrb	r3, [r7, #15]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d005      	beq.n	80019aa <SetUp_PullUp_Mask+0xe2>
					HAL_GPIO_WritePin(NP5_GPIO_Port,NP5_Pin,GPIO_PIN_RESET);
 800199e:	2200      	movs	r2, #0
 80019a0:	2108      	movs	r1, #8
 80019a2:	480a      	ldr	r0, [pc, #40]	; (80019cc <SetUp_PullUp_Mask+0x104>)
 80019a4:	f004 fabc 	bl	8005f20 <HAL_GPIO_WritePin>
				else
					HAL_GPIO_WritePin(NP5_GPIO_Port,NP5_Pin,GPIO_PIN_SET);
				break;
 80019a8:	e004      	b.n	80019b4 <SetUp_PullUp_Mask+0xec>
					HAL_GPIO_WritePin(NP5_GPIO_Port,NP5_Pin,GPIO_PIN_SET);
 80019aa:	2201      	movs	r2, #1
 80019ac:	2108      	movs	r1, #8
 80019ae:	4807      	ldr	r0, [pc, #28]	; (80019cc <SetUp_PullUp_Mask+0x104>)
 80019b0:	f004 fab6 	bl	8005f20 <HAL_GPIO_WritePin>
				break;
 80019b4:	bf00      	nop
for(int i=0; i<n; i++)
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	3301      	adds	r3, #1
 80019ba:	613b      	str	r3, [r7, #16]
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	db90      	blt.n	80018e6 <SetUp_PullUp_Mask+0x1e>
			}
    }
}
}
 80019c4:	bf00      	nop
 80019c6:	3718      	adds	r7, #24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40010c00 	.word	0x40010c00

080019d0 <ParseXString>:
//---------------------------------------------------------------------------
void ParseXString(uint8_t * XString, int xLen)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b08a      	sub	sp, #40	; 0x28
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
	Xparm x;
	uint8_t * str = XString;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t temp[8];
	int val=0;
 80019de:	2300      	movs	r3, #0
 80019e0:	60bb      	str	r3, [r7, #8]
	memcpy(temp,str,3);
 80019e2:	f107 030c 	add.w	r3, r7, #12
 80019e6:	2203      	movs	r2, #3
 80019e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019ea:	4618      	mov	r0, r3
 80019ec:	f009 fce2 	bl	800b3b4 <memcpy>
	temp[3]=0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	73fb      	strb	r3, [r7, #15]
	sscanf((char*)(temp+1),"%d",&val);
 80019f4:	f107 030c 	add.w	r3, r7, #12
 80019f8:	3301      	adds	r3, #1
 80019fa:	f107 0208 	add.w	r2, r7, #8
 80019fe:	49a6      	ldr	r1, [pc, #664]	; (8001c98 <ParseXString+0x2c8>)
 8001a00:	4618      	mov	r0, r3
 8001a02:	f009 fceb 	bl	800b3dc <siscanf>
	x.InNum = (uint8_t)val;	//MESUT Hangi input olduğunu alıyor
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	757b      	strb	r3, [r7, #21]
	x.Inletter = temp[0];	//MESUT  F, I, C girislerini seciyor.
 8001a0c:	7b3b      	ldrb	r3, [r7, #12]
 8001a0e:	753b      	strb	r3, [r7, #20]
	str=XString+3;	// > veya < operasyonunu belirlemek icin kullanılıyor
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3303      	adds	r3, #3
 8001a14:	627b      	str	r3, [r7, #36]	; 0x24
	x.ccondition = *str;
 8001a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	75fb      	strb	r3, [r7, #23]
	str=str+1;		// condition dan sonra değer gelecek, bu % mi yoksa Voltaj değeri mi bakılıyor.
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1e:	3301      	adds	r3, #1
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
	if(*str=='%')
 8001a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b25      	cmp	r3, #37	; 0x25
 8001a28:	d105      	bne.n	8001a36 <ParseXString+0x66>
	{
		x.percent=true;	//% ise percent true yapılıyor
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	763b      	strb	r3, [r7, #24]
		str=str+1;		//yüzde kaç olduğu alınıyor.
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a30:	3301      	adds	r3, #1
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24
 8001a34:	e001      	b.n	8001a3a <ParseXString+0x6a>
	}
	else x.percent=false;	//% değil ise normal değeri alacak.
 8001a36:	2300      	movs	r3, #0
 8001a38:	763b      	strb	r3, [r7, #24]
	memcpy(temp,str,8);		//conditiondan sonraki değer temp e atanıyor. 12000 milivolt diyelim 5 karakter oradan, bir de B karakteri. toplam 6 karakter.
 8001a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a3c:	f107 030c 	add.w	r3, r7, #12
 8001a40:	6810      	ldr	r0, [r2, #0]
 8001a42:	6851      	ldr	r1, [r2, #4]
 8001a44:	c303      	stmia	r3!, {r0, r1}
	for(int i=0; i<8; i++)	//<%15BX01 gibi bir ifadede B ifadesini kontrol etmek için for döngüsüne sokuyor.
 8001a46:	2300      	movs	r3, #0
 8001a48:	623b      	str	r3, [r7, #32]
 8001a4a:	e19f      	b.n	8001d8c <ParseXString+0x3bc>
	{
		if(temp[i]=='B')
 8001a4c:	f107 020c 	add.w	r2, r7, #12
 8001a50:	6a3b      	ldr	r3, [r7, #32]
 8001a52:	4413      	add	r3, r2
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	2b42      	cmp	r3, #66	; 0x42
 8001a58:	f040 8195 	bne.w	8001d86 <ParseXString+0x3b6>
		{
			temp[i]=0;
 8001a5c:	f107 020c 	add.w	r2, r7, #12
 8001a60:	6a3b      	ldr	r3, [r7, #32]
 8001a62:	4413      	add	r3, r2
 8001a64:	2200      	movs	r2, #0
 8001a66:	701a      	strb	r2, [r3, #0]
			sscanf((char*)temp,"%d",&val);
 8001a68:	f107 0208 	add.w	r2, r7, #8
 8001a6c:	f107 030c 	add.w	r3, r7, #12
 8001a70:	4989      	ldr	r1, [pc, #548]	; (8001c98 <ParseXString+0x2c8>)
 8001a72:	4618      	mov	r0, r3
 8001a74:	f009 fcb2 	bl	800b3dc <siscanf>
			x.value=(uint32_t)val;	//MESUT x.value condition  dan sonraki deger.
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	61fb      	str	r3, [r7, #28]
			str=str+i+2;			//hangi input olduğunu belirlemek için oraya gidiliyor
 8001a7c:	6a3b      	ldr	r3, [r7, #32]
 8001a7e:	3302      	adds	r3, #2
 8001a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a82:	4413      	add	r3, r2
 8001a84:	627b      	str	r3, [r7, #36]	; 0x24
			sscanf((char*)str,"%d",&val);
 8001a86:	f107 0308 	add.w	r3, r7, #8
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	4982      	ldr	r1, [pc, #520]	; (8001c98 <ParseXString+0x2c8>)
 8001a8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a90:	f009 fca4 	bl	800b3dc <siscanf>
			x.xnum=(uint8_t)val;
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	75bb      	strb	r3, [r7, #22]
			Xses[x.xnum].ConditionValue=x.value;
 8001a9a:	7dbb      	ldrb	r3, [r7, #22]
 8001a9c:	69fa      	ldr	r2, [r7, #28]
 8001a9e:	497f      	ldr	r1, [pc, #508]	; (8001c9c <ParseXString+0x2cc>)
 8001aa0:	011b      	lsls	r3, r3, #4
 8001aa2:	440b      	add	r3, r1
 8001aa4:	3308      	adds	r3, #8
 8001aa6:	601a      	str	r2, [r3, #0]
			Xses[x.xnum].Condition=x.ccondition;
 8001aa8:	7dbb      	ldrb	r3, [r7, #22]
 8001aaa:	7df9      	ldrb	r1, [r7, #23]
 8001aac:	4a7b      	ldr	r2, [pc, #492]	; (8001c9c <ParseXString+0x2cc>)
 8001aae:	011b      	lsls	r3, r3, #4
 8001ab0:	4413      	add	r3, r2
 8001ab2:	3304      	adds	r3, #4
 8001ab4:	460a      	mov	r2, r1
 8001ab6:	701a      	strb	r2, [r3, #0]
			if(x.Inletter=='F')
 8001ab8:	7d3b      	ldrb	r3, [r7, #20]
 8001aba:	2b46      	cmp	r3, #70	; 0x46
 8001abc:	d12e      	bne.n	8001b1c <ParseXString+0x14c>
			{
				if(x.InNum==0)
 8001abe:	7d7b      	ldrb	r3, [r7, #21]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d113      	bne.n	8001aec <ParseXString+0x11c>
				{
					if(!x.percent) Xses[x.xnum].Input=&Channels.FB1;
 8001ac4:	7e3b      	ldrb	r3, [r7, #24]
 8001ac6:	f083 0301 	eor.w	r3, r3, #1
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d006      	beq.n	8001ade <ParseXString+0x10e>
 8001ad0:	7dbb      	ldrb	r3, [r7, #22]
 8001ad2:	4a72      	ldr	r2, [pc, #456]	; (8001c9c <ParseXString+0x2cc>)
 8001ad4:	011b      	lsls	r3, r3, #4
 8001ad6:	4413      	add	r3, r2
 8001ad8:	4a71      	ldr	r2, [pc, #452]	; (8001ca0 <ParseXString+0x2d0>)
 8001ada:	601a      	str	r2, [r3, #0]
			}
			else
			{
				//Do Nothin. Give Error
			}
			break;
 8001adc:	e15b      	b.n	8001d96 <ParseXString+0x3c6>
					else Xses[x.xnum].Input=&Channels.FB1p;
 8001ade:	7dbb      	ldrb	r3, [r7, #22]
 8001ae0:	4a6e      	ldr	r2, [pc, #440]	; (8001c9c <ParseXString+0x2cc>)
 8001ae2:	011b      	lsls	r3, r3, #4
 8001ae4:	4413      	add	r3, r2
 8001ae6:	4a6f      	ldr	r2, [pc, #444]	; (8001ca4 <ParseXString+0x2d4>)
 8001ae8:	601a      	str	r2, [r3, #0]
			break;
 8001aea:	e154      	b.n	8001d96 <ParseXString+0x3c6>
				else if(x.InNum==1)
 8001aec:	7d7b      	ldrb	r3, [r7, #21]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	f040 8151 	bne.w	8001d96 <ParseXString+0x3c6>
					if(!x.percent) Xses[x.xnum].Input=&Channels.FB2;
 8001af4:	7e3b      	ldrb	r3, [r7, #24]
 8001af6:	f083 0301 	eor.w	r3, r3, #1
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d006      	beq.n	8001b0e <ParseXString+0x13e>
 8001b00:	7dbb      	ldrb	r3, [r7, #22]
 8001b02:	4a66      	ldr	r2, [pc, #408]	; (8001c9c <ParseXString+0x2cc>)
 8001b04:	011b      	lsls	r3, r3, #4
 8001b06:	4413      	add	r3, r2
 8001b08:	4a67      	ldr	r2, [pc, #412]	; (8001ca8 <ParseXString+0x2d8>)
 8001b0a:	601a      	str	r2, [r3, #0]
			break;
 8001b0c:	e143      	b.n	8001d96 <ParseXString+0x3c6>
					else Xses[x.xnum].Input=&Channels.FB2p;
 8001b0e:	7dbb      	ldrb	r3, [r7, #22]
 8001b10:	4a62      	ldr	r2, [pc, #392]	; (8001c9c <ParseXString+0x2cc>)
 8001b12:	011b      	lsls	r3, r3, #4
 8001b14:	4413      	add	r3, r2
 8001b16:	4a65      	ldr	r2, [pc, #404]	; (8001cac <ParseXString+0x2dc>)
 8001b18:	601a      	str	r2, [r3, #0]
			break;
 8001b1a:	e13c      	b.n	8001d96 <ParseXString+0x3c6>
			else if(x.Inletter == 'I')
 8001b1c:	7d3b      	ldrb	r3, [r7, #20]
 8001b1e:	2b49      	cmp	r3, #73	; 0x49
 8001b20:	d175      	bne.n	8001c0e <ParseXString+0x23e>
				switch(x.InNum)
 8001b22:	7d7b      	ldrb	r3, [r7, #21]
 8001b24:	2b04      	cmp	r3, #4
 8001b26:	f200 8136 	bhi.w	8001d96 <ParseXString+0x3c6>
 8001b2a:	a201      	add	r2, pc, #4	; (adr r2, 8001b30 <ParseXString+0x160>)
 8001b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b30:	08001b45 	.word	0x08001b45
 8001b34:	08001b6d 	.word	0x08001b6d
 8001b38:	08001b95 	.word	0x08001b95
 8001b3c:	08001bbd 	.word	0x08001bbd
 8001b40:	08001be5 	.word	0x08001be5
						if(!x.percent) Xses[x.xnum].Input=&Channels.CH1;
 8001b44:	7e3b      	ldrb	r3, [r7, #24]
 8001b46:	f083 0301 	eor.w	r3, r3, #1
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d006      	beq.n	8001b5e <ParseXString+0x18e>
 8001b50:	7dbb      	ldrb	r3, [r7, #22]
 8001b52:	4a52      	ldr	r2, [pc, #328]	; (8001c9c <ParseXString+0x2cc>)
 8001b54:	011b      	lsls	r3, r3, #4
 8001b56:	4413      	add	r3, r2
 8001b58:	4a55      	ldr	r2, [pc, #340]	; (8001cb0 <ParseXString+0x2e0>)
 8001b5a:	601a      	str	r2, [r3, #0]
						break;
 8001b5c:	e112      	b.n	8001d84 <ParseXString+0x3b4>
						else  Xses[x.xnum].Input=&Channels.CH1p;
 8001b5e:	7dbb      	ldrb	r3, [r7, #22]
 8001b60:	4a4e      	ldr	r2, [pc, #312]	; (8001c9c <ParseXString+0x2cc>)
 8001b62:	011b      	lsls	r3, r3, #4
 8001b64:	4413      	add	r3, r2
 8001b66:	4a53      	ldr	r2, [pc, #332]	; (8001cb4 <ParseXString+0x2e4>)
 8001b68:	601a      	str	r2, [r3, #0]
						break;
 8001b6a:	e10b      	b.n	8001d84 <ParseXString+0x3b4>
						if(!x.percent) Xses[x.xnum].Input=&Channels.CH2;
 8001b6c:	7e3b      	ldrb	r3, [r7, #24]
 8001b6e:	f083 0301 	eor.w	r3, r3, #1
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d006      	beq.n	8001b86 <ParseXString+0x1b6>
 8001b78:	7dbb      	ldrb	r3, [r7, #22]
 8001b7a:	4a48      	ldr	r2, [pc, #288]	; (8001c9c <ParseXString+0x2cc>)
 8001b7c:	011b      	lsls	r3, r3, #4
 8001b7e:	4413      	add	r3, r2
 8001b80:	4a4d      	ldr	r2, [pc, #308]	; (8001cb8 <ParseXString+0x2e8>)
 8001b82:	601a      	str	r2, [r3, #0]
						break;
 8001b84:	e0fe      	b.n	8001d84 <ParseXString+0x3b4>
						else  Xses[x.xnum].Input=&Channels.CH2p;
 8001b86:	7dbb      	ldrb	r3, [r7, #22]
 8001b88:	4a44      	ldr	r2, [pc, #272]	; (8001c9c <ParseXString+0x2cc>)
 8001b8a:	011b      	lsls	r3, r3, #4
 8001b8c:	4413      	add	r3, r2
 8001b8e:	4a4b      	ldr	r2, [pc, #300]	; (8001cbc <ParseXString+0x2ec>)
 8001b90:	601a      	str	r2, [r3, #0]
						break;
 8001b92:	e0f7      	b.n	8001d84 <ParseXString+0x3b4>
						if(!x.percent) Xses[x.xnum].Input=&Channels.CH3;
 8001b94:	7e3b      	ldrb	r3, [r7, #24]
 8001b96:	f083 0301 	eor.w	r3, r3, #1
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d006      	beq.n	8001bae <ParseXString+0x1de>
 8001ba0:	7dbb      	ldrb	r3, [r7, #22]
 8001ba2:	4a3e      	ldr	r2, [pc, #248]	; (8001c9c <ParseXString+0x2cc>)
 8001ba4:	011b      	lsls	r3, r3, #4
 8001ba6:	4413      	add	r3, r2
 8001ba8:	4a45      	ldr	r2, [pc, #276]	; (8001cc0 <ParseXString+0x2f0>)
 8001baa:	601a      	str	r2, [r3, #0]
						break;
 8001bac:	e0ea      	b.n	8001d84 <ParseXString+0x3b4>
						else  Xses[x.xnum].Input=&Channels.CH3p;
 8001bae:	7dbb      	ldrb	r3, [r7, #22]
 8001bb0:	4a3a      	ldr	r2, [pc, #232]	; (8001c9c <ParseXString+0x2cc>)
 8001bb2:	011b      	lsls	r3, r3, #4
 8001bb4:	4413      	add	r3, r2
 8001bb6:	4a43      	ldr	r2, [pc, #268]	; (8001cc4 <ParseXString+0x2f4>)
 8001bb8:	601a      	str	r2, [r3, #0]
						break;
 8001bba:	e0e3      	b.n	8001d84 <ParseXString+0x3b4>
						if(!x.percent) Xses[x.xnum].Input=&Channels.CH4;
 8001bbc:	7e3b      	ldrb	r3, [r7, #24]
 8001bbe:	f083 0301 	eor.w	r3, r3, #1
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d006      	beq.n	8001bd6 <ParseXString+0x206>
 8001bc8:	7dbb      	ldrb	r3, [r7, #22]
 8001bca:	4a34      	ldr	r2, [pc, #208]	; (8001c9c <ParseXString+0x2cc>)
 8001bcc:	011b      	lsls	r3, r3, #4
 8001bce:	4413      	add	r3, r2
 8001bd0:	4a3d      	ldr	r2, [pc, #244]	; (8001cc8 <ParseXString+0x2f8>)
 8001bd2:	601a      	str	r2, [r3, #0]
						break;
 8001bd4:	e0d6      	b.n	8001d84 <ParseXString+0x3b4>
						else  Xses[x.xnum].Input=&Channels.CH4p;
 8001bd6:	7dbb      	ldrb	r3, [r7, #22]
 8001bd8:	4a30      	ldr	r2, [pc, #192]	; (8001c9c <ParseXString+0x2cc>)
 8001bda:	011b      	lsls	r3, r3, #4
 8001bdc:	4413      	add	r3, r2
 8001bde:	4a3b      	ldr	r2, [pc, #236]	; (8001ccc <ParseXString+0x2fc>)
 8001be0:	601a      	str	r2, [r3, #0]
						break;
 8001be2:	e0cf      	b.n	8001d84 <ParseXString+0x3b4>
						if(!x.percent) Xses[x.xnum].Input=&Channels.CH5;
 8001be4:	7e3b      	ldrb	r3, [r7, #24]
 8001be6:	f083 0301 	eor.w	r3, r3, #1
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d006      	beq.n	8001bfe <ParseXString+0x22e>
 8001bf0:	7dbb      	ldrb	r3, [r7, #22]
 8001bf2:	4a2a      	ldr	r2, [pc, #168]	; (8001c9c <ParseXString+0x2cc>)
 8001bf4:	011b      	lsls	r3, r3, #4
 8001bf6:	4413      	add	r3, r2
 8001bf8:	4a35      	ldr	r2, [pc, #212]	; (8001cd0 <ParseXString+0x300>)
 8001bfa:	601a      	str	r2, [r3, #0]
						break;
 8001bfc:	e0c2      	b.n	8001d84 <ParseXString+0x3b4>
						else  Xses[x.xnum].Input=&Channels.CH5p;
 8001bfe:	7dbb      	ldrb	r3, [r7, #22]
 8001c00:	4a26      	ldr	r2, [pc, #152]	; (8001c9c <ParseXString+0x2cc>)
 8001c02:	011b      	lsls	r3, r3, #4
 8001c04:	4413      	add	r3, r2
 8001c06:	4a33      	ldr	r2, [pc, #204]	; (8001cd4 <ParseXString+0x304>)
 8001c08:	601a      	str	r2, [r3, #0]
						break;
 8001c0a:	bf00      	nop
 8001c0c:	e0ba      	b.n	8001d84 <ParseXString+0x3b4>
			else if(x.Inletter == 'C')
 8001c0e:	7d3b      	ldrb	r3, [r7, #20]
 8001c10:	2b43      	cmp	r3, #67	; 0x43
 8001c12:	f040 80c0 	bne.w	8001d96 <ParseXString+0x3c6>
				switch(x.InNum)
 8001c16:	7d7b      	ldrb	r3, [r7, #21]
 8001c18:	2b0e      	cmp	r3, #14
 8001c1a:	f200 80b2 	bhi.w	8001d82 <ParseXString+0x3b2>
 8001c1e:	a201      	add	r2, pc, #4	; (adr r2, 8001c24 <ParseXString+0x254>)
 8001c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c24:	08001c61 	.word	0x08001c61
 8001c28:	08001c6f 	.word	0x08001c6f
 8001c2c:	08001c7d 	.word	0x08001c7d
 8001c30:	08001c8b 	.word	0x08001c8b
 8001c34:	08001ce9 	.word	0x08001ce9
 8001c38:	08001cf7 	.word	0x08001cf7
 8001c3c:	08001d05 	.word	0x08001d05
 8001c40:	08001d13 	.word	0x08001d13
 8001c44:	08001d21 	.word	0x08001d21
 8001c48:	08001d2f 	.word	0x08001d2f
 8001c4c:	08001d3d 	.word	0x08001d3d
 8001c50:	08001d4b 	.word	0x08001d4b
 8001c54:	08001d59 	.word	0x08001d59
 8001c58:	08001d67 	.word	0x08001d67
 8001c5c:	08001d75 	.word	0x08001d75
						Xses[x.xnum].Input=&CntChnlsVal.CNT0.CNT0_Val;
 8001c60:	7dbb      	ldrb	r3, [r7, #22]
 8001c62:	4a0e      	ldr	r2, [pc, #56]	; (8001c9c <ParseXString+0x2cc>)
 8001c64:	011b      	lsls	r3, r3, #4
 8001c66:	4413      	add	r3, r2
 8001c68:	4a1b      	ldr	r2, [pc, #108]	; (8001cd8 <ParseXString+0x308>)
 8001c6a:	601a      	str	r2, [r3, #0]
						break;
 8001c6c:	e08a      	b.n	8001d84 <ParseXString+0x3b4>
						Xses[x.xnum].Input=&CntChnlsVal.CNT1.CNT1_Val;
 8001c6e:	7dbb      	ldrb	r3, [r7, #22]
 8001c70:	4a0a      	ldr	r2, [pc, #40]	; (8001c9c <ParseXString+0x2cc>)
 8001c72:	011b      	lsls	r3, r3, #4
 8001c74:	4413      	add	r3, r2
 8001c76:	4a19      	ldr	r2, [pc, #100]	; (8001cdc <ParseXString+0x30c>)
 8001c78:	601a      	str	r2, [r3, #0]
						break;
 8001c7a:	e083      	b.n	8001d84 <ParseXString+0x3b4>
						Xses[x.xnum].Input=&CntChnlsVal.CNT2.CNT2_Val;
 8001c7c:	7dbb      	ldrb	r3, [r7, #22]
 8001c7e:	4a07      	ldr	r2, [pc, #28]	; (8001c9c <ParseXString+0x2cc>)
 8001c80:	011b      	lsls	r3, r3, #4
 8001c82:	4413      	add	r3, r2
 8001c84:	4a16      	ldr	r2, [pc, #88]	; (8001ce0 <ParseXString+0x310>)
 8001c86:	601a      	str	r2, [r3, #0]
						break;
 8001c88:	e07c      	b.n	8001d84 <ParseXString+0x3b4>
						Xses[x.xnum].Input=&CntChnlsVal.CNT3.CNT3_Val;
 8001c8a:	7dbb      	ldrb	r3, [r7, #22]
 8001c8c:	4a03      	ldr	r2, [pc, #12]	; (8001c9c <ParseXString+0x2cc>)
 8001c8e:	011b      	lsls	r3, r3, #4
 8001c90:	4413      	add	r3, r2
 8001c92:	4a14      	ldr	r2, [pc, #80]	; (8001ce4 <ParseXString+0x314>)
 8001c94:	601a      	str	r2, [r3, #0]
						break;
 8001c96:	e075      	b.n	8001d84 <ParseXString+0x3b4>
 8001c98:	0800c3a4 	.word	0x0800c3a4
 8001c9c:	200010e4 	.word	0x200010e4
 8001ca0:	20000778 	.word	0x20000778
 8001ca4:	2000077c 	.word	0x2000077c
 8001ca8:	20000780 	.word	0x20000780
 8001cac:	20000784 	.word	0x20000784
 8001cb0:	20000788 	.word	0x20000788
 8001cb4:	200007a4 	.word	0x200007a4
 8001cb8:	2000078c 	.word	0x2000078c
 8001cbc:	200007a8 	.word	0x200007a8
 8001cc0:	20000790 	.word	0x20000790
 8001cc4:	200007ac 	.word	0x200007ac
 8001cc8:	20000794 	.word	0x20000794
 8001ccc:	200007b0 	.word	0x200007b0
 8001cd0:	20000798 	.word	0x20000798
 8001cd4:	200007b4 	.word	0x200007b4
 8001cd8:	2000099c 	.word	0x2000099c
 8001cdc:	20000a1c 	.word	0x20000a1c
 8001ce0:	20000a9c 	.word	0x20000a9c
 8001ce4:	20000b1c 	.word	0x20000b1c
						Xses[x.xnum].Input=&CntChnlsVal.CNT4.CNT4_Val;
 8001ce8:	7dbb      	ldrb	r3, [r7, #22]
 8001cea:	4a2d      	ldr	r2, [pc, #180]	; (8001da0 <ParseXString+0x3d0>)
 8001cec:	011b      	lsls	r3, r3, #4
 8001cee:	4413      	add	r3, r2
 8001cf0:	4a2c      	ldr	r2, [pc, #176]	; (8001da4 <ParseXString+0x3d4>)
 8001cf2:	601a      	str	r2, [r3, #0]
						break;
 8001cf4:	e046      	b.n	8001d84 <ParseXString+0x3b4>
						Xses[x.xnum].Input=&CntChnlsVal.CNT5.CNT5_Val;
 8001cf6:	7dbb      	ldrb	r3, [r7, #22]
 8001cf8:	4a29      	ldr	r2, [pc, #164]	; (8001da0 <ParseXString+0x3d0>)
 8001cfa:	011b      	lsls	r3, r3, #4
 8001cfc:	4413      	add	r3, r2
 8001cfe:	4a2a      	ldr	r2, [pc, #168]	; (8001da8 <ParseXString+0x3d8>)
 8001d00:	601a      	str	r2, [r3, #0]
						break;
 8001d02:	e03f      	b.n	8001d84 <ParseXString+0x3b4>
						Xses[x.xnum].Input=&CntChnlsVal.CNT6.CNT6_Val;
 8001d04:	7dbb      	ldrb	r3, [r7, #22]
 8001d06:	4a26      	ldr	r2, [pc, #152]	; (8001da0 <ParseXString+0x3d0>)
 8001d08:	011b      	lsls	r3, r3, #4
 8001d0a:	4413      	add	r3, r2
 8001d0c:	4a27      	ldr	r2, [pc, #156]	; (8001dac <ParseXString+0x3dc>)
 8001d0e:	601a      	str	r2, [r3, #0]
						break;
 8001d10:	e038      	b.n	8001d84 <ParseXString+0x3b4>
						Xses[x.xnum].Input=&CntChnlsVal.CNT7.CNT7_Val;
 8001d12:	7dbb      	ldrb	r3, [r7, #22]
 8001d14:	4a22      	ldr	r2, [pc, #136]	; (8001da0 <ParseXString+0x3d0>)
 8001d16:	011b      	lsls	r3, r3, #4
 8001d18:	4413      	add	r3, r2
 8001d1a:	4a25      	ldr	r2, [pc, #148]	; (8001db0 <ParseXString+0x3e0>)
 8001d1c:	601a      	str	r2, [r3, #0]
						break;
 8001d1e:	e031      	b.n	8001d84 <ParseXString+0x3b4>
						Xses[x.xnum].Input=&CntChnlsVal.CNT8.CNT8_Val;
 8001d20:	7dbb      	ldrb	r3, [r7, #22]
 8001d22:	4a1f      	ldr	r2, [pc, #124]	; (8001da0 <ParseXString+0x3d0>)
 8001d24:	011b      	lsls	r3, r3, #4
 8001d26:	4413      	add	r3, r2
 8001d28:	4a22      	ldr	r2, [pc, #136]	; (8001db4 <ParseXString+0x3e4>)
 8001d2a:	601a      	str	r2, [r3, #0]
						break;
 8001d2c:	e02a      	b.n	8001d84 <ParseXString+0x3b4>
						Xses[x.xnum].Input=&CntChnlsVal.CNT9.CNT9_Val;
 8001d2e:	7dbb      	ldrb	r3, [r7, #22]
 8001d30:	4a1b      	ldr	r2, [pc, #108]	; (8001da0 <ParseXString+0x3d0>)
 8001d32:	011b      	lsls	r3, r3, #4
 8001d34:	4413      	add	r3, r2
 8001d36:	4a20      	ldr	r2, [pc, #128]	; (8001db8 <ParseXString+0x3e8>)
 8001d38:	601a      	str	r2, [r3, #0]
						break;
 8001d3a:	e023      	b.n	8001d84 <ParseXString+0x3b4>
						Xses[x.xnum].Input=&CntChnlsVal.CNT10.CNT10_Val;
 8001d3c:	7dbb      	ldrb	r3, [r7, #22]
 8001d3e:	4a18      	ldr	r2, [pc, #96]	; (8001da0 <ParseXString+0x3d0>)
 8001d40:	011b      	lsls	r3, r3, #4
 8001d42:	4413      	add	r3, r2
 8001d44:	4a1d      	ldr	r2, [pc, #116]	; (8001dbc <ParseXString+0x3ec>)
 8001d46:	601a      	str	r2, [r3, #0]
						break;
 8001d48:	e01c      	b.n	8001d84 <ParseXString+0x3b4>
						Xses[x.xnum].Input=&CntChnlsVal.CNT11.CNT11_Val;
 8001d4a:	7dbb      	ldrb	r3, [r7, #22]
 8001d4c:	4a14      	ldr	r2, [pc, #80]	; (8001da0 <ParseXString+0x3d0>)
 8001d4e:	011b      	lsls	r3, r3, #4
 8001d50:	4413      	add	r3, r2
 8001d52:	4a1b      	ldr	r2, [pc, #108]	; (8001dc0 <ParseXString+0x3f0>)
 8001d54:	601a      	str	r2, [r3, #0]
						break;
 8001d56:	e015      	b.n	8001d84 <ParseXString+0x3b4>
						Xses[x.xnum].Input=&CntChnlsVal.CNT12.CNT12_Val;
 8001d58:	7dbb      	ldrb	r3, [r7, #22]
 8001d5a:	4a11      	ldr	r2, [pc, #68]	; (8001da0 <ParseXString+0x3d0>)
 8001d5c:	011b      	lsls	r3, r3, #4
 8001d5e:	4413      	add	r3, r2
 8001d60:	4a18      	ldr	r2, [pc, #96]	; (8001dc4 <ParseXString+0x3f4>)
 8001d62:	601a      	str	r2, [r3, #0]
						break;
 8001d64:	e00e      	b.n	8001d84 <ParseXString+0x3b4>
						Xses[x.xnum].Input=&CntChnlsVal.CNT13.CNT13_Val;
 8001d66:	7dbb      	ldrb	r3, [r7, #22]
 8001d68:	4a0d      	ldr	r2, [pc, #52]	; (8001da0 <ParseXString+0x3d0>)
 8001d6a:	011b      	lsls	r3, r3, #4
 8001d6c:	4413      	add	r3, r2
 8001d6e:	4a16      	ldr	r2, [pc, #88]	; (8001dc8 <ParseXString+0x3f8>)
 8001d70:	601a      	str	r2, [r3, #0]
						break;
 8001d72:	e007      	b.n	8001d84 <ParseXString+0x3b4>
						Xses[x.xnum].Input=&CntChnlsVal.CNT14.CNT14_Val;
 8001d74:	7dbb      	ldrb	r3, [r7, #22]
 8001d76:	4a0a      	ldr	r2, [pc, #40]	; (8001da0 <ParseXString+0x3d0>)
 8001d78:	011b      	lsls	r3, r3, #4
 8001d7a:	4413      	add	r3, r2
 8001d7c:	4a13      	ldr	r2, [pc, #76]	; (8001dcc <ParseXString+0x3fc>)
 8001d7e:	601a      	str	r2, [r3, #0]
						break;
 8001d80:	e000      	b.n	8001d84 <ParseXString+0x3b4>
						break;
 8001d82:	bf00      	nop
			break;
 8001d84:	e007      	b.n	8001d96 <ParseXString+0x3c6>
	for(int i=0; i<8; i++)	//<%15BX01 gibi bir ifadede B ifadesini kontrol etmek için for döngüsüne sokuyor.
 8001d86:	6a3b      	ldr	r3, [r7, #32]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	623b      	str	r3, [r7, #32]
 8001d8c:	6a3b      	ldr	r3, [r7, #32]
 8001d8e:	2b07      	cmp	r3, #7
 8001d90:	f77f ae5c 	ble.w	8001a4c <ParseXString+0x7c>
        }
	}
}
 8001d94:	e000      	b.n	8001d98 <ParseXString+0x3c8>
			break;
 8001d96:	bf00      	nop
}
 8001d98:	bf00      	nop
 8001d9a:	3728      	adds	r7, #40	; 0x28
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	200010e4 	.word	0x200010e4
 8001da4:	20000b9c 	.word	0x20000b9c
 8001da8:	20000c1c 	.word	0x20000c1c
 8001dac:	20000c9c 	.word	0x20000c9c
 8001db0:	20000d1c 	.word	0x20000d1c
 8001db4:	20000d9c 	.word	0x20000d9c
 8001db8:	20000e1c 	.word	0x20000e1c
 8001dbc:	20000e9c 	.word	0x20000e9c
 8001dc0:	20000f1c 	.word	0x20000f1c
 8001dc4:	20000f9c 	.word	0x20000f9c
 8001dc8:	2000101c 	.word	0x2000101c
 8001dcc:	2000109c 	.word	0x2000109c

08001dd0 <ProcessXs>:
//---------------------------------------------------------------------------
void ProcessXs()
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
  for(int i=0; i<MAXIOVAR; i++)
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	607b      	str	r3, [r7, #4]
 8001dda:	e090      	b.n	8001efe <ProcessXs+0x12e>
	{
		if(Xses[i].Input!=NULL && (Xses[i].Condition=='>' || Xses[i].Condition=='<' || Xses[i].Condition=='='))
 8001ddc:	4a4c      	ldr	r2, [pc, #304]	; (8001f10 <ProcessXs+0x140>)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	011b      	lsls	r3, r3, #4
 8001de2:	4413      	add	r3, r2
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f000 8086 	beq.w	8001ef8 <ProcessXs+0x128>
 8001dec:	4a48      	ldr	r2, [pc, #288]	; (8001f10 <ProcessXs+0x140>)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	011b      	lsls	r3, r3, #4
 8001df2:	4413      	add	r3, r2
 8001df4:	3304      	adds	r3, #4
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	2b3e      	cmp	r3, #62	; 0x3e
 8001dfa:	d00f      	beq.n	8001e1c <ProcessXs+0x4c>
 8001dfc:	4a44      	ldr	r2, [pc, #272]	; (8001f10 <ProcessXs+0x140>)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	011b      	lsls	r3, r3, #4
 8001e02:	4413      	add	r3, r2
 8001e04:	3304      	adds	r3, #4
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b3c      	cmp	r3, #60	; 0x3c
 8001e0a:	d007      	beq.n	8001e1c <ProcessXs+0x4c>
 8001e0c:	4a40      	ldr	r2, [pc, #256]	; (8001f10 <ProcessXs+0x140>)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	011b      	lsls	r3, r3, #4
 8001e12:	4413      	add	r3, r2
 8001e14:	3304      	adds	r3, #4
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	2b3d      	cmp	r3, #61	; 0x3d
 8001e1a:	d16d      	bne.n	8001ef8 <ProcessXs+0x128>
		{
			if(Xses[i].Condition=='>')
 8001e1c:	4a3c      	ldr	r2, [pc, #240]	; (8001f10 <ProcessXs+0x140>)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	011b      	lsls	r3, r3, #4
 8001e22:	4413      	add	r3, r2
 8001e24:	3304      	adds	r3, #4
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b3e      	cmp	r3, #62	; 0x3e
 8001e2a:	d11c      	bne.n	8001e66 <ProcessXs+0x96>
			{
			  Xses[i].Value=(bool)((int)*Xses[i].Input > (int)Xses[i].ConditionValue);
 8001e2c:	4a38      	ldr	r2, [pc, #224]	; (8001f10 <ProcessXs+0x140>)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	011b      	lsls	r3, r3, #4
 8001e32:	4413      	add	r3, r2
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff f883 	bl	8000f44 <__aeabi_f2iz>
 8001e3e:	4601      	mov	r1, r0
 8001e40:	4a33      	ldr	r2, [pc, #204]	; (8001f10 <ProcessXs+0x140>)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	011b      	lsls	r3, r3, #4
 8001e46:	4413      	add	r3, r2
 8001e48:	3308      	adds	r3, #8
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4299      	cmp	r1, r3
 8001e4e:	bfcc      	ite	gt
 8001e50:	2301      	movgt	r3, #1
 8001e52:	2300      	movle	r3, #0
 8001e54:	b2d9      	uxtb	r1, r3
 8001e56:	4a2e      	ldr	r2, [pc, #184]	; (8001f10 <ProcessXs+0x140>)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	011b      	lsls	r3, r3, #4
 8001e5c:	4413      	add	r3, r2
 8001e5e:	330c      	adds	r3, #12
 8001e60:	460a      	mov	r2, r1
 8001e62:	701a      	strb	r2, [r3, #0]
 8001e64:	e048      	b.n	8001ef8 <ProcessXs+0x128>
			}
			else if(Xses[i].Condition=='<')
 8001e66:	4a2a      	ldr	r2, [pc, #168]	; (8001f10 <ProcessXs+0x140>)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	011b      	lsls	r3, r3, #4
 8001e6c:	4413      	add	r3, r2
 8001e6e:	3304      	adds	r3, #4
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b3c      	cmp	r3, #60	; 0x3c
 8001e74:	d11c      	bne.n	8001eb0 <ProcessXs+0xe0>
			{
			  Xses[i].Value=(bool)((int)*Xses[i].Input < (int)Xses[i].ConditionValue);
 8001e76:	4a26      	ldr	r2, [pc, #152]	; (8001f10 <ProcessXs+0x140>)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	011b      	lsls	r3, r3, #4
 8001e7c:	4413      	add	r3, r2
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff f85e 	bl	8000f44 <__aeabi_f2iz>
 8001e88:	4601      	mov	r1, r0
 8001e8a:	4a21      	ldr	r2, [pc, #132]	; (8001f10 <ProcessXs+0x140>)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	011b      	lsls	r3, r3, #4
 8001e90:	4413      	add	r3, r2
 8001e92:	3308      	adds	r3, #8
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4299      	cmp	r1, r3
 8001e98:	bfb4      	ite	lt
 8001e9a:	2301      	movlt	r3, #1
 8001e9c:	2300      	movge	r3, #0
 8001e9e:	b2d9      	uxtb	r1, r3
 8001ea0:	4a1b      	ldr	r2, [pc, #108]	; (8001f10 <ProcessXs+0x140>)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	011b      	lsls	r3, r3, #4
 8001ea6:	4413      	add	r3, r2
 8001ea8:	330c      	adds	r3, #12
 8001eaa:	460a      	mov	r2, r1
 8001eac:	701a      	strb	r2, [r3, #0]
 8001eae:	e023      	b.n	8001ef8 <ProcessXs+0x128>
			}
			else if(Xses[i].Condition=='=')
 8001eb0:	4a17      	ldr	r2, [pc, #92]	; (8001f10 <ProcessXs+0x140>)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	011b      	lsls	r3, r3, #4
 8001eb6:	4413      	add	r3, r2
 8001eb8:	3304      	adds	r3, #4
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	2b3d      	cmp	r3, #61	; 0x3d
 8001ebe:	d11b      	bne.n	8001ef8 <ProcessXs+0x128>
			{
			  Xses[i].Value=(bool)((int)*Xses[i].Input == (int)Xses[i].ConditionValue);
 8001ec0:	4a13      	ldr	r2, [pc, #76]	; (8001f10 <ProcessXs+0x140>)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	011b      	lsls	r3, r3, #4
 8001ec6:	4413      	add	r3, r2
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff f839 	bl	8000f44 <__aeabi_f2iz>
 8001ed2:	4601      	mov	r1, r0
 8001ed4:	4a0e      	ldr	r2, [pc, #56]	; (8001f10 <ProcessXs+0x140>)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	011b      	lsls	r3, r3, #4
 8001eda:	4413      	add	r3, r2
 8001edc:	3308      	adds	r3, #8
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4299      	cmp	r1, r3
 8001ee2:	bf0c      	ite	eq
 8001ee4:	2301      	moveq	r3, #1
 8001ee6:	2300      	movne	r3, #0
 8001ee8:	b2d9      	uxtb	r1, r3
 8001eea:	4a09      	ldr	r2, [pc, #36]	; (8001f10 <ProcessXs+0x140>)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	011b      	lsls	r3, r3, #4
 8001ef0:	4413      	add	r3, r2
 8001ef2:	330c      	adds	r3, #12
 8001ef4:	460a      	mov	r2, r1
 8001ef6:	701a      	strb	r2, [r3, #0]
  for(int i=0; i<MAXIOVAR; i++)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3301      	adds	r3, #1
 8001efc:	607b      	str	r3, [r7, #4]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2b0e      	cmp	r3, #14
 8001f02:	f77f af6b 	ble.w	8001ddc <ProcessXs+0xc>
			}
		}
	}
}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	200010e4 	.word	0x200010e4

08001f14 <ProcessCoils>:
//---------------------------------------------------------------------------
void ProcessCoils()
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
	if(CareOuts)
 8001f1a:	4b1f      	ldr	r3, [pc, #124]	; (8001f98 <ProcessCoils+0x84>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d036      	beq.n	8001f90 <ProcessCoils+0x7c>
	{
		for(int i=0; i<MAXCOIL; i++)
 8001f22:	2300      	movs	r3, #0
 8001f24:	607b      	str	r3, [r7, #4]
 8001f26:	e030      	b.n	8001f8a <ProcessCoils+0x76>
		{
			switch(i)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d002      	beq.n	8001f34 <ProcessCoils+0x20>
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d014      	beq.n	8001f5c <ProcessCoils+0x48>
				   else
					   HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,GPIO_PIN_RESET);
				   break;
			   }
			   default:
				   break;
 8001f32:	e027      	b.n	8001f84 <ProcessCoils+0x70>
				   if(Coils[i])
 8001f34:	4a19      	ldr	r2, [pc, #100]	; (8001f9c <ProcessCoils+0x88>)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4413      	add	r3, r2
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d006      	beq.n	8001f4e <ProcessCoils+0x3a>
					   HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,GPIO_PIN_SET);
 8001f40:	2201      	movs	r2, #1
 8001f42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f46:	4816      	ldr	r0, [pc, #88]	; (8001fa0 <ProcessCoils+0x8c>)
 8001f48:	f003 ffea 	bl	8005f20 <HAL_GPIO_WritePin>
				   break;
 8001f4c:	e01a      	b.n	8001f84 <ProcessCoils+0x70>
					   HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,GPIO_PIN_RESET);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f54:	4812      	ldr	r0, [pc, #72]	; (8001fa0 <ProcessCoils+0x8c>)
 8001f56:	f003 ffe3 	bl	8005f20 <HAL_GPIO_WritePin>
				   break;
 8001f5a:	e013      	b.n	8001f84 <ProcessCoils+0x70>
				   if(Coils[i])
 8001f5c:	4a0f      	ldr	r2, [pc, #60]	; (8001f9c <ProcessCoils+0x88>)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4413      	add	r3, r2
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d006      	beq.n	8001f76 <ProcessCoils+0x62>
					   HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,GPIO_PIN_SET);
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f6e:	480c      	ldr	r0, [pc, #48]	; (8001fa0 <ProcessCoils+0x8c>)
 8001f70:	f003 ffd6 	bl	8005f20 <HAL_GPIO_WritePin>
				   break;
 8001f74:	e005      	b.n	8001f82 <ProcessCoils+0x6e>
					   HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,GPIO_PIN_RESET);
 8001f76:	2200      	movs	r2, #0
 8001f78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f7c:	4808      	ldr	r0, [pc, #32]	; (8001fa0 <ProcessCoils+0x8c>)
 8001f7e:	f003 ffcf 	bl	8005f20 <HAL_GPIO_WritePin>
				   break;
 8001f82:	bf00      	nop
		for(int i=0; i<MAXCOIL; i++)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3301      	adds	r3, #1
 8001f88:	607b      	str	r3, [r7, #4]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	ddcb      	ble.n	8001f28 <ProcessCoils+0x14>
			}
		}
	}
}
 8001f90:	bf00      	nop
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20000704 	.word	0x20000704
 8001f9c:	200010e0 	.word	0x200010e0
 8001fa0:	40010800 	.word	0x40010800

08001fa4 <ProcessTimer>:
//---------------------------------------------------------------------------
void ProcessTimer(Timer_S *Timer)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
	if(Timer->Type==TN)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	7b1b      	ldrb	r3, [r3, #12]
 8001fb0:	2b74      	cmp	r3, #116	; 0x74
 8001fb2:	d12c      	bne.n	800200e <ProcessTimer+0x6a>
	{
		if(!Timer->En)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	f083 0301 	eor.w	r3, r3, #1
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d008      	beq.n	8001fd4 <ProcessTimer+0x30>
		{
			Timer->Q=false;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	705a      	strb	r2, [r3, #1]
			Timer->StartTick=HAL_GetTick();
 8001fc8:	f002 fb00 	bl	80045cc <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	609a      	str	r2, [r3, #8]
		else
		{
			if((HAL_GetTick()-Timer->StartTick)>Timer->Delay) Timer->Q = false;
		}
	}
}
 8001fd2:	e03a      	b.n	800204a <ProcessTimer+0xa6>
			if((HAL_GetTick()-Timer->StartTick)>=Timer->Delay)
 8001fd4:	f002 fafa 	bl	80045cc <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	1ad2      	subs	r2, r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d302      	bcc.n	8001fee <ProcessTimer+0x4a>
				Timer->Q=true;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	705a      	strb	r2, [r3, #1]
			Timer->Q = (bool)((HAL_GetTick()-Timer->StartTick)>=Timer->Delay);
 8001fee:	f002 faed 	bl	80045cc <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	1ad2      	subs	r2, r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	bf2c      	ite	cs
 8002002:	2301      	movcs	r3, #1
 8002004:	2300      	movcc	r3, #0
 8002006:	b2da      	uxtb	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	705a      	strb	r2, [r3, #1]
}
 800200c:	e01d      	b.n	800204a <ProcessTimer+0xa6>
	else if(Timer->Type==TF)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	7b1b      	ldrb	r3, [r3, #12]
 8002012:	2b63      	cmp	r3, #99	; 0x63
 8002014:	d119      	bne.n	800204a <ProcessTimer+0xa6>
		if(Timer->En)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d008      	beq.n	8002030 <ProcessTimer+0x8c>
			Timer->Q=true;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2201      	movs	r2, #1
 8002022:	705a      	strb	r2, [r3, #1]
			Timer->StartTick=HAL_GetTick();
 8002024:	f002 fad2 	bl	80045cc <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	609a      	str	r2, [r3, #8]
}
 800202e:	e00c      	b.n	800204a <ProcessTimer+0xa6>
			if((HAL_GetTick()-Timer->StartTick)>Timer->Delay) Timer->Q = false;
 8002030:	f002 facc 	bl	80045cc <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	1ad2      	subs	r2, r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	429a      	cmp	r2, r3
 8002042:	d902      	bls.n	800204a <ProcessTimer+0xa6>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	705a      	strb	r2, [r3, #1]
}
 800204a:	bf00      	nop
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
	...

08002054 <ProcessTimers>:
//---------------------------------------------------------------------------
void ProcessTimers()
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
	for(int i=0; i<MAXTVAR; i++)
 800205a:	2300      	movs	r3, #0
 800205c:	607b      	str	r3, [r7, #4]
 800205e:	e009      	b.n	8002074 <ProcessTimers+0x20>
	{
	  ProcessTimer(&Timers[i]);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	011b      	lsls	r3, r3, #4
 8002064:	4a07      	ldr	r2, [pc, #28]	; (8002084 <ProcessTimers+0x30>)
 8002066:	4413      	add	r3, r2
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff ff9b 	bl	8001fa4 <ProcessTimer>
	for(int i=0; i<MAXTVAR; i++)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	3301      	adds	r3, #1
 8002072:	607b      	str	r3, [r7, #4]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b09      	cmp	r3, #9
 8002078:	ddf2      	ble.n	8002060 <ProcessTimers+0xc>
	}
}
 800207a:	bf00      	nop
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	200008d4 	.word	0x200008d4

08002088 <SetTimerParams>:
//---------------------------------------------------------------------------
bool SetTimerParams(Timer_S *Timer, bool En, uint8_t Type, uint32_t Delay)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	607b      	str	r3, [r7, #4]
 8002092:	460b      	mov	r3, r1
 8002094:	72fb      	strb	r3, [r7, #11]
 8002096:	4613      	mov	r3, r2
 8002098:	72bb      	strb	r3, [r7, #10]
	if(Timer->Type!=Type)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	7b1b      	ldrb	r3, [r3, #12]
 800209e:	7aba      	ldrb	r2, [r7, #10]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d00c      	beq.n	80020be <SetTimerParams+0x36>
		{
		 memset(Timer,0,sizeof(Timer_S));
 80020a4:	2210      	movs	r2, #16
 80020a6:	2100      	movs	r1, #0
 80020a8:	68f8      	ldr	r0, [r7, #12]
 80020aa:	f009 f98e 	bl	800b3ca <memset>
		 Timer->Type=Type;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	7aba      	ldrb	r2, [r7, #10]
 80020b2:	731a      	strb	r2, [r3, #12]
		 Timer->StartTick=HAL_GetTick();
 80020b4:	f002 fa8a 	bl	80045cc <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	609a      	str	r2, [r3, #8]
		}
	Timer->Delay=Delay;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	605a      	str	r2, [r3, #4]
	Timer->En=En;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	7afa      	ldrb	r2, [r7, #11]
 80020c8:	701a      	strb	r2, [r3, #0]
	ProcessTimer(Timer);
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f7ff ff6a 	bl	8001fa4 <ProcessTimer>
	return Timer->Q;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	785b      	ldrb	r3, [r3, #1]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3710      	adds	r7, #16
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <ProcessProgLine>:
//---------------------------------------------------------------------------
bool ProcessProgLine(uint8_t *Progstring, uint32_t len, bool *result)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b090      	sub	sp, #64	; 0x40
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
	uint8_t *MyIDX=Progstring;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t Mylen=0;
 80020ec:	2300      	movs	r3, #0
 80020ee:	63bb      	str	r3, [r7, #56]	; 0x38
	uint8_t data[8];
	uint8_t letter;
	uint8_t prevop=0;
 80020f0:	2300      	movs	r3, #0
 80020f2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	int index;
	uint8_t op=0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	float *cntVal;
	if(MyIDX[0]=='(')
 80020fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b28      	cmp	r3, #40	; 0x28
 8002102:	f040 8337 	bne.w	8002774 <ProcessProgLine+0x698>
	{
		MyIDX=MyIDX+1;
 8002106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002108:	3301      	adds	r3, #1
 800210a:	63fb      	str	r3, [r7, #60]	; 0x3c
		while((MyIDX+Mylen)<(Progstring+len))
 800210c:	e049      	b.n	80021a2 <ProcessProgLine+0xc6>
		{
			if(MyIDX[Mylen]==')')
 800210e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002112:	4413      	add	r3, r2
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	2b29      	cmp	r3, #41	; 0x29
 8002118:	d140      	bne.n	800219c <ProcessProgLine+0xc0>
			{
				bool aa=*result;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	77fb      	strb	r3, [r7, #31]
				aa = ProcessProgLine(MyIDX,Mylen, &aa);
 8002120:	f107 031f 	add.w	r3, r7, #31
 8002124:	461a      	mov	r2, r3
 8002126:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002128:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800212a:	f7ff ffd7 	bl	80020dc <ProcessProgLine>
 800212e:	4603      	mov	r3, r0
 8002130:	77fb      	strb	r3, [r7, #31]
				if(prevop==OR) *result=*result|aa;
 8002132:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002136:	2b4f      	cmp	r3, #79	; 0x4f
 8002138:	d10c      	bne.n	8002154 <ProcessProgLine+0x78>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	781a      	ldrb	r2, [r3, #0]
 800213e:	7ffb      	ldrb	r3, [r7, #31]
 8002140:	4313      	orrs	r3, r2
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b00      	cmp	r3, #0
 8002146:	bf14      	ite	ne
 8002148:	2301      	movne	r3, #1
 800214a:	2300      	moveq	r3, #0
 800214c:	b2da      	uxtb	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	701a      	strb	r2, [r3, #0]
 8002152:	e017      	b.n	8002184 <ProcessProgLine+0xa8>
				else if(prevop==AND) *result=*result&aa;
 8002154:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002158:	2b41      	cmp	r3, #65	; 0x41
 800215a:	d10c      	bne.n	8002176 <ProcessProgLine+0x9a>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	461a      	mov	r2, r3
 8002162:	7ffb      	ldrb	r3, [r7, #31]
 8002164:	4013      	ands	r3, r2
 8002166:	2b00      	cmp	r3, #0
 8002168:	bf14      	ite	ne
 800216a:	2301      	movne	r3, #1
 800216c:	2300      	moveq	r3, #0
 800216e:	b2da      	uxtb	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	701a      	strb	r2, [r3, #0]
 8002174:	e006      	b.n	8002184 <ProcessProgLine+0xa8>
				else if(prevop==0) *result = aa;
 8002176:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800217a:	2b00      	cmp	r3, #0
 800217c:	d102      	bne.n	8002184 <ProcessProgLine+0xa8>
 800217e:	7ffa      	ldrb	r2, [r7, #31]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	701a      	strb	r2, [r3, #0]
				prevop=0;
 8002184:	2300      	movs	r3, #0
 8002186:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
				MyIDX=MyIDX+Mylen+1;
 800218a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800218c:	3301      	adds	r3, #1
 800218e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002190:	4413      	add	r3, r2
 8002192:	63fb      	str	r3, [r7, #60]	; 0x3c
				Mylen=0;
 8002194:	2300      	movs	r3, #0
 8002196:	63bb      	str	r3, [r7, #56]	; 0x38
				break;
 8002198:	bf00      	nop
 800219a:	e00a      	b.n	80021b2 <ProcessProgLine+0xd6>
			}
			else Mylen=Mylen+1;
 800219c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800219e:	3301      	adds	r3, #1
 80021a0:	63bb      	str	r3, [r7, #56]	; 0x38
		while((MyIDX+Mylen)<(Progstring+len))
 80021a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021a6:	441a      	add	r2, r3
 80021a8:	68f9      	ldr	r1, [r7, #12]
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	440b      	add	r3, r1
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d3ad      	bcc.n	800210e <ProcessProgLine+0x32>
		}
	}
	while((MyIDX+Mylen)<(Progstring+len))
 80021b2:	e2df      	b.n	8002774 <ProcessProgLine+0x698>
	{
		if(MyIDX[0]==TF || MyIDX[0]==TN)
 80021b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	2b63      	cmp	r3, #99	; 0x63
 80021ba:	d003      	beq.n	80021c4 <ProcessProgLine+0xe8>
 80021bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	2b74      	cmp	r3, #116	; 0x74
 80021c2:	d166      	bne.n	8002292 <ProcessProgLine+0x1b6>
		{
			op = MyIDX[0];
 80021c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			MyIDX=MyIDX+2;
 80021cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021ce:	3302      	adds	r3, #2
 80021d0:	63fb      	str	r3, [r7, #60]	; 0x3c
			memcpy(data,MyIDX,2);
 80021d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021d4:	881b      	ldrh	r3, [r3, #0]
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	84bb      	strh	r3, [r7, #36]	; 0x24
			data[2]=0;
 80021da:	2300      	movs	r3, #0
 80021dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			sscanf((char*)data,"%d",&index);
 80021e0:	f107 0220 	add.w	r2, r7, #32
 80021e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021e8:	49b3      	ldr	r1, [pc, #716]	; (80024b8 <ProcessProgLine+0x3dc>)
 80021ea:	4618      	mov	r0, r3
 80021ec:	f009 f8f6 	bl	800b3dc <siscanf>
			MyIDX=MyIDX+3;
 80021f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021f2:	3303      	adds	r3, #3
 80021f4:	63fb      	str	r3, [r7, #60]	; 0x3c
			memcpy(data,MyIDX,8);
 80021f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021fc:	6810      	ldr	r0, [r2, #0]
 80021fe:	6851      	ldr	r1, [r2, #4]
 8002200:	c303      	stmia	r3!, {r0, r1}
			data[8]=0;
 8002202:	2300      	movs	r3, #0
 8002204:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			for(letter=0; letter<8; letter++)
 8002208:	2300      	movs	r3, #0
 800220a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800220e:	e03b      	b.n	8002288 <ProcessProgLine+0x1ac>
			{
				if(data[letter]==DELIM)
 8002210:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002214:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002218:	4413      	add	r3, r2
 800221a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800221e:	2b7c      	cmp	r3, #124	; 0x7c
 8002220:	d12d      	bne.n	800227e <ProcessProgLine+0x1a2>
				{
				   data[letter]=0;
 8002222:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002226:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800222a:	4413      	add	r3, r2
 800222c:	2200      	movs	r2, #0
 800222e:	f803 2c1c 	strb.w	r2, [r3, #-28]
				   MyIDX=MyIDX+letter+1;
 8002232:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002236:	3301      	adds	r3, #1
 8002238:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800223a:	4413      	add	r3, r2
 800223c:	63fb      	str	r3, [r7, #60]	; 0x3c
				   int val;
				   sscanf((char*)data,"%d",&val);
 800223e:	f107 0218 	add.w	r2, r7, #24
 8002242:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002246:	499c      	ldr	r1, [pc, #624]	; (80024b8 <ProcessProgLine+0x3dc>)
 8002248:	4618      	mov	r0, r3
 800224a:	f009 f8c7 	bl	800b3dc <siscanf>
				   bool aa=*result;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				   *result=SetTimerParams(&Timers[index],aa,op,val);
 8002256:	6a3b      	ldr	r3, [r7, #32]
 8002258:	011b      	lsls	r3, r3, #4
 800225a:	4a98      	ldr	r2, [pc, #608]	; (80024bc <ProcessProgLine+0x3e0>)
 800225c:	1898      	adds	r0, r3, r2
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8002264:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8002268:	f7ff ff0e 	bl	8002088 <SetTimerParams>
 800226c:	4603      	mov	r3, r0
 800226e:	461a      	mov	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	701a      	strb	r2, [r3, #0]
				   prevop=0;
 8002274:	2300      	movs	r3, #0
 8002276:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
				   break;
 800227a:	bf00      	nop
 800227c:	e008      	b.n	8002290 <ProcessProgLine+0x1b4>
			for(letter=0; letter<8; letter++)
 800227e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002282:	3301      	adds	r3, #1
 8002284:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002288:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800228c:	2b07      	cmp	r3, #7
 800228e:	d9bf      	bls.n	8002210 <ProcessProgLine+0x134>
		if(MyIDX[0]==TF || MyIDX[0]==TN)
 8002290:	e270      	b.n	8002774 <ProcessProgLine+0x698>
				}
			}
		}
		else if(MyIDX[0]==OR)
 8002292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	2b4f      	cmp	r3, #79	; 0x4f
 8002298:	d106      	bne.n	80022a8 <ProcessProgLine+0x1cc>
		{
		  MyIDX=MyIDX+1;
 800229a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800229c:	3301      	adds	r3, #1
 800229e:	63fb      	str	r3, [r7, #60]	; 0x3c
		  prevop=OR;
 80022a0:	234f      	movs	r3, #79	; 0x4f
 80022a2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80022a6:	e265      	b.n	8002774 <ProcessProgLine+0x698>
		}
		else if(MyIDX[0]==AND)
 80022a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2b41      	cmp	r3, #65	; 0x41
 80022ae:	d106      	bne.n	80022be <ProcessProgLine+0x1e2>
		{
			MyIDX=MyIDX+1;
 80022b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022b2:	3301      	adds	r3, #1
 80022b4:	63fb      	str	r3, [r7, #60]	; 0x3c
			prevop=AND;
 80022b6:	2341      	movs	r3, #65	; 0x41
 80022b8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80022bc:	e25a      	b.n	8002774 <ProcessProgLine+0x698>
		}
		else if(MyIDX[0]==')')
 80022be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b29      	cmp	r3, #41	; 0x29
 80022c4:	d105      	bne.n	80022d2 <ProcessProgLine+0x1f6>
		{
			MyIDX=MyIDX+1;
 80022c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022c8:	3301      	adds	r3, #1
 80022ca:	63fb      	str	r3, [r7, #60]	; 0x3c
			Mylen=0;
 80022cc:	2300      	movs	r3, #0
 80022ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80022d0:	e250      	b.n	8002774 <ProcessProgLine+0x698>
		}
		else if(MyIDX[0]==OT || MyIDX[0]==NOT)
 80022d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	2b56      	cmp	r3, #86	; 0x56
 80022d8:	d004      	beq.n	80022e4 <ProcessProgLine+0x208>
 80022da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b4e      	cmp	r3, #78	; 0x4e
 80022e0:	f040 8097 	bne.w	8002412 <ProcessProgLine+0x336>
		{
			op = MyIDX[0];
 80022e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			MyIDX=MyIDX+1;
 80022ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022ee:	3301      	adds	r3, #1
 80022f0:	63fb      	str	r3, [r7, #60]	; 0x3c
			letter = MyIDX[0];
 80022f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			MyIDX=MyIDX+1;
 80022fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022fc:	3301      	adds	r3, #1
 80022fe:	63fb      	str	r3, [r7, #60]	; 0x3c
			memcpy(data,MyIDX,2);
 8002300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002302:	881b      	ldrh	r3, [r3, #0]
 8002304:	b29b      	uxth	r3, r3
 8002306:	84bb      	strh	r3, [r7, #36]	; 0x24
			MyIDX=MyIDX+2;
 8002308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800230a:	3302      	adds	r3, #2
 800230c:	63fb      	str	r3, [r7, #60]	; 0x3c
			data[2]=0;
 800230e:	2300      	movs	r3, #0
 8002310:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			sscanf((char*)data,"%d",&index);
 8002314:	f107 0220 	add.w	r2, r7, #32
 8002318:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800231c:	4966      	ldr	r1, [pc, #408]	; (80024b8 <ProcessProgLine+0x3dc>)
 800231e:	4618      	mov	r0, r3
 8002320:	f009 f85c 	bl	800b3dc <siscanf>
			bool val;
			if(letter=='X') val=Xses[index].Value;
 8002324:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002328:	2b58      	cmp	r3, #88	; 0x58
 800232a:	d108      	bne.n	800233e <ProcessProgLine+0x262>
 800232c:	6a3b      	ldr	r3, [r7, #32]
 800232e:	4a64      	ldr	r2, [pc, #400]	; (80024c0 <ProcessProgLine+0x3e4>)
 8002330:	011b      	lsls	r3, r3, #4
 8002332:	4413      	add	r3, r2
 8002334:	330c      	adds	r3, #12
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800233c:	e023      	b.n	8002386 <ProcessProgLine+0x2aa>
			else if(letter=='M') val=Mvars[index];
 800233e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002342:	2b4d      	cmp	r3, #77	; 0x4d
 8002344:	d105      	bne.n	8002352 <ProcessProgLine+0x276>
 8002346:	6a3b      	ldr	r3, [r7, #32]
 8002348:	4a5e      	ldr	r2, [pc, #376]	; (80024c4 <ProcessProgLine+0x3e8>)
 800234a:	5cd3      	ldrb	r3, [r2, r3]
 800234c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002350:	e019      	b.n	8002386 <ProcessProgLine+0x2aa>
			else if(letter=='Y') val=Coils[index];
 8002352:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002356:	2b59      	cmp	r3, #89	; 0x59
 8002358:	d105      	bne.n	8002366 <ProcessProgLine+0x28a>
 800235a:	6a3b      	ldr	r3, [r7, #32]
 800235c:	4a5a      	ldr	r2, [pc, #360]	; (80024c8 <ProcessProgLine+0x3ec>)
 800235e:	5cd3      	ldrb	r3, [r2, r3]
 8002360:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002364:	e00f      	b.n	8002386 <ProcessProgLine+0x2aa>
			else if(letter=='T') val=Timers[index].Q;
 8002366:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800236a:	2b54      	cmp	r3, #84	; 0x54
 800236c:	d108      	bne.n	8002380 <ProcessProgLine+0x2a4>
 800236e:	6a3b      	ldr	r3, [r7, #32]
 8002370:	4a52      	ldr	r2, [pc, #328]	; (80024bc <ProcessProgLine+0x3e0>)
 8002372:	011b      	lsls	r3, r3, #4
 8002374:	4413      	add	r3, r2
 8002376:	3301      	adds	r3, #1
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800237e:	e002      	b.n	8002386 <ProcessProgLine+0x2aa>
			else val=false;
 8002380:	2300      	movs	r3, #0
 8002382:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if(op==NOT) val=!val;
 8002386:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800238a:	2b4e      	cmp	r3, #78	; 0x4e
 800238c:	d111      	bne.n	80023b2 <ProcessProgLine+0x2d6>
 800238e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002392:	2b00      	cmp	r3, #0
 8002394:	bf14      	ite	ne
 8002396:	2301      	movne	r3, #1
 8002398:	2300      	moveq	r3, #0
 800239a:	b2db      	uxtb	r3, r3
 800239c:	f083 0301 	eor.w	r3, r3, #1
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80023a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if(prevop==OR) *result=*result|val;
 80023b2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80023b6:	2b4f      	cmp	r3, #79	; 0x4f
 80023b8:	d10d      	bne.n	80023d6 <ProcessProgLine+0x2fa>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	781a      	ldrb	r2, [r3, #0]
 80023be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80023c2:	4313      	orrs	r3, r2
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	bf14      	ite	ne
 80023ca:	2301      	movne	r3, #1
 80023cc:	2300      	moveq	r3, #0
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	701a      	strb	r2, [r3, #0]
 80023d4:	e019      	b.n	800240a <ProcessProgLine+0x32e>
			else if(prevop==AND) *result=*result&val;
 80023d6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80023da:	2b41      	cmp	r3, #65	; 0x41
 80023dc:	d10d      	bne.n	80023fa <ProcessProgLine+0x31e>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	461a      	mov	r2, r3
 80023e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80023e8:	4013      	ands	r3, r2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	bf14      	ite	ne
 80023ee:	2301      	movne	r3, #1
 80023f0:	2300      	moveq	r3, #0
 80023f2:	b2da      	uxtb	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	701a      	strb	r2, [r3, #0]
 80023f8:	e007      	b.n	800240a <ProcessProgLine+0x32e>
			else if(prevop==0) *result=val;
 80023fa:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d103      	bne.n	800240a <ProcessProgLine+0x32e>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002408:	701a      	strb	r2, [r3, #0]
			prevop=0;
 800240a:	2300      	movs	r3, #0
 800240c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		{
 8002410:	e1b0      	b.n	8002774 <ProcessProgLine+0x698>
		}
		else if(MyIDX[0]==SET || MyIDX[0]==RES || MyIDX[0]==MOV || MyIDX[0]==CNTP || MyIDX[0]==CNTN || MyIDX[0]==CNTE)
 8002412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2b53      	cmp	r3, #83	; 0x53
 8002418:	d014      	beq.n	8002444 <ProcessProgLine+0x368>
 800241a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	2b52      	cmp	r3, #82	; 0x52
 8002420:	d010      	beq.n	8002444 <ProcessProgLine+0x368>
 8002422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	2b42      	cmp	r3, #66	; 0x42
 8002428:	d00c      	beq.n	8002444 <ProcessProgLine+0x368>
 800242a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	2b2b      	cmp	r3, #43	; 0x2b
 8002430:	d008      	beq.n	8002444 <ProcessProgLine+0x368>
 8002432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	2b2d      	cmp	r3, #45	; 0x2d
 8002438:	d004      	beq.n	8002444 <ProcessProgLine+0x368>
 800243a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	2b3d      	cmp	r3, #61	; 0x3d
 8002440:	f040 8193 	bne.w	800276a <ProcessProgLine+0x68e>
		{
			op = MyIDX[0];
 8002444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			MyIDX=MyIDX+1;
 800244c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800244e:	3301      	adds	r3, #1
 8002450:	63fb      	str	r3, [r7, #60]	; 0x3c
			letter = MyIDX[0];
 8002452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			MyIDX=MyIDX+1;
 800245a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800245c:	3301      	adds	r3, #1
 800245e:	63fb      	str	r3, [r7, #60]	; 0x3c
			memcpy(data,MyIDX,2);
 8002460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002462:	881b      	ldrh	r3, [r3, #0]
 8002464:	b29b      	uxth	r3, r3
 8002466:	84bb      	strh	r3, [r7, #36]	; 0x24
			data[2]=0;
 8002468:	2300      	movs	r3, #0
 800246a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			sscanf((char*)data,"%d",&index);
 800246e:	f107 0220 	add.w	r2, r7, #32
 8002472:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002476:	4910      	ldr	r1, [pc, #64]	; (80024b8 <ProcessProgLine+0x3dc>)
 8002478:	4618      	mov	r0, r3
 800247a:	f008 ffaf 	bl	800b3dc <siscanf>
			if(op==SET && *result)
 800247e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002482:	2b53      	cmp	r3, #83	; 0x53
 8002484:	d12e      	bne.n	80024e4 <ProcessProgLine+0x408>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d02a      	beq.n	80024e4 <ProcessProgLine+0x408>
			{
				if(letter=='X')
 800248e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002492:	2b58      	cmp	r3, #88	; 0x58
 8002494:	d107      	bne.n	80024a6 <ProcessProgLine+0x3ca>
				{
					Xses[index].Value=true;
 8002496:	6a3b      	ldr	r3, [r7, #32]
 8002498:	4a09      	ldr	r2, [pc, #36]	; (80024c0 <ProcessProgLine+0x3e4>)
 800249a:	011b      	lsls	r3, r3, #4
 800249c:	4413      	add	r3, r2
 800249e:	330c      	adds	r3, #12
 80024a0:	2201      	movs	r2, #1
 80024a2:	701a      	strb	r2, [r3, #0]
 80024a4:	e01a      	b.n	80024dc <ProcessProgLine+0x400>
				}
				else if(letter=='Y')
 80024a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80024aa:	2b59      	cmp	r3, #89	; 0x59
 80024ac:	d10e      	bne.n	80024cc <ProcessProgLine+0x3f0>
				{
					Coils[index]=true;
 80024ae:	6a3b      	ldr	r3, [r7, #32]
 80024b0:	4a05      	ldr	r2, [pc, #20]	; (80024c8 <ProcessProgLine+0x3ec>)
 80024b2:	2101      	movs	r1, #1
 80024b4:	54d1      	strb	r1, [r2, r3]
 80024b6:	e011      	b.n	80024dc <ProcessProgLine+0x400>
 80024b8:	0800c3a4 	.word	0x0800c3a4
 80024bc:	200008d4 	.word	0x200008d4
 80024c0:	200010e4 	.word	0x200010e4
 80024c4:	200011dc 	.word	0x200011dc
 80024c8:	200010e0 	.word	0x200010e0
				}
				else if(letter=='M')
 80024cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80024d0:	2b4d      	cmp	r3, #77	; 0x4d
 80024d2:	d103      	bne.n	80024dc <ProcessProgLine+0x400>
				{
					Mvars[index]=true;
 80024d4:	6a3b      	ldr	r3, [r7, #32]
 80024d6:	4aaf      	ldr	r2, [pc, #700]	; (8002794 <ProcessProgLine+0x6b8>)
 80024d8:	2101      	movs	r1, #1
 80024da:	54d1      	strb	r1, [r2, r3]
				}
				*result = true;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	701a      	strb	r2, [r3, #0]
 80024e2:	e141      	b.n	8002768 <ProcessProgLine+0x68c>
			}
			else if(op==RES && *result)
 80024e4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80024e8:	2b52      	cmp	r3, #82	; 0x52
 80024ea:	d124      	bne.n	8002536 <ProcessProgLine+0x45a>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d020      	beq.n	8002536 <ProcessProgLine+0x45a>
			{
				if(letter=='X')
 80024f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80024f8:	2b58      	cmp	r3, #88	; 0x58
 80024fa:	d107      	bne.n	800250c <ProcessProgLine+0x430>
				{
					Xses[index].Value=false;
 80024fc:	6a3b      	ldr	r3, [r7, #32]
 80024fe:	4aa6      	ldr	r2, [pc, #664]	; (8002798 <ProcessProgLine+0x6bc>)
 8002500:	011b      	lsls	r3, r3, #4
 8002502:	4413      	add	r3, r2
 8002504:	330c      	adds	r3, #12
 8002506:	2200      	movs	r2, #0
 8002508:	701a      	strb	r2, [r3, #0]
 800250a:	e010      	b.n	800252e <ProcessProgLine+0x452>
				}
				else if(letter=='Y')
 800250c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002510:	2b59      	cmp	r3, #89	; 0x59
 8002512:	d104      	bne.n	800251e <ProcessProgLine+0x442>
				{
					Coils[index]=false;
 8002514:	6a3b      	ldr	r3, [r7, #32]
 8002516:	4aa1      	ldr	r2, [pc, #644]	; (800279c <ProcessProgLine+0x6c0>)
 8002518:	2100      	movs	r1, #0
 800251a:	54d1      	strb	r1, [r2, r3]
 800251c:	e007      	b.n	800252e <ProcessProgLine+0x452>
				}
				else if(letter=='M')
 800251e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002522:	2b4d      	cmp	r3, #77	; 0x4d
 8002524:	d103      	bne.n	800252e <ProcessProgLine+0x452>
				{
					Mvars[index]=false;
 8002526:	6a3b      	ldr	r3, [r7, #32]
 8002528:	4a9a      	ldr	r2, [pc, #616]	; (8002794 <ProcessProgLine+0x6b8>)
 800252a:	2100      	movs	r1, #0
 800252c:	54d1      	strb	r1, [r2, r3]
				}
				*result=false;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	701a      	strb	r2, [r3, #0]
 8002534:	e118      	b.n	8002768 <ProcessProgLine+0x68c>
			}
			else if(op==MOV)
 8002536:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800253a:	2b42      	cmp	r3, #66	; 0x42
 800253c:	d122      	bne.n	8002584 <ProcessProgLine+0x4a8>
			{
				if(letter=='X')
 800253e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002542:	2b58      	cmp	r3, #88	; 0x58
 8002544:	d109      	bne.n	800255a <ProcessProgLine+0x47e>
				{
					Xses[index].Value=*result;
 8002546:	6a3b      	ldr	r3, [r7, #32]
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	7811      	ldrb	r1, [r2, #0]
 800254c:	4a92      	ldr	r2, [pc, #584]	; (8002798 <ProcessProgLine+0x6bc>)
 800254e:	011b      	lsls	r3, r3, #4
 8002550:	4413      	add	r3, r2
 8002552:	330c      	adds	r3, #12
 8002554:	460a      	mov	r2, r1
 8002556:	701a      	strb	r2, [r3, #0]
 8002558:	e10c      	b.n	8002774 <ProcessProgLine+0x698>
				}
				else if(letter=='Y')
 800255a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800255e:	2b59      	cmp	r3, #89	; 0x59
 8002560:	d105      	bne.n	800256e <ProcessProgLine+0x492>
				{
					Coils[index]=*result;
 8002562:	6a3b      	ldr	r3, [r7, #32]
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	7811      	ldrb	r1, [r2, #0]
 8002568:	4a8c      	ldr	r2, [pc, #560]	; (800279c <ProcessProgLine+0x6c0>)
 800256a:	54d1      	strb	r1, [r2, r3]
 800256c:	e102      	b.n	8002774 <ProcessProgLine+0x698>
				}
				else if(letter=='M')
 800256e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002572:	2b4d      	cmp	r3, #77	; 0x4d
 8002574:	f040 80fe 	bne.w	8002774 <ProcessProgLine+0x698>
				{
					Mvars[index]=*result;
 8002578:	6a3b      	ldr	r3, [r7, #32]
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	7811      	ldrb	r1, [r2, #0]
 800257e:	4a85      	ldr	r2, [pc, #532]	; (8002794 <ProcessProgLine+0x6b8>)
 8002580:	54d1      	strb	r1, [r2, r3]
 8002582:	e0f7      	b.n	8002774 <ProcessProgLine+0x698>
				}
			}
			else if((op == CNTP || op == CNTN || op == CNTE) && *result)
 8002584:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002588:	2b2b      	cmp	r3, #43	; 0x2b
 800258a:	d008      	beq.n	800259e <ProcessProgLine+0x4c2>
 800258c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002590:	2b2d      	cmp	r3, #45	; 0x2d
 8002592:	d004      	beq.n	800259e <ProcessProgLine+0x4c2>
 8002594:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002598:	2b3d      	cmp	r3, #61	; 0x3d
 800259a:	f040 80eb 	bne.w	8002774 <ProcessProgLine+0x698>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f000 80e6 	beq.w	8002774 <ProcessProgLine+0x698>
			{
				int val;
				/*if(op == CNTE)
				{*/
					MyIDX=MyIDX+3;
 80025a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025aa:	3303      	adds	r3, #3
 80025ac:	63fb      	str	r3, [r7, #60]	; 0x3c
					memcpy(data,MyIDX,8);
 80025ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025b4:	6810      	ldr	r0, [r2, #0]
 80025b6:	6851      	ldr	r1, [r2, #4]
 80025b8:	c303      	stmia	r3!, {r0, r1}
					data[8]=0;
 80025ba:	2300      	movs	r3, #0
 80025bc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
					for(letter=0; letter<8; letter++)
 80025c0:	2300      	movs	r3, #0
 80025c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80025c6:	e024      	b.n	8002612 <ProcessProgLine+0x536>
					{
						if(data[letter]==DELIM)
 80025c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80025cc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80025d0:	4413      	add	r3, r2
 80025d2:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80025d6:	2b7c      	cmp	r3, #124	; 0x7c
 80025d8:	d116      	bne.n	8002608 <ProcessProgLine+0x52c>
						{
							data[letter]=0;
 80025da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80025de:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80025e2:	4413      	add	r3, r2
 80025e4:	2200      	movs	r2, #0
 80025e6:	f803 2c1c 	strb.w	r2, [r3, #-28]
							MyIDX=MyIDX+letter+1;
 80025ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80025ee:	3301      	adds	r3, #1
 80025f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025f2:	4413      	add	r3, r2
 80025f4:	63fb      	str	r3, [r7, #60]	; 0x3c
							sscanf((char*)data,"%d",&val);	//For CNTP and CNTN val is Delay Value Between Counts,
 80025f6:	f107 0214 	add.w	r2, r7, #20
 80025fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025fe:	4968      	ldr	r1, [pc, #416]	; (80027a0 <ProcessProgLine+0x6c4>)
 8002600:	4618      	mov	r0, r3
 8002602:	f008 feeb 	bl	800b3dc <siscanf>
															//For CNTE val is Reset Value
							break;
 8002606:	e008      	b.n	800261a <ProcessProgLine+0x53e>
					for(letter=0; letter<8; letter++)
 8002608:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800260c:	3301      	adds	r3, #1
 800260e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002612:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002616:	2b07      	cmp	r3, #7
 8002618:	d9d6      	bls.n	80025c8 <ProcessProgLine+0x4ec>
						}
					}
				/*}*/

				switch(index)
 800261a:	6a3b      	ldr	r3, [r7, #32]
 800261c:	2b0e      	cmp	r3, #14
 800261e:	d84e      	bhi.n	80026be <ProcessProgLine+0x5e2>
 8002620:	a201      	add	r2, pc, #4	; (adr r2, 8002628 <ProcessProgLine+0x54c>)
 8002622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002626:	bf00      	nop
 8002628:	08002665 	.word	0x08002665
 800262c:	0800266b 	.word	0x0800266b
 8002630:	08002671 	.word	0x08002671
 8002634:	08002677 	.word	0x08002677
 8002638:	0800267d 	.word	0x0800267d
 800263c:	08002683 	.word	0x08002683
 8002640:	08002689 	.word	0x08002689
 8002644:	0800268f 	.word	0x0800268f
 8002648:	08002695 	.word	0x08002695
 800264c:	0800269b 	.word	0x0800269b
 8002650:	080026a1 	.word	0x080026a1
 8002654:	080026a7 	.word	0x080026a7
 8002658:	080026ad 	.word	0x080026ad
 800265c:	080026b3 	.word	0x080026b3
 8002660:	080026b9 	.word	0x080026b9
				{
					case 0:
					{
						cntVal = &CntChnlsVal.CNT0.CNT0_Val;
 8002664:	4b4f      	ldr	r3, [pc, #316]	; (80027a4 <ProcessProgLine+0x6c8>)
 8002666:	633b      	str	r3, [r7, #48]	; 0x30
						break;
 8002668:	e02a      	b.n	80026c0 <ProcessProgLine+0x5e4>
					}
					case 1:
					{
						cntVal = &CntChnlsVal.CNT1.CNT1_Val;
 800266a:	4b4f      	ldr	r3, [pc, #316]	; (80027a8 <ProcessProgLine+0x6cc>)
 800266c:	633b      	str	r3, [r7, #48]	; 0x30
						break;
 800266e:	e027      	b.n	80026c0 <ProcessProgLine+0x5e4>
					}
					case 2:
					{
						cntVal = &CntChnlsVal.CNT2.CNT2_Val;
 8002670:	4b4e      	ldr	r3, [pc, #312]	; (80027ac <ProcessProgLine+0x6d0>)
 8002672:	633b      	str	r3, [r7, #48]	; 0x30
						break;
 8002674:	e024      	b.n	80026c0 <ProcessProgLine+0x5e4>
					}
					case 3:
					{
						cntVal = &CntChnlsVal.CNT3.CNT3_Val;
 8002676:	4b4e      	ldr	r3, [pc, #312]	; (80027b0 <ProcessProgLine+0x6d4>)
 8002678:	633b      	str	r3, [r7, #48]	; 0x30
						break;
 800267a:	e021      	b.n	80026c0 <ProcessProgLine+0x5e4>
					}
					case 4:
					{
						cntVal = &CntChnlsVal.CNT4.CNT4_Val;
 800267c:	4b4d      	ldr	r3, [pc, #308]	; (80027b4 <ProcessProgLine+0x6d8>)
 800267e:	633b      	str	r3, [r7, #48]	; 0x30
						break;
 8002680:	e01e      	b.n	80026c0 <ProcessProgLine+0x5e4>
					}
					case 5:
					{
						cntVal = &CntChnlsVal.CNT5.CNT5_Val;
 8002682:	4b4d      	ldr	r3, [pc, #308]	; (80027b8 <ProcessProgLine+0x6dc>)
 8002684:	633b      	str	r3, [r7, #48]	; 0x30
						break;
 8002686:	e01b      	b.n	80026c0 <ProcessProgLine+0x5e4>
					}
					case 6:
					{
						cntVal = &CntChnlsVal.CNT6.CNT6_Val;
 8002688:	4b4c      	ldr	r3, [pc, #304]	; (80027bc <ProcessProgLine+0x6e0>)
 800268a:	633b      	str	r3, [r7, #48]	; 0x30
						break;
 800268c:	e018      	b.n	80026c0 <ProcessProgLine+0x5e4>
					}
					case 7:
					{
						cntVal = &CntChnlsVal.CNT7.CNT7_Val;
 800268e:	4b4c      	ldr	r3, [pc, #304]	; (80027c0 <ProcessProgLine+0x6e4>)
 8002690:	633b      	str	r3, [r7, #48]	; 0x30
						break;
 8002692:	e015      	b.n	80026c0 <ProcessProgLine+0x5e4>
					}
					case 8:
					{
						cntVal = &CntChnlsVal.CNT8.CNT8_Val;
 8002694:	4b4b      	ldr	r3, [pc, #300]	; (80027c4 <ProcessProgLine+0x6e8>)
 8002696:	633b      	str	r3, [r7, #48]	; 0x30
						break;
 8002698:	e012      	b.n	80026c0 <ProcessProgLine+0x5e4>
					}
					case 9:
					{
						cntVal = &CntChnlsVal.CNT9.CNT9_Val;
 800269a:	4b4b      	ldr	r3, [pc, #300]	; (80027c8 <ProcessProgLine+0x6ec>)
 800269c:	633b      	str	r3, [r7, #48]	; 0x30
						break;
 800269e:	e00f      	b.n	80026c0 <ProcessProgLine+0x5e4>
					}
					case 10:
					{
						cntVal = &CntChnlsVal.CNT10.CNT10_Val;
 80026a0:	4b4a      	ldr	r3, [pc, #296]	; (80027cc <ProcessProgLine+0x6f0>)
 80026a2:	633b      	str	r3, [r7, #48]	; 0x30
						break;
 80026a4:	e00c      	b.n	80026c0 <ProcessProgLine+0x5e4>
					}
					case 11:
					{
						cntVal = &CntChnlsVal.CNT11.CNT11_Val;
 80026a6:	4b4a      	ldr	r3, [pc, #296]	; (80027d0 <ProcessProgLine+0x6f4>)
 80026a8:	633b      	str	r3, [r7, #48]	; 0x30
						break;
 80026aa:	e009      	b.n	80026c0 <ProcessProgLine+0x5e4>
					}
					case 12:
					{
						cntVal = &CntChnlsVal.CNT12.CNT12_Val;
 80026ac:	4b49      	ldr	r3, [pc, #292]	; (80027d4 <ProcessProgLine+0x6f8>)
 80026ae:	633b      	str	r3, [r7, #48]	; 0x30
						break;
 80026b0:	e006      	b.n	80026c0 <ProcessProgLine+0x5e4>
					}
					case 13:
					{
						cntVal = &CntChnlsVal.CNT13.CNT13_Val;
 80026b2:	4b49      	ldr	r3, [pc, #292]	; (80027d8 <ProcessProgLine+0x6fc>)
 80026b4:	633b      	str	r3, [r7, #48]	; 0x30
						break;
 80026b6:	e003      	b.n	80026c0 <ProcessProgLine+0x5e4>
					}
					case 14:
					{
						cntVal = &CntChnlsVal.CNT14.CNT14_Val;
 80026b8:	4b48      	ldr	r3, [pc, #288]	; (80027dc <ProcessProgLine+0x700>)
 80026ba:	633b      	str	r3, [r7, #48]	; 0x30
						break;
 80026bc:	e000      	b.n	80026c0 <ProcessProgLine+0x5e4>
					}
					default:
					{
						break;
 80026be:	bf00      	nop
					}
				}
				if(op == CNTP)
 80026c0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80026c4:	2b2b      	cmp	r3, #43	; 0x2b
 80026c6:	d119      	bne.n	80026fc <ProcessProgLine+0x620>
				{
					if((HAL_GetTick()-Counter.CounterStartTick)>=val)
 80026c8:	f001 ff80 	bl	80045cc <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	4b44      	ldr	r3, [pc, #272]	; (80027e0 <ProcessProgLine+0x704>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	697a      	ldr	r2, [r7, #20]
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d34c      	bcc.n	8002774 <ProcessProgLine+0x698>
					{
						*cntVal = *cntVal + 1;
 80026da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7fe f960 	bl	80009a8 <__addsf3>
 80026e8:	4603      	mov	r3, r0
 80026ea:	461a      	mov	r2, r3
 80026ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ee:	601a      	str	r2, [r3, #0]
						Counter.CounterStartTick = HAL_GetTick();
 80026f0:	f001 ff6c 	bl	80045cc <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	4b3a      	ldr	r3, [pc, #232]	; (80027e0 <ProcessProgLine+0x704>)
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	e03b      	b.n	8002774 <ProcessProgLine+0x698>
					}

				}
				else if(op == CNTN)
 80026fc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002700:	2b2d      	cmp	r3, #45	; 0x2d
 8002702:	d126      	bne.n	8002752 <ProcessProgLine+0x676>
				{
					if(*cntVal > -1)
 8002704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4936      	ldr	r1, [pc, #216]	; (80027e4 <ProcessProgLine+0x708>)
 800270a:	4618      	mov	r0, r3
 800270c:	f7fe fc10 	bl	8000f30 <__aeabi_fcmpgt>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d019      	beq.n	800274a <ProcessProgLine+0x66e>
					{
						if((HAL_GetTick()-Counter.CounterStartTick)>=val)
 8002716:	f001 ff59 	bl	80045cc <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	4b30      	ldr	r3, [pc, #192]	; (80027e0 <ProcessProgLine+0x704>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	697a      	ldr	r2, [r7, #20]
 8002724:	4293      	cmp	r3, r2
 8002726:	d325      	bcc.n	8002774 <ProcessProgLine+0x698>
						{
							*cntVal = *cntVal - 1;
 8002728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002730:	4618      	mov	r0, r3
 8002732:	f7fe f937 	bl	80009a4 <__aeabi_fsub>
 8002736:	4603      	mov	r3, r0
 8002738:	461a      	mov	r2, r3
 800273a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800273c:	601a      	str	r2, [r3, #0]
							Counter.CounterStartTick = HAL_GetTick();
 800273e:	f001 ff45 	bl	80045cc <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	4b26      	ldr	r3, [pc, #152]	; (80027e0 <ProcessProgLine+0x704>)
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	e014      	b.n	8002774 <ProcessProgLine+0x698>
						}
					}
					else
					{
						*cntVal = -1;
 800274a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800274c:	4a25      	ldr	r2, [pc, #148]	; (80027e4 <ProcessProgLine+0x708>)
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	e010      	b.n	8002774 <ProcessProgLine+0x698>
					}

				}
				else if(op == CNTE)
 8002752:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002756:	2b3d      	cmp	r3, #61	; 0x3d
 8002758:	d10c      	bne.n	8002774 <ProcessProgLine+0x698>
				{
					*cntVal = val;
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	4618      	mov	r0, r3
 800275e:	f7fe f9d7 	bl	8000b10 <__aeabi_i2f>
 8002762:	4602      	mov	r2, r0
 8002764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002766:	601a      	str	r2, [r3, #0]
			if(op==SET && *result)
 8002768:	e004      	b.n	8002774 <ProcessProgLine+0x698>
			}
			/*return *result;*/
		}
		else
		{
			MyIDX=MyIDX+1;
 800276a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800276c:	3301      	adds	r3, #1
 800276e:	63fb      	str	r3, [r7, #60]	; 0x3c
			Mylen=0;
 8002770:	2300      	movs	r3, #0
 8002772:	63bb      	str	r3, [r7, #56]	; 0x38
	while((MyIDX+Mylen)<(Progstring+len))
 8002774:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002778:	441a      	add	r2, r3
 800277a:	68f9      	ldr	r1, [r7, #12]
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	440b      	add	r3, r1
 8002780:	429a      	cmp	r2, r3
 8002782:	f4ff ad17 	bcc.w	80021b4 <ProcessProgLine+0xd8>
		}
	}
	return *result;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	781b      	ldrb	r3, [r3, #0]
}
 800278a:	4618      	mov	r0, r3
 800278c:	3740      	adds	r7, #64	; 0x40
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	200011dc 	.word	0x200011dc
 8002798:	200010e4 	.word	0x200010e4
 800279c:	200010e0 	.word	0x200010e0
 80027a0:	0800c3a4 	.word	0x0800c3a4
 80027a4:	2000099c 	.word	0x2000099c
 80027a8:	20000a1c 	.word	0x20000a1c
 80027ac:	20000a9c 	.word	0x20000a9c
 80027b0:	20000b1c 	.word	0x20000b1c
 80027b4:	20000b9c 	.word	0x20000b9c
 80027b8:	20000c1c 	.word	0x20000c1c
 80027bc:	20000c9c 	.word	0x20000c9c
 80027c0:	20000d1c 	.word	0x20000d1c
 80027c4:	20000d9c 	.word	0x20000d9c
 80027c8:	20000e1c 	.word	0x20000e1c
 80027cc:	20000e9c 	.word	0x20000e9c
 80027d0:	20000f1c 	.word	0x20000f1c
 80027d4:	20000f9c 	.word	0x20000f9c
 80027d8:	2000101c 	.word	0x2000101c
 80027dc:	2000109c 	.word	0x2000109c
 80027e0:	200011d4 	.word	0x200011d4
 80027e4:	bf800000 	.word	0xbf800000

080027e8 <ProgInit>:
//---------------------------------------------------------------------------
void ProgInit()
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b08c      	sub	sp, #48	; 0x30
 80027ec:	af00      	add	r7, sp, #0
	if(!FlashIsProgrammed) return;
 80027ee:	4ba7      	ldr	r3, [pc, #668]	; (8002a8c <ProgInit+0x2a4>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	f083 0301 	eor.w	r3, r3, #1
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f040 8173 	bne.w	8002ae4 <ProgInit+0x2fc>
	if(ProgrammingMode) return;
 80027fe:	4ba4      	ldr	r3, [pc, #656]	; (8002a90 <ProgInit+0x2a8>)
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	2b00      	cmp	r3, #0
 8002804:	f040 8170 	bne.w	8002ae8 <ProgInit+0x300>
	ParsersInit();
 8002808:	f7ff f83e 	bl	8001888 <ParsersInit>
	//W25qxx_ReadPage(pageData,1,0,256);
	Flash_ReadPage(pageData,1,256);
 800280c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002810:	2101      	movs	r1, #1
 8002812:	48a0      	ldr	r0, [pc, #640]	; (8002a94 <ProgInit+0x2ac>)
 8002814:	f7fe fccc 	bl	80011b0 <Flash_ReadPage>
	uint8_t *data = pageData + 3; //MESUT, Led icin kod yazildi L5\n gibi
 8002818:	4b9f      	ldr	r3, [pc, #636]	; (8002a98 <ProgInit+0x2b0>)
 800281a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t *datac;
	uint8_t datacount[8];
	int dataval = 0;
 800281c:	2300      	movs	r3, #0
 800281e:	617b      	str	r3, [r7, #20]
	uint16_t count, mask;
	int index;
	uint8_t temp[8];
	uint8_t k;
	memcpy(&mask, data, 2);
 8002820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002822:	881b      	ldrh	r3, [r3, #0]
 8002824:	b29b      	uxth	r3, r3
 8002826:	823b      	strh	r3, [r7, #16]
	if(mask>255)
 8002828:	8a3b      	ldrh	r3, [r7, #16]
 800282a:	2bff      	cmp	r3, #255	; 0xff
 800282c:	d903      	bls.n	8002836 <ProgInit+0x4e>
	{
		FlashIsProgrammed=false;
 800282e:	4b97      	ldr	r3, [pc, #604]	; (8002a8c <ProgInit+0x2a4>)
 8002830:	2200      	movs	r2, #0
 8002832:	701a      	strb	r2, [r3, #0]
		return;
 8002834:	e159      	b.n	8002aea <ProgInit+0x302>
	}

	SetUp_PullUp_Mask(mask);
 8002836:	8a3b      	ldrh	r3, [r7, #16]
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff f845 	bl	80018c8 <SetUp_PullUp_Mask>
	data=data+2; //MESUT pageData[4] pageData[5] dataları kac tane input oldugunu veriyor
 800283e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002840:	3302      	adds	r3, #2
 8002842:	62fb      	str	r3, [r7, #44]	; 0x2c
	memcpy(&count, data, 2); //data input sayisi 5 ve Count a aktariliyor.
 8002844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002846:	881b      	ldrh	r3, [r3, #0]
 8002848:	b29b      	uxth	r3, r3
 800284a:	827b      	strh	r3, [r7, #18]

	if(count>MAXIOVAR)
 800284c:	8a7b      	ldrh	r3, [r7, #18]
 800284e:	2b0f      	cmp	r3, #15
 8002850:	d903      	bls.n	800285a <ProgInit+0x72>
	{
		FlashIsProgrammed=false;
 8002852:	4b8e      	ldr	r3, [pc, #568]	; (8002a8c <ProgInit+0x2a4>)
 8002854:	2200      	movs	r2, #0
 8002856:	701a      	strb	r2, [r3, #0]
		return;
 8002858:	e147      	b.n	8002aea <ProgInit+0x302>
	}

	data=data+2; //MESUT pageData[6]
 800285a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800285c:	3302      	adds	r3, #2
 800285e:	62fb      	str	r3, [r7, #44]	; 0x2c

	for(int i=0; i<count; i++)
 8002860:	2300      	movs	r3, #0
 8002862:	623b      	str	r3, [r7, #32]
 8002864:	e01a      	b.n	800289c <ProgInit+0xb4>
	{
		memcpy(&mask, data, 2);
 8002866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002868:	881b      	ldrh	r3, [r3, #0]
 800286a:	b29b      	uxth	r3, r3
 800286c:	823b      	strh	r3, [r7, #16]
		if(mask>20)
 800286e:	8a3b      	ldrh	r3, [r7, #16]
 8002870:	2b14      	cmp	r3, #20
 8002872:	d903      	bls.n	800287c <ProgInit+0x94>
		{
			FlashIsProgrammed=false;
 8002874:	4b85      	ldr	r3, [pc, #532]	; (8002a8c <ProgInit+0x2a4>)
 8002876:	2200      	movs	r2, #0
 8002878:	701a      	strb	r2, [r3, #0]
			return;
 800287a:	e136      	b.n	8002aea <ProgInit+0x302>
		}
		data=data+2;
 800287c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287e:	3302      	adds	r3, #2
 8002880:	62fb      	str	r3, [r7, #44]	; 0x2c
		ParseXString(data,mask);
 8002882:	8a3b      	ldrh	r3, [r7, #16]
 8002884:	4619      	mov	r1, r3
 8002886:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002888:	f7ff f8a2 	bl	80019d0 <ParseXString>
		data=data+mask;
 800288c:	8a3b      	ldrh	r3, [r7, #16]
 800288e:	461a      	mov	r2, r3
 8002890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002892:	4413      	add	r3, r2
 8002894:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i=0; i<count; i++)
 8002896:	6a3b      	ldr	r3, [r7, #32]
 8002898:	3301      	adds	r3, #1
 800289a:	623b      	str	r3, [r7, #32]
 800289c:	8a7b      	ldrh	r3, [r7, #18]
 800289e:	461a      	mov	r2, r3
 80028a0:	6a3b      	ldr	r3, [r7, #32]
 80028a2:	4293      	cmp	r3, r2
 80028a4:	dbdf      	blt.n	8002866 <ProgInit+0x7e>
	}
	datac = data;
 80028a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a8:	62bb      	str	r3, [r7, #40]	; 0x28
	while(datac[0] != '(')
 80028aa:	e0ff      	b.n	8002aac <ProgInit+0x2c4>
	{
		if(datac[0] == 'C')
 80028ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b43      	cmp	r3, #67	; 0x43
 80028b2:	f040 80e9 	bne.w	8002a88 <ProgInit+0x2a0>
		{
			datac = datac+1;
 80028b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b8:	3301      	adds	r3, #1
 80028ba:	62bb      	str	r3, [r7, #40]	; 0x28
			memcpy(datacount,datac,2);
 80028bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028be:	881b      	ldrh	r3, [r3, #0]
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	833b      	strh	r3, [r7, #24]
			sscanf((char*)datacount,"%d",&index);
 80028c4:	f107 020c 	add.w	r2, r7, #12
 80028c8:	f107 0318 	add.w	r3, r7, #24
 80028cc:	4973      	ldr	r1, [pc, #460]	; (8002a9c <ProgInit+0x2b4>)
 80028ce:	4618      	mov	r0, r3
 80028d0:	f008 fd84 	bl	800b3dc <siscanf>
			datac = datac+3;
 80028d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d6:	3303      	adds	r3, #3
 80028d8:	62bb      	str	r3, [r7, #40]	; 0x28
			memcpy(temp,datac,7);
 80028da:	1d3b      	adds	r3, r7, #4
 80028dc:	2207      	movs	r2, #7
 80028de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028e0:	4618      	mov	r0, r3
 80028e2:	f008 fd67 	bl	800b3b4 <memcpy>
			for(k=0;k<8;k++)
 80028e6:	2300      	movs	r3, #0
 80028e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80028ec:	e01c      	b.n	8002928 <ProgInit+0x140>
			{
				if(temp[k] == DELIM)
 80028ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028f2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80028f6:	4413      	add	r3, r2
 80028f8:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80028fc:	2b7c      	cmp	r3, #124	; 0x7c
 80028fe:	d10e      	bne.n	800291e <ProgInit+0x136>
				{
					temp[k] = 0;
 8002900:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002904:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002908:	4413      	add	r3, r2
 800290a:	2200      	movs	r2, #0
 800290c:	f803 2c2c 	strb.w	r2, [r3, #-44]
					sscanf((char*)temp,"%d",&dataval);
 8002910:	f107 0214 	add.w	r2, r7, #20
 8002914:	1d3b      	adds	r3, r7, #4
 8002916:	4961      	ldr	r1, [pc, #388]	; (8002a9c <ProgInit+0x2b4>)
 8002918:	4618      	mov	r0, r3
 800291a:	f008 fd5f 	bl	800b3dc <siscanf>
			for(k=0;k<8;k++)
 800291e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002922:	3301      	adds	r3, #1
 8002924:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002928:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800292c:	2b07      	cmp	r3, #7
 800292e:	d9de      	bls.n	80028ee <ProgInit+0x106>
				}
			}
			switch(index)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2b0e      	cmp	r3, #14
 8002934:	f200 80b6 	bhi.w	8002aa4 <ProgInit+0x2bc>
 8002938:	a201      	add	r2, pc, #4	; (adr r2, 8002940 <ProgInit+0x158>)
 800293a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800293e:	bf00      	nop
 8002940:	0800297d 	.word	0x0800297d
 8002944:	0800298d 	.word	0x0800298d
 8002948:	0800299f 	.word	0x0800299f
 800294c:	080029b1 	.word	0x080029b1
 8002950:	080029c3 	.word	0x080029c3
 8002954:	080029d5 	.word	0x080029d5
 8002958:	080029e7 	.word	0x080029e7
 800295c:	080029f9 	.word	0x080029f9
 8002960:	08002a0b 	.word	0x08002a0b
 8002964:	08002a1d 	.word	0x08002a1d
 8002968:	08002a2f 	.word	0x08002a2f
 800296c:	08002a41 	.word	0x08002a41
 8002970:	08002a53 	.word	0x08002a53
 8002974:	08002a65 	.word	0x08002a65
 8002978:	08002a77 	.word	0x08002a77
			{
				case 0:
				{
					CntChnlsVal.CNT0.CNT0_Val = dataval;
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	4618      	mov	r0, r3
 8002980:	f7fe f8c6 	bl	8000b10 <__aeabi_i2f>
 8002984:	4602      	mov	r2, r0
 8002986:	4b46      	ldr	r3, [pc, #280]	; (8002aa0 <ProgInit+0x2b8>)
 8002988:	605a      	str	r2, [r3, #4]
					break;
 800298a:	e08c      	b.n	8002aa6 <ProgInit+0x2be>
				}
				case 1:
				{
					CntChnlsVal.CNT1.CNT1_Val = dataval;
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	4618      	mov	r0, r3
 8002990:	f7fe f8be 	bl	8000b10 <__aeabi_i2f>
 8002994:	4602      	mov	r2, r0
 8002996:	4b42      	ldr	r3, [pc, #264]	; (8002aa0 <ProgInit+0x2b8>)
 8002998:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
					break;
 800299c:	e083      	b.n	8002aa6 <ProgInit+0x2be>
				}
				case 2:
				{
					CntChnlsVal.CNT2.CNT2_Val = dataval;
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7fe f8b5 	bl	8000b10 <__aeabi_i2f>
 80029a6:	4602      	mov	r2, r0
 80029a8:	4b3d      	ldr	r3, [pc, #244]	; (8002aa0 <ProgInit+0x2b8>)
 80029aa:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
					break;
 80029ae:	e07a      	b.n	8002aa6 <ProgInit+0x2be>
				}
				case 3:
				{
					CntChnlsVal.CNT3.CNT3_Val = dataval;
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7fe f8ac 	bl	8000b10 <__aeabi_i2f>
 80029b8:	4602      	mov	r2, r0
 80029ba:	4b39      	ldr	r3, [pc, #228]	; (8002aa0 <ProgInit+0x2b8>)
 80029bc:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
					break;
 80029c0:	e071      	b.n	8002aa6 <ProgInit+0x2be>
				}
				case 4:
				{
					CntChnlsVal.CNT4.CNT4_Val = dataval;
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7fe f8a3 	bl	8000b10 <__aeabi_i2f>
 80029ca:	4602      	mov	r2, r0
 80029cc:	4b34      	ldr	r3, [pc, #208]	; (8002aa0 <ProgInit+0x2b8>)
 80029ce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
					break;
 80029d2:	e068      	b.n	8002aa6 <ProgInit+0x2be>
				}
				case 5:
				{
					CntChnlsVal.CNT5.CNT5_Val = dataval;
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7fe f89a 	bl	8000b10 <__aeabi_i2f>
 80029dc:	4602      	mov	r2, r0
 80029de:	4b30      	ldr	r3, [pc, #192]	; (8002aa0 <ProgInit+0x2b8>)
 80029e0:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
					break;
 80029e4:	e05f      	b.n	8002aa6 <ProgInit+0x2be>
				}
				case 6:
				{
					CntChnlsVal.CNT6.CNT6_Val = dataval;
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7fe f891 	bl	8000b10 <__aeabi_i2f>
 80029ee:	4602      	mov	r2, r0
 80029f0:	4b2b      	ldr	r3, [pc, #172]	; (8002aa0 <ProgInit+0x2b8>)
 80029f2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
					break;
 80029f6:	e056      	b.n	8002aa6 <ProgInit+0x2be>
				}
				case 7:
				{
					CntChnlsVal.CNT7.CNT7_Val = dataval;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7fe f888 	bl	8000b10 <__aeabi_i2f>
 8002a00:	4602      	mov	r2, r0
 8002a02:	4b27      	ldr	r3, [pc, #156]	; (8002aa0 <ProgInit+0x2b8>)
 8002a04:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
					break;
 8002a08:	e04d      	b.n	8002aa6 <ProgInit+0x2be>
				}
				case 8:
				{
					CntChnlsVal.CNT8.CNT8_Val = dataval;
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7fe f87f 	bl	8000b10 <__aeabi_i2f>
 8002a12:	4602      	mov	r2, r0
 8002a14:	4b22      	ldr	r3, [pc, #136]	; (8002aa0 <ProgInit+0x2b8>)
 8002a16:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
					break;
 8002a1a:	e044      	b.n	8002aa6 <ProgInit+0x2be>
				}
				case 9:
				{
					CntChnlsVal.CNT9.CNT9_Val = dataval;
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7fe f876 	bl	8000b10 <__aeabi_i2f>
 8002a24:	4602      	mov	r2, r0
 8002a26:	4b1e      	ldr	r3, [pc, #120]	; (8002aa0 <ProgInit+0x2b8>)
 8002a28:	f8c3 2484 	str.w	r2, [r3, #1156]	; 0x484
					break;
 8002a2c:	e03b      	b.n	8002aa6 <ProgInit+0x2be>
				}
				case 10:
				{
					CntChnlsVal.CNT10.CNT10_Val = dataval;
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7fe f86d 	bl	8000b10 <__aeabi_i2f>
 8002a36:	4602      	mov	r2, r0
 8002a38:	4b19      	ldr	r3, [pc, #100]	; (8002aa0 <ProgInit+0x2b8>)
 8002a3a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
					break;
 8002a3e:	e032      	b.n	8002aa6 <ProgInit+0x2be>
				}
				case 11:
				{
					CntChnlsVal.CNT11.CNT11_Val = dataval;
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7fe f864 	bl	8000b10 <__aeabi_i2f>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	4b15      	ldr	r3, [pc, #84]	; (8002aa0 <ProgInit+0x2b8>)
 8002a4c:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
					break;
 8002a50:	e029      	b.n	8002aa6 <ProgInit+0x2be>
				}
				case 12:
				{
					CntChnlsVal.CNT12.CNT12_Val = dataval;
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7fe f85b 	bl	8000b10 <__aeabi_i2f>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	4b10      	ldr	r3, [pc, #64]	; (8002aa0 <ProgInit+0x2b8>)
 8002a5e:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
					break;
 8002a62:	e020      	b.n	8002aa6 <ProgInit+0x2be>
				}
				case 13:
				{
					CntChnlsVal.CNT13.CNT13_Val = dataval;
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7fe f852 	bl	8000b10 <__aeabi_i2f>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	4b0c      	ldr	r3, [pc, #48]	; (8002aa0 <ProgInit+0x2b8>)
 8002a70:	f8c3 2684 	str.w	r2, [r3, #1668]	; 0x684
					break;
 8002a74:	e017      	b.n	8002aa6 <ProgInit+0x2be>
				}
				case 14:
				{
					CntChnlsVal.CNT14.CNT14_Val = dataval;
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7fe f849 	bl	8000b10 <__aeabi_i2f>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	4b07      	ldr	r3, [pc, #28]	; (8002aa0 <ProgInit+0x2b8>)
 8002a82:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
					break;
 8002a86:	e00e      	b.n	8002aa6 <ProgInit+0x2be>
					break;
				}
			}


		}
 8002a88:	bf00      	nop
 8002a8a:	e00c      	b.n	8002aa6 <ProgInit+0x2be>
 8002a8c:	200008b8 	.word	0x200008b8
 8002a90:	20000770 	.word	0x20000770
 8002a94:	200007b8 	.word	0x200007b8
 8002a98:	200007bb 	.word	0x200007bb
 8002a9c:	0800c3a4 	.word	0x0800c3a4
 8002aa0:	20000998 	.word	0x20000998
					break;
 8002aa4:	bf00      	nop
		datac = datac + 1;
 8002aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	62bb      	str	r3, [r7, #40]	; 0x28
	while(datac[0] != '(')
 8002aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	2b28      	cmp	r3, #40	; 0x28
 8002ab2:	f47f aefb 	bne.w	80028ac <ProgInit+0xc4>
	}
	datacountSS = datac - 2;
 8002ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab8:	3b02      	subs	r3, #2
 8002aba:	4a0d      	ldr	r2, [pc, #52]	; (8002af0 <ProgInit+0x308>)
 8002abc:	6013      	str	r3, [r2, #0]
	memcpy(&mask, datacountSS, 2);
 8002abe:	4b0c      	ldr	r3, [pc, #48]	; (8002af0 <ProgInit+0x308>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	881b      	ldrh	r3, [r3, #0]
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	823b      	strh	r3, [r7, #16]

	//memcpy(&mask, data, 2);

	ProgLen=mask;
 8002ac8:	8a3b      	ldrh	r3, [r7, #16]
 8002aca:	461a      	mov	r2, r3
 8002acc:	4b09      	ldr	r3, [pc, #36]	; (8002af4 <ProgInit+0x30c>)
 8002ace:	601a      	str	r2, [r3, #0]
	pageDataIndex = (uint16_t)(datac-pageData);
 8002ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad2:	4a09      	ldr	r2, [pc, #36]	; (8002af8 <ProgInit+0x310>)
 8002ad4:	1a9b      	subs	r3, r3, r2
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	4b08      	ldr	r3, [pc, #32]	; (8002afc <ProgInit+0x314>)
 8002ada:	801a      	strh	r2, [r3, #0]
	ProgInited=true;
 8002adc:	4b08      	ldr	r3, [pc, #32]	; (8002b00 <ProgInit+0x318>)
 8002ade:	2201      	movs	r2, #1
 8002ae0:	701a      	strb	r2, [r3, #0]
 8002ae2:	e002      	b.n	8002aea <ProgInit+0x302>
	if(!FlashIsProgrammed) return;
 8002ae4:	bf00      	nop
 8002ae6:	e000      	b.n	8002aea <ProgInit+0x302>
	if(ProgrammingMode) return;
 8002ae8:	bf00      	nop
}
 8002aea:	3730      	adds	r7, #48	; 0x30
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	200011d8 	.word	0x200011d8
 8002af4:	200008bc 	.word	0x200008bc
 8002af8:	200007b8 	.word	0x200007b8
 8002afc:	200008d0 	.word	0x200008d0
 8002b00:	20000771 	.word	0x20000771

08002b04 <ProcessProgramm>:
//---------------------------------------------------------------------------
void ProcessProgramm()
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b0c4      	sub	sp, #272	; 0x110
 8002b08:	af00      	add	r7, sp, #0
	uint8_t * ProgI = pageData+pageDataIndex;
 8002b0a:	4b4c      	ldr	r3, [pc, #304]	; (8002c3c <ProcessProgramm+0x138>)
 8002b0c:	881b      	ldrh	r3, [r3, #0]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	4b4b      	ldr	r3, [pc, #300]	; (8002c40 <ProcessProgramm+0x13c>)
 8002b12:	4413      	add	r3, r2
 8002b14:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint16_t outlen=0;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint16_t inlen=0;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint16_t index=0;
 8002b24:	2300      	movs	r3, #0
 8002b26:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
	uint8_t Page=0;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
	bool result=true;
 8002b30:	2301      	movs	r3, #1
 8002b32:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104

	//W25qxx_ReadPage(pageData,(uint32_t)(Page+1),0,256);
	Flash_ReadPage(pageData,(uint32_t)(Page+1),256);
 8002b36:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b40:	4619      	mov	r1, r3
 8002b42:	483f      	ldr	r0, [pc, #252]	; (8002c40 <ProcessProgramm+0x13c>)
 8002b44:	f7fe fb34 	bl	80011b0 <Flash_ReadPage>
	uint8_t ProgIDX[256];
	while(index<ProgLen)
 8002b48:	e058      	b.n	8002bfc <ProcessProgramm+0xf8>
	{
		if(ProgI>=(pageData+256)) //страница  закончилась
 8002b4a:	4a3e      	ldr	r2, [pc, #248]	; (8002c44 <ProcessProgramm+0x140>)
 8002b4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d313      	bcc.n	8002b7c <ProcessProgramm+0x78>
		{
			Page=Page+1;
 8002b54:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8002b58:	3301      	adds	r3, #1
 8002b5a:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
			ProgI=pageData;
 8002b5e:	4b38      	ldr	r3, [pc, #224]	; (8002c40 <ProcessProgramm+0x13c>)
 8002b60:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			//W25qxx_ReadPage(pageData,(uint32_t)(Page+1),0,256);
			Flash_ReadPage(pageData,(uint32_t)(Page+1),256);
 8002b64:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8002b68:	3301      	adds	r3, #1
 8002b6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b6e:	4619      	mov	r1, r3
 8002b70:	4833      	ldr	r0, [pc, #204]	; (8002c40 <ProcessProgramm+0x13c>)
 8002b72:	f7fe fb1d 	bl	80011b0 <Flash_ReadPage>
			inlen=0;
 8002b76:	2300      	movs	r3, #0
 8002b78:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		}
		if(ProgI[inlen]==ACT_DELIM)
 8002b7c:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
 8002b80:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002b84:	4413      	add	r3, r2
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	2b0d      	cmp	r3, #13
 8002b8a:	d11e      	bne.n	8002bca <ProcessProgramm+0xc6>
		{
			result=true;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
			ProgIDX[outlen]=0;
 8002b92:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8002b96:	1d3a      	adds	r2, r7, #4
 8002b98:	2100      	movs	r1, #0
 8002b9a:	54d1      	strb	r1, [r2, r3]
			ProcessProgLine(ProgIDX,outlen, &result);
 8002b9c:	f8b7 110a 	ldrh.w	r1, [r7, #266]	; 0x10a
 8002ba0:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8002ba4:	1d3b      	adds	r3, r7, #4
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7ff fa98 	bl	80020dc <ProcessProgLine>
			outlen=0;
 8002bac:	2300      	movs	r3, #0
 8002bae:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
			ProgI=ProgI+inlen+1;
 8002bb2:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002bbc:	4413      	add	r3, r2
 8002bbe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			//index=index+1;
			inlen=0;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
 8002bc8:	e013      	b.n	8002bf2 <ProcessProgramm+0xee>
		}
		else
		{
			ProgIDX[outlen]=ProgI[inlen];
 8002bca:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
 8002bce:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002bd2:	441a      	add	r2, r3
 8002bd4:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8002bd8:	7811      	ldrb	r1, [r2, #0]
 8002bda:	1d3a      	adds	r2, r7, #4
 8002bdc:	54d1      	strb	r1, [r2, r3]
			outlen=outlen+1;
 8002bde:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8002be2:	3301      	adds	r3, #1
 8002be4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
			inlen=inlen+1;
 8002be8:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
 8002bec:	3301      	adds	r3, #1
 8002bee:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		}
		index=index+1;
 8002bf2:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
	while(index<ProgLen)
 8002bfc:	f8b7 2106 	ldrh.w	r2, [r7, #262]	; 0x106
 8002c00:	4b11      	ldr	r3, [pc, #68]	; (8002c48 <ProcessProgramm+0x144>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d3a0      	bcc.n	8002b4a <ProcessProgramm+0x46>
	}
	if(outlen>0)
 8002c08:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00f      	beq.n	8002c30 <ProcessProgramm+0x12c>
	{
		result=true;
 8002c10:	2301      	movs	r3, #1
 8002c12:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
		ProgIDX[outlen]=0;
 8002c16:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8002c1a:	1d3a      	adds	r2, r7, #4
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	54d1      	strb	r1, [r2, r3]
		ProcessProgLine(ProgIDX,outlen, &result);
 8002c20:	f8b7 110a 	ldrh.w	r1, [r7, #266]	; 0x10a
 8002c24:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8002c28:	1d3b      	adds	r3, r7, #4
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7ff fa56 	bl	80020dc <ProcessProgLine>
	}
}
 8002c30:	bf00      	nop
 8002c32:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	200008d0 	.word	0x200008d0
 8002c40:	200007b8 	.word	0x200007b8
 8002c44:	200008b8 	.word	0x200008b8
 8002c48:	200008bc 	.word	0x200008bc

08002c4c <ProcessIO>:
//---------------------------------------------------------------------------
void ProcessIO()
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
	if(ProgrammingMode || !FlashIsProgrammed || !ProgInited)
 8002c50:	4b36      	ldr	r3, [pc, #216]	; (8002d2c <ProcessIO+0xe0>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d10d      	bne.n	8002c74 <ProcessIO+0x28>
 8002c58:	4b35      	ldr	r3, [pc, #212]	; (8002d30 <ProcessIO+0xe4>)
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	f083 0301 	eor.w	r3, r3, #1
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d106      	bne.n	8002c74 <ProcessIO+0x28>
 8002c66:	4b33      	ldr	r3, [pc, #204]	; (8002d34 <ProcessIO+0xe8>)
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	f083 0301 	eor.w	r3, r3, #1
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d050      	beq.n	8002d16 <ProcessIO+0xca>
	{
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,GPIO_PIN_RESET);
 8002c74:	2200      	movs	r2, #0
 8002c76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c7a:	482f      	ldr	r0, [pc, #188]	; (8002d38 <ProcessIO+0xec>)
 8002c7c:	f003 f950 	bl	8005f20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,GPIO_PIN_RESET);
 8002c80:	2200      	movs	r2, #0
 8002c82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c86:	482c      	ldr	r0, [pc, #176]	; (8002d38 <ProcessIO+0xec>)
 8002c88:	f003 f94a 	bl	8005f20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(NP1_GPIO_Port,NP1_Pin,GPIO_PIN_SET);
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	2180      	movs	r1, #128	; 0x80
 8002c90:	482a      	ldr	r0, [pc, #168]	; (8002d3c <ProcessIO+0xf0>)
 8002c92:	f003 f945 	bl	8005f20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(NP2_GPIO_Port,NP2_Pin,GPIO_PIN_SET);
 8002c96:	2201      	movs	r2, #1
 8002c98:	2140      	movs	r1, #64	; 0x40
 8002c9a:	4828      	ldr	r0, [pc, #160]	; (8002d3c <ProcessIO+0xf0>)
 8002c9c:	f003 f940 	bl	8005f20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(NP3_GPIO_Port,NP3_Pin,GPIO_PIN_SET);
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	2120      	movs	r1, #32
 8002ca4:	4825      	ldr	r0, [pc, #148]	; (8002d3c <ProcessIO+0xf0>)
 8002ca6:	f003 f93b 	bl	8005f20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(NP4_GPIO_Port,NP4_Pin,GPIO_PIN_SET);
 8002caa:	2201      	movs	r2, #1
 8002cac:	2110      	movs	r1, #16
 8002cae:	4823      	ldr	r0, [pc, #140]	; (8002d3c <ProcessIO+0xf0>)
 8002cb0:	f003 f936 	bl	8005f20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(NP5_GPIO_Port,NP5_Pin,GPIO_PIN_SET);
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	2108      	movs	r1, #8
 8002cb8:	4820      	ldr	r0, [pc, #128]	; (8002d3c <ProcessIO+0xf0>)
 8002cba:	f003 f931 	bl	8005f20 <HAL_GPIO_WritePin>

		if(!ProgrammingMode && FlashIsProgrammed && !ProgInited)
 8002cbe:	4b1b      	ldr	r3, [pc, #108]	; (8002d2c <ProcessIO+0xe0>)
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	f083 0301 	eor.w	r3, r3, #1
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00d      	beq.n	8002ce8 <ProcessIO+0x9c>
 8002ccc:	4b18      	ldr	r3, [pc, #96]	; (8002d30 <ProcessIO+0xe4>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d009      	beq.n	8002ce8 <ProcessIO+0x9c>
 8002cd4:	4b17      	ldr	r3, [pc, #92]	; (8002d34 <ProcessIO+0xe8>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	f083 0301 	eor.w	r3, r3, #1
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d002      	beq.n	8002ce8 <ProcessIO+0x9c>
		{
			ProgInit();
 8002ce2:	f7ff fd81 	bl	80027e8 <ProgInit>
 8002ce6:	e016      	b.n	8002d16 <ProcessIO+0xca>
		}
		else if(!ProgrammingMode && !FlashIsProgrammed && !ProgInited)
 8002ce8:	4b10      	ldr	r3, [pc, #64]	; (8002d2c <ProcessIO+0xe0>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	f083 0301 	eor.w	r3, r3, #1
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d018      	beq.n	8002d28 <ProcessIO+0xdc>
 8002cf6:	4b0e      	ldr	r3, [pc, #56]	; (8002d30 <ProcessIO+0xe4>)
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	f083 0301 	eor.w	r3, r3, #1
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d011      	beq.n	8002d28 <ProcessIO+0xdc>
 8002d04:	4b0b      	ldr	r3, [pc, #44]	; (8002d34 <ProcessIO+0xe8>)
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	f083 0301 	eor.w	r3, r3, #1
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00a      	beq.n	8002d28 <ProcessIO+0xdc>
		{
			TestFlash();
 8002d12:	f7fe fc89 	bl	8001628 <TestFlash>
		}
		else
			return;
	}
	ProcessXs();
 8002d16:	f7ff f85b 	bl	8001dd0 <ProcessXs>
	ProcessTimers();
 8002d1a:	f7ff f99b 	bl	8002054 <ProcessTimers>
	ProcessProgramm();
 8002d1e:	f7ff fef1 	bl	8002b04 <ProcessProgramm>
	ProcessCoils();
 8002d22:	f7ff f8f7 	bl	8001f14 <ProcessCoils>
 8002d26:	e000      	b.n	8002d2a <ProcessIO+0xde>
			return;
 8002d28:	bf00      	nop
}
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	20000770 	.word	0x20000770
 8002d30:	200008b8 	.word	0x200008b8
 8002d34:	20000771 	.word	0x20000771
 8002d38:	40010800 	.word	0x40010800
 8002d3c:	40010c00 	.word	0x40010c00

08002d40 <LED_Service>:
uint32_t LedTick;
uint8_t Ticks;
uint8_t led_start_once;
int led_blink_val;
void LED_Service()
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
	if(!ProgrammingMode)
 8002d44:	4b31      	ldr	r3, [pc, #196]	; (8002e0c <LED_Service+0xcc>)
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	f083 0301 	eor.w	r3, r3, #1
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d043      	beq.n	8002dda <LED_Service+0x9a>
	 {
		 if(FlashIsProgrammed && ProgInited)
 8002d52:	4b2f      	ldr	r3, [pc, #188]	; (8002e10 <LED_Service+0xd0>)
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d025      	beq.n	8002da6 <LED_Service+0x66>
 8002d5a:	4b2e      	ldr	r3, [pc, #184]	; (8002e14 <LED_Service+0xd4>)
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d021      	beq.n	8002da6 <LED_Service+0x66>
		 {
			 if((HAL_GetTick()-BackTick)>1000)
 8002d62:	f001 fc33 	bl	80045cc <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	4b2b      	ldr	r3, [pc, #172]	; (8002e18 <LED_Service+0xd8>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d72:	d909      	bls.n	8002d88 <LED_Service+0x48>
				 {
				 HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);
 8002d74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d78:	4828      	ldr	r0, [pc, #160]	; (8002e1c <LED_Service+0xdc>)
 8002d7a:	f003 f8e9 	bl	8005f50 <HAL_GPIO_TogglePin>
				 BackTick=HAL_GetTick();
 8002d7e:	f001 fc25 	bl	80045cc <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	4b24      	ldr	r3, [pc, #144]	; (8002e18 <LED_Service+0xd8>)
 8002d86:	601a      	str	r2, [r3, #0]
				 }
			 if(Ticks<2) Ticks++;
 8002d88:	4b25      	ldr	r3, [pc, #148]	; (8002e20 <LED_Service+0xe0>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d806      	bhi.n	8002d9e <LED_Service+0x5e>
 8002d90:	4b23      	ldr	r3, [pc, #140]	; (8002e20 <LED_Service+0xe0>)
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	3301      	adds	r3, #1
 8002d96:	b2da      	uxtb	r2, r3
 8002d98:	4b21      	ldr	r3, [pc, #132]	; (8002e20 <LED_Service+0xe0>)
 8002d9a:	701a      	strb	r2, [r3, #0]
 8002d9c:	e033      	b.n	8002e06 <LED_Service+0xc6>
			 else CareOuts=true;
 8002d9e:	4b21      	ldr	r3, [pc, #132]	; (8002e24 <LED_Service+0xe4>)
 8002da0:	2201      	movs	r2, #1
 8002da2:	701a      	strb	r2, [r3, #0]
			 if(Ticks<2) Ticks++;
 8002da4:	e02f      	b.n	8002e06 <LED_Service+0xc6>
		 }
		 else
		 {
			 Ticks=0;
 8002da6:	4b1e      	ldr	r3, [pc, #120]	; (8002e20 <LED_Service+0xe0>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	701a      	strb	r2, [r3, #0]
			 CareOuts=false;
 8002dac:	4b1d      	ldr	r3, [pc, #116]	; (8002e24 <LED_Service+0xe4>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	701a      	strb	r2, [r3, #0]
			 if((HAL_GetTick()-BackTick)>300)
 8002db2:	f001 fc0b 	bl	80045cc <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	4b17      	ldr	r3, [pc, #92]	; (8002e18 <LED_Service+0xd8>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002dc2:	d920      	bls.n	8002e06 <LED_Service+0xc6>
				 {
				 HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);
 8002dc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002dc8:	4814      	ldr	r0, [pc, #80]	; (8002e1c <LED_Service+0xdc>)
 8002dca:	f003 f8c1 	bl	8005f50 <HAL_GPIO_TogglePin>
				 BackTick=HAL_GetTick();
 8002dce:	f001 fbfd 	bl	80045cc <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	4b10      	ldr	r3, [pc, #64]	; (8002e18 <LED_Service+0xd8>)
 8002dd6:	601a      	str	r2, [r3, #0]
		 Ticks=0;
		 CareOuts=false;
		 HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin, GPIO_PIN_RESET);
		 BackTick=HAL_GetTick();
	 }
}
 8002dd8:	e015      	b.n	8002e06 <LED_Service+0xc6>
	 else if(ProgrammingMode)
 8002dda:	4b0c      	ldr	r3, [pc, #48]	; (8002e0c <LED_Service+0xcc>)
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d011      	beq.n	8002e06 <LED_Service+0xc6>
		 Ticks=0;
 8002de2:	4b0f      	ldr	r3, [pc, #60]	; (8002e20 <LED_Service+0xe0>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	701a      	strb	r2, [r3, #0]
		 CareOuts=false;
 8002de8:	4b0e      	ldr	r3, [pc, #56]	; (8002e24 <LED_Service+0xe4>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	701a      	strb	r2, [r3, #0]
		 HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin, GPIO_PIN_RESET);
 8002dee:	2200      	movs	r2, #0
 8002df0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002df4:	4809      	ldr	r0, [pc, #36]	; (8002e1c <LED_Service+0xdc>)
 8002df6:	f003 f893 	bl	8005f20 <HAL_GPIO_WritePin>
		 BackTick=HAL_GetTick();
 8002dfa:	f001 fbe7 	bl	80045cc <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	4b05      	ldr	r3, [pc, #20]	; (8002e18 <LED_Service+0xd8>)
 8002e02:	601a      	str	r2, [r3, #0]
}
 8002e04:	e7ff      	b.n	8002e06 <LED_Service+0xc6>
 8002e06:	bf00      	nop
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	20000770 	.word	0x20000770
 8002e10:	200008b8 	.word	0x200008b8
 8002e14:	20000771 	.word	0x20000771
 8002e18:	20001324 	.word	0x20001324
 8002e1c:	40011000 	.word	0x40011000
 8002e20:	20001254 	.word	0x20001254
 8002e24:	20000704 	.word	0x20000704

08002e28 <Led_Startup>:

void Led_Startup()
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
	Flash_ReadPage(pageData,1,2);
 8002e2e:	2202      	movs	r2, #2
 8002e30:	2101      	movs	r1, #1
 8002e32:	4820      	ldr	r0, [pc, #128]	; (8002eb4 <Led_Startup+0x8c>)
 8002e34:	f7fe f9bc 	bl	80011b0 <Flash_ReadPage>
	uint8_t data[1];
	uint8_t *ledPtr=pageData;
 8002e38:	4b1e      	ldr	r3, [pc, #120]	; (8002eb4 <Led_Startup+0x8c>)
 8002e3a:	607b      	str	r3, [r7, #4]
	if(ledPtr[0] == 'L')
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	2b4c      	cmp	r3, #76	; 0x4c
 8002e42:	d10b      	bne.n	8002e5c <Led_Startup+0x34>
	{
		ledPtr = ledPtr + 1;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	3301      	adds	r3, #1
 8002e48:	607b      	str	r3, [r7, #4]
		memcpy(data,ledPtr,1);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	703b      	strb	r3, [r7, #0]
		sscanf((char*)data,"%d",&led_blink_val);
 8002e50:	463b      	mov	r3, r7
 8002e52:	4a19      	ldr	r2, [pc, #100]	; (8002eb8 <Led_Startup+0x90>)
 8002e54:	4919      	ldr	r1, [pc, #100]	; (8002ebc <Led_Startup+0x94>)
 8002e56:	4618      	mov	r0, r3
 8002e58:	f008 fac0 	bl	800b3dc <siscanf>
	}
	else
	{
		/*Do Nothing. Error Stage*/
	}
	led_blink_val = led_blink_val * 2;
 8002e5c:	4b16      	ldr	r3, [pc, #88]	; (8002eb8 <Led_Startup+0x90>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	4a15      	ldr	r2, [pc, #84]	; (8002eb8 <Led_Startup+0x90>)
 8002e64:	6013      	str	r3, [r2, #0]
	while(led_blink_val>0)
 8002e66:	e019      	b.n	8002e9c <Led_Startup+0x74>
	{
		if((HAL_GetTick()-BackTick)>300)
 8002e68:	f001 fbb0 	bl	80045cc <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	4b14      	ldr	r3, [pc, #80]	; (8002ec0 <Led_Startup+0x98>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002e78:	d90e      	bls.n	8002e98 <Led_Startup+0x70>
		{
			 HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);
 8002e7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e7e:	4811      	ldr	r0, [pc, #68]	; (8002ec4 <Led_Startup+0x9c>)
 8002e80:	f003 f866 	bl	8005f50 <HAL_GPIO_TogglePin>
			 BackTick=HAL_GetTick();
 8002e84:	f001 fba2 	bl	80045cc <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	4b0d      	ldr	r3, [pc, #52]	; (8002ec0 <Led_Startup+0x98>)
 8002e8c:	601a      	str	r2, [r3, #0]
			 led_blink_val--;
 8002e8e:	4b0a      	ldr	r3, [pc, #40]	; (8002eb8 <Led_Startup+0x90>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	3b01      	subs	r3, #1
 8002e94:	4a08      	ldr	r2, [pc, #32]	; (8002eb8 <Led_Startup+0x90>)
 8002e96:	6013      	str	r3, [r2, #0]
		}
		WDT();
 8002e98:	f000 fad2 	bl	8003440 <WDT>
	while(led_blink_val>0)
 8002e9c:	4b06      	ldr	r3, [pc, #24]	; (8002eb8 <Led_Startup+0x90>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	dce1      	bgt.n	8002e68 <Led_Startup+0x40>
	}
	HAL_Delay(1000);
 8002ea4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ea8:	f001 fb9a 	bl	80045e0 <HAL_Delay>
}
 8002eac:	bf00      	nop
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	200007b8 	.word	0x200007b8
 8002eb8:	200012dc 	.word	0x200012dc
 8002ebc:	0800c3a8 	.word	0x0800c3a8
 8002ec0:	20001324 	.word	0x20001324
 8002ec4:	40011000 	.word	0x40011000

08002ec8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	BackTick=0;
 8002ecc:	4b1e      	ldr	r3, [pc, #120]	; (8002f48 <main+0x80>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ed2:	f001 fb23 	bl	800451c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ed6:	f000 f83f 	bl	8002f58 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  //HAL_Delay(300);
  ADCReady=false;
 8002eda:	4b1c      	ldr	r3, [pc, #112]	; (8002f4c <main+0x84>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	701a      	strb	r2, [r3, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ee0:	f000 fa28 	bl	8003334 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002ee4:	f000 f898 	bl	8003018 <MX_ADC1_Init>
  MX_SPI2_Init();
 8002ee8:	f000 f9d0 	bl	800328c <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 8002eec:	f007 fda0 	bl	800aa30 <MX_USB_DEVICE_Init>
  MX_DMA_Init();
 8002ef0:	f000 fa02 	bl	80032f8 <MX_DMA_Init>
  MX_IWDG_Init();
 8002ef4:	f000 f9b0 	bl	8003258 <MX_IWDG_Init>
  MX_CAN_Init();
 8002ef8:	f000 f94c 	bl	8003194 <MX_CAN_Init>
  MX_I2C2_Init();
 8002efc:	f000 f97e 	bl	80031fc <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
//-----------------
  MX_ADC1_Init();
 8002f00:	f000 f88a 	bl	8003018 <MX_ADC1_Init>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADCValues,10);
 8002f04:	220a      	movs	r2, #10
 8002f06:	4912      	ldr	r1, [pc, #72]	; (8002f50 <main+0x88>)
 8002f08:	4812      	ldr	r0, [pc, #72]	; (8002f54 <main+0x8c>)
 8002f0a:	f001 fc63 	bl	80047d4 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  InitGlobals();
 8002f0e:	f7fe fc83 	bl	8001818 <InitGlobals>
  WDT();
 8002f12:	f000 fa95 	bl	8003440 <WDT>
  FlasherInit();
 8002f16:	f7fe f999 	bl	800124c <FlasherInit>
  WDT();
 8002f1a:	f000 fa91 	bl	8003440 <WDT>
  Led_Startup();
 8002f1e:	f7ff ff83 	bl	8002e28 <Led_Startup>
  WDT();
 8002f22:	f000 fa8d 	bl	8003440 <WDT>
  while (1)
  {
	 if(ADCReady) ProcessADC();
 8002f26:	4b09      	ldr	r3, [pc, #36]	; (8002f4c <main+0x84>)
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <main+0x6a>
 8002f2e:	f000 fbd7 	bl	80036e0 <ProcessADC>
	 USB_RX_MainProcess();
 8002f32:	f000 fb1f 	bl	8003574 <USB_RX_MainProcess>
	 WDT();
 8002f36:	f000 fa83 	bl	8003440 <WDT>
	 ProcessIO();
 8002f3a:	f7ff fe87 	bl	8002c4c <ProcessIO>
	 WDT();
 8002f3e:	f000 fa7f 	bl	8003440 <WDT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	 LED_Service();
 8002f42:	f7ff fefd 	bl	8002d40 <LED_Service>
	 if(ADCReady) ProcessADC();
 8002f46:	e7ee      	b.n	8002f26 <main+0x5e>
 8002f48:	20001324 	.word	0x20001324
 8002f4c:	20001328 	.word	0x20001328
 8002f50:	200012b4 	.word	0x200012b4
 8002f54:	20001280 	.word	0x20001280

08002f58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b094      	sub	sp, #80	; 0x50
 8002f5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f62:	2228      	movs	r2, #40	; 0x28
 8002f64:	2100      	movs	r1, #0
 8002f66:	4618      	mov	r0, r3
 8002f68:	f008 fa2f 	bl	800b3ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f6c:	f107 0314 	add.w	r3, r7, #20
 8002f70:	2200      	movs	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	605a      	str	r2, [r3, #4]
 8002f76:	609a      	str	r2, [r3, #8]
 8002f78:	60da      	str	r2, [r3, #12]
 8002f7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f7c:	1d3b      	adds	r3, r7, #4
 8002f7e:	2200      	movs	r2, #0
 8002f80:	601a      	str	r2, [r3, #0]
 8002f82:	605a      	str	r2, [r3, #4]
 8002f84:	609a      	str	r2, [r3, #8]
 8002f86:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002f88:	2309      	movs	r3, #9
 8002f8a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002f8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f90:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002f92:	2300      	movs	r3, #0
 8002f94:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f96:	2301      	movs	r3, #1
 8002f98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002fa2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fa6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8002fa8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002fac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f004 f836 	bl	8007024 <HAL_RCC_OscConfig>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002fbe:	f001 f801 	bl	8003fc4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fc2:	230f      	movs	r3, #15
 8002fc4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002fce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fd2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002fd8:	f107 0314 	add.w	r3, r7, #20
 8002fdc:	2101      	movs	r1, #1
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f004 faa0 	bl	8007524 <HAL_RCC_ClockConfig>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002fea:	f000 ffeb 	bl	8003fc4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8002fee:	2312      	movs	r3, #18
 8002ff0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8002ff2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ff6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002ff8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ffc:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ffe:	1d3b      	adds	r3, r7, #4
 8003000:	4618      	mov	r0, r3
 8003002:	f004 fc19 	bl	8007838 <HAL_RCCEx_PeriphCLKConfig>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d001      	beq.n	8003010 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800300c:	f000 ffda 	bl	8003fc4 <Error_Handler>
  }
}
 8003010:	bf00      	nop
 8003012:	3750      	adds	r7, #80	; 0x50
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800301e:	1d3b      	adds	r3, r7, #4
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	605a      	str	r2, [r3, #4]
 8003026:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8003028:	4b58      	ldr	r3, [pc, #352]	; (800318c <MX_ADC1_Init+0x174>)
 800302a:	4a59      	ldr	r2, [pc, #356]	; (8003190 <MX_ADC1_Init+0x178>)
 800302c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800302e:	4b57      	ldr	r3, [pc, #348]	; (800318c <MX_ADC1_Init+0x174>)
 8003030:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003034:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003036:	4b55      	ldr	r3, [pc, #340]	; (800318c <MX_ADC1_Init+0x174>)
 8003038:	2201      	movs	r2, #1
 800303a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800303c:	4b53      	ldr	r3, [pc, #332]	; (800318c <MX_ADC1_Init+0x174>)
 800303e:	2200      	movs	r2, #0
 8003040:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003042:	4b52      	ldr	r3, [pc, #328]	; (800318c <MX_ADC1_Init+0x174>)
 8003044:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8003048:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800304a:	4b50      	ldr	r3, [pc, #320]	; (800318c <MX_ADC1_Init+0x174>)
 800304c:	2200      	movs	r2, #0
 800304e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 10;
 8003050:	4b4e      	ldr	r3, [pc, #312]	; (800318c <MX_ADC1_Init+0x174>)
 8003052:	220a      	movs	r2, #10
 8003054:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003056:	484d      	ldr	r0, [pc, #308]	; (800318c <MX_ADC1_Init+0x174>)
 8003058:	f001 fae4 	bl	8004624 <HAL_ADC_Init>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8003062:	f000 ffaf 	bl	8003fc4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003066:	2300      	movs	r3, #0
 8003068:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800306a:	2301      	movs	r3, #1
 800306c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800306e:	2305      	movs	r3, #5
 8003070:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003072:	1d3b      	adds	r3, r7, #4
 8003074:	4619      	mov	r1, r3
 8003076:	4845      	ldr	r0, [pc, #276]	; (800318c <MX_ADC1_Init+0x174>)
 8003078:	f001 fd72 	bl	8004b60 <HAL_ADC_ConfigChannel>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8003082:	f000 ff9f 	bl	8003fc4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003086:	2301      	movs	r3, #1
 8003088:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800308a:	2302      	movs	r3, #2
 800308c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800308e:	1d3b      	adds	r3, r7, #4
 8003090:	4619      	mov	r1, r3
 8003092:	483e      	ldr	r0, [pc, #248]	; (800318c <MX_ADC1_Init+0x174>)
 8003094:	f001 fd64 	bl	8004b60 <HAL_ADC_ConfigChannel>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800309e:	f000 ff91 	bl	8003fc4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80030a2:	2302      	movs	r3, #2
 80030a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80030a6:	2303      	movs	r3, #3
 80030a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80030aa:	1d3b      	adds	r3, r7, #4
 80030ac:	4619      	mov	r1, r3
 80030ae:	4837      	ldr	r0, [pc, #220]	; (800318c <MX_ADC1_Init+0x174>)
 80030b0:	f001 fd56 	bl	8004b60 <HAL_ADC_ConfigChannel>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80030ba:	f000 ff83 	bl	8003fc4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80030be:	2303      	movs	r3, #3
 80030c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80030c2:	2304      	movs	r3, #4
 80030c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80030c6:	1d3b      	adds	r3, r7, #4
 80030c8:	4619      	mov	r1, r3
 80030ca:	4830      	ldr	r0, [pc, #192]	; (800318c <MX_ADC1_Init+0x174>)
 80030cc:	f001 fd48 	bl	8004b60 <HAL_ADC_ConfigChannel>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80030d6:	f000 ff75 	bl	8003fc4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80030da:	2304      	movs	r3, #4
 80030dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80030de:	2305      	movs	r3, #5
 80030e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80030e2:	1d3b      	adds	r3, r7, #4
 80030e4:	4619      	mov	r1, r3
 80030e6:	4829      	ldr	r0, [pc, #164]	; (800318c <MX_ADC1_Init+0x174>)
 80030e8:	f001 fd3a 	bl	8004b60 <HAL_ADC_ConfigChannel>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80030f2:	f000 ff67 	bl	8003fc4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80030f6:	2305      	movs	r3, #5
 80030f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80030fa:	2306      	movs	r3, #6
 80030fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80030fe:	1d3b      	adds	r3, r7, #4
 8003100:	4619      	mov	r1, r3
 8003102:	4822      	ldr	r0, [pc, #136]	; (800318c <MX_ADC1_Init+0x174>)
 8003104:	f001 fd2c 	bl	8004b60 <HAL_ADC_ConfigChannel>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800310e:	f000 ff59 	bl	8003fc4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003112:	2306      	movs	r3, #6
 8003114:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8003116:	2307      	movs	r3, #7
 8003118:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800311a:	1d3b      	adds	r3, r7, #4
 800311c:	4619      	mov	r1, r3
 800311e:	481b      	ldr	r0, [pc, #108]	; (800318c <MX_ADC1_Init+0x174>)
 8003120:	f001 fd1e 	bl	8004b60 <HAL_ADC_ConfigChannel>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 800312a:	f000 ff4b 	bl	8003fc4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800312e:	2307      	movs	r3, #7
 8003130:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8003132:	2308      	movs	r3, #8
 8003134:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003136:	1d3b      	adds	r3, r7, #4
 8003138:	4619      	mov	r1, r3
 800313a:	4814      	ldr	r0, [pc, #80]	; (800318c <MX_ADC1_Init+0x174>)
 800313c:	f001 fd10 	bl	8004b60 <HAL_ADC_ConfigChannel>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8003146:	f000 ff3d 	bl	8003fc4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800314a:	2311      	movs	r3, #17
 800314c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800314e:	2309      	movs	r3, #9
 8003150:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003152:	1d3b      	adds	r3, r7, #4
 8003154:	4619      	mov	r1, r3
 8003156:	480d      	ldr	r0, [pc, #52]	; (800318c <MX_ADC1_Init+0x174>)
 8003158:	f001 fd02 	bl	8004b60 <HAL_ADC_ConfigChannel>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 8003162:	f000 ff2f 	bl	8003fc4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8003166:	2310      	movs	r3, #16
 8003168:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800316a:	230a      	movs	r3, #10
 800316c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800316e:	1d3b      	adds	r3, r7, #4
 8003170:	4619      	mov	r1, r3
 8003172:	4806      	ldr	r0, [pc, #24]	; (800318c <MX_ADC1_Init+0x174>)
 8003174:	f001 fcf4 	bl	8004b60 <HAL_ADC_ConfigChannel>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <MX_ADC1_Init+0x16a>
  {
    Error_Handler();
 800317e:	f000 ff21 	bl	8003fc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003182:	bf00      	nop
 8003184:	3710      	adds	r7, #16
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	20001280 	.word	0x20001280
 8003190:	40012400 	.word	0x40012400

08003194 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8003198:	4b16      	ldr	r3, [pc, #88]	; (80031f4 <MX_CAN_Init+0x60>)
 800319a:	4a17      	ldr	r2, [pc, #92]	; (80031f8 <MX_CAN_Init+0x64>)
 800319c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800319e:	4b15      	ldr	r3, [pc, #84]	; (80031f4 <MX_CAN_Init+0x60>)
 80031a0:	2210      	movs	r2, #16
 80031a2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80031a4:	4b13      	ldr	r3, [pc, #76]	; (80031f4 <MX_CAN_Init+0x60>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80031aa:	4b12      	ldr	r3, [pc, #72]	; (80031f4 <MX_CAN_Init+0x60>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80031b0:	4b10      	ldr	r3, [pc, #64]	; (80031f4 <MX_CAN_Init+0x60>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80031b6:	4b0f      	ldr	r3, [pc, #60]	; (80031f4 <MX_CAN_Init+0x60>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80031bc:	4b0d      	ldr	r3, [pc, #52]	; (80031f4 <MX_CAN_Init+0x60>)
 80031be:	2200      	movs	r2, #0
 80031c0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80031c2:	4b0c      	ldr	r3, [pc, #48]	; (80031f4 <MX_CAN_Init+0x60>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80031c8:	4b0a      	ldr	r3, [pc, #40]	; (80031f4 <MX_CAN_Init+0x60>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80031ce:	4b09      	ldr	r3, [pc, #36]	; (80031f4 <MX_CAN_Init+0x60>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80031d4:	4b07      	ldr	r3, [pc, #28]	; (80031f4 <MX_CAN_Init+0x60>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80031da:	4b06      	ldr	r3, [pc, #24]	; (80031f4 <MX_CAN_Init+0x60>)
 80031dc:	2200      	movs	r2, #0
 80031de:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80031e0:	4804      	ldr	r0, [pc, #16]	; (80031f4 <MX_CAN_Init+0x60>)
 80031e2:	f001 feb0 	bl	8004f46 <HAL_CAN_Init>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d001      	beq.n	80031f0 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80031ec:	f000 feea 	bl	8003fc4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80031f0:	bf00      	nop
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	20001258 	.word	0x20001258
 80031f8:	40006400 	.word	0x40006400

080031fc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003200:	4b12      	ldr	r3, [pc, #72]	; (800324c <MX_I2C2_Init+0x50>)
 8003202:	4a13      	ldr	r2, [pc, #76]	; (8003250 <MX_I2C2_Init+0x54>)
 8003204:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8003206:	4b11      	ldr	r3, [pc, #68]	; (800324c <MX_I2C2_Init+0x50>)
 8003208:	4a12      	ldr	r2, [pc, #72]	; (8003254 <MX_I2C2_Init+0x58>)
 800320a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800320c:	4b0f      	ldr	r3, [pc, #60]	; (800324c <MX_I2C2_Init+0x50>)
 800320e:	2200      	movs	r2, #0
 8003210:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003212:	4b0e      	ldr	r3, [pc, #56]	; (800324c <MX_I2C2_Init+0x50>)
 8003214:	2200      	movs	r2, #0
 8003216:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003218:	4b0c      	ldr	r3, [pc, #48]	; (800324c <MX_I2C2_Init+0x50>)
 800321a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800321e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003220:	4b0a      	ldr	r3, [pc, #40]	; (800324c <MX_I2C2_Init+0x50>)
 8003222:	2200      	movs	r2, #0
 8003224:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003226:	4b09      	ldr	r3, [pc, #36]	; (800324c <MX_I2C2_Init+0x50>)
 8003228:	2200      	movs	r2, #0
 800322a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800322c:	4b07      	ldr	r3, [pc, #28]	; (800324c <MX_I2C2_Init+0x50>)
 800322e:	2200      	movs	r2, #0
 8003230:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003232:	4b06      	ldr	r3, [pc, #24]	; (800324c <MX_I2C2_Init+0x50>)
 8003234:	2200      	movs	r2, #0
 8003236:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003238:	4804      	ldr	r0, [pc, #16]	; (800324c <MX_I2C2_Init+0x50>)
 800323a:	f002 fea1 	bl	8005f80 <HAL_I2C_Init>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003244:	f000 febe 	bl	8003fc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003248:	bf00      	nop
 800324a:	bd80      	pop	{r7, pc}
 800324c:	20001200 	.word	0x20001200
 8003250:	40005800 	.word	0x40005800
 8003254:	000186a0 	.word	0x000186a0

08003258 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800325c:	4b09      	ldr	r3, [pc, #36]	; (8003284 <MX_IWDG_Init+0x2c>)
 800325e:	4a0a      	ldr	r2, [pc, #40]	; (8003288 <MX_IWDG_Init+0x30>)
 8003260:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_128;
 8003262:	4b08      	ldr	r3, [pc, #32]	; (8003284 <MX_IWDG_Init+0x2c>)
 8003264:	2205      	movs	r2, #5
 8003266:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 2000;
 8003268:	4b06      	ldr	r3, [pc, #24]	; (8003284 <MX_IWDG_Init+0x2c>)
 800326a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800326e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8003270:	4804      	ldr	r0, [pc, #16]	; (8003284 <MX_IWDG_Init+0x2c>)
 8003272:	f002 ffad 	bl	80061d0 <HAL_IWDG_Init>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 800327c:	f000 fea2 	bl	8003fc4 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8003280:	bf00      	nop
 8003282:	bd80      	pop	{r7, pc}
 8003284:	200011f4 	.word	0x200011f4
 8003288:	40003000 	.word	0x40003000

0800328c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003290:	4b17      	ldr	r3, [pc, #92]	; (80032f0 <MX_SPI2_Init+0x64>)
 8003292:	4a18      	ldr	r2, [pc, #96]	; (80032f4 <MX_SPI2_Init+0x68>)
 8003294:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003296:	4b16      	ldr	r3, [pc, #88]	; (80032f0 <MX_SPI2_Init+0x64>)
 8003298:	f44f 7282 	mov.w	r2, #260	; 0x104
 800329c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800329e:	4b14      	ldr	r3, [pc, #80]	; (80032f0 <MX_SPI2_Init+0x64>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80032a4:	4b12      	ldr	r3, [pc, #72]	; (80032f0 <MX_SPI2_Init+0x64>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80032aa:	4b11      	ldr	r3, [pc, #68]	; (80032f0 <MX_SPI2_Init+0x64>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80032b0:	4b0f      	ldr	r3, [pc, #60]	; (80032f0 <MX_SPI2_Init+0x64>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80032b6:	4b0e      	ldr	r3, [pc, #56]	; (80032f0 <MX_SPI2_Init+0x64>)
 80032b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032bc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80032be:	4b0c      	ldr	r3, [pc, #48]	; (80032f0 <MX_SPI2_Init+0x64>)
 80032c0:	2218      	movs	r2, #24
 80032c2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80032c4:	4b0a      	ldr	r3, [pc, #40]	; (80032f0 <MX_SPI2_Init+0x64>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80032ca:	4b09      	ldr	r3, [pc, #36]	; (80032f0 <MX_SPI2_Init+0x64>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032d0:	4b07      	ldr	r3, [pc, #28]	; (80032f0 <MX_SPI2_Init+0x64>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80032d6:	4b06      	ldr	r3, [pc, #24]	; (80032f0 <MX_SPI2_Init+0x64>)
 80032d8:	220a      	movs	r2, #10
 80032da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80032dc:	4804      	ldr	r0, [pc, #16]	; (80032f0 <MX_SPI2_Init+0x64>)
 80032de:	f004 fb61 	bl	80079a4 <HAL_SPI_Init>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80032e8:	f000 fe6c 	bl	8003fc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80032ec:	bf00      	nop
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	20000598 	.word	0x20000598
 80032f4:	40003800 	.word	0x40003800

080032f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80032fe:	4b0c      	ldr	r3, [pc, #48]	; (8003330 <MX_DMA_Init+0x38>)
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	4a0b      	ldr	r2, [pc, #44]	; (8003330 <MX_DMA_Init+0x38>)
 8003304:	f043 0301 	orr.w	r3, r3, #1
 8003308:	6153      	str	r3, [r2, #20]
 800330a:	4b09      	ldr	r3, [pc, #36]	; (8003330 <MX_DMA_Init+0x38>)
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	607b      	str	r3, [r7, #4]
 8003314:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003316:	2200      	movs	r2, #0
 8003318:	2100      	movs	r1, #0
 800331a:	200b      	movs	r0, #11
 800331c:	f002 fa0b 	bl	8005736 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003320:	200b      	movs	r0, #11
 8003322:	f002 fa24 	bl	800576e <HAL_NVIC_EnableIRQ>

}
 8003326:	bf00      	nop
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	40021000 	.word	0x40021000

08003334 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b088      	sub	sp, #32
 8003338:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800333a:	f107 0310 	add.w	r3, r7, #16
 800333e:	2200      	movs	r2, #0
 8003340:	601a      	str	r2, [r3, #0]
 8003342:	605a      	str	r2, [r3, #4]
 8003344:	609a      	str	r2, [r3, #8]
 8003346:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003348:	4b39      	ldr	r3, [pc, #228]	; (8003430 <MX_GPIO_Init+0xfc>)
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	4a38      	ldr	r2, [pc, #224]	; (8003430 <MX_GPIO_Init+0xfc>)
 800334e:	f043 0310 	orr.w	r3, r3, #16
 8003352:	6193      	str	r3, [r2, #24]
 8003354:	4b36      	ldr	r3, [pc, #216]	; (8003430 <MX_GPIO_Init+0xfc>)
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	f003 0310 	and.w	r3, r3, #16
 800335c:	60fb      	str	r3, [r7, #12]
 800335e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003360:	4b33      	ldr	r3, [pc, #204]	; (8003430 <MX_GPIO_Init+0xfc>)
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	4a32      	ldr	r2, [pc, #200]	; (8003430 <MX_GPIO_Init+0xfc>)
 8003366:	f043 0320 	orr.w	r3, r3, #32
 800336a:	6193      	str	r3, [r2, #24]
 800336c:	4b30      	ldr	r3, [pc, #192]	; (8003430 <MX_GPIO_Init+0xfc>)
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	f003 0320 	and.w	r3, r3, #32
 8003374:	60bb      	str	r3, [r7, #8]
 8003376:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003378:	4b2d      	ldr	r3, [pc, #180]	; (8003430 <MX_GPIO_Init+0xfc>)
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	4a2c      	ldr	r2, [pc, #176]	; (8003430 <MX_GPIO_Init+0xfc>)
 800337e:	f043 0304 	orr.w	r3, r3, #4
 8003382:	6193      	str	r3, [r2, #24]
 8003384:	4b2a      	ldr	r3, [pc, #168]	; (8003430 <MX_GPIO_Init+0xfc>)
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	f003 0304 	and.w	r3, r3, #4
 800338c:	607b      	str	r3, [r7, #4]
 800338e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003390:	4b27      	ldr	r3, [pc, #156]	; (8003430 <MX_GPIO_Init+0xfc>)
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	4a26      	ldr	r2, [pc, #152]	; (8003430 <MX_GPIO_Init+0xfc>)
 8003396:	f043 0308 	orr.w	r3, r3, #8
 800339a:	6193      	str	r3, [r2, #24]
 800339c:	4b24      	ldr	r3, [pc, #144]	; (8003430 <MX_GPIO_Init+0xfc>)
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	f003 0308 	and.w	r3, r3, #8
 80033a4:	603b      	str	r3, [r7, #0]
 80033a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80033a8:	2201      	movs	r2, #1
 80033aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033ae:	4821      	ldr	r0, [pc, #132]	; (8003434 <MX_GPIO_Init+0x100>)
 80033b0:	f002 fdb6 	bl	8005f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, F_CS_Pin|NP5_Pin|NP4_Pin|NP3_Pin
 80033b4:	2200      	movs	r2, #0
 80033b6:	f241 01f8 	movw	r1, #4344	; 0x10f8
 80033ba:	481f      	ldr	r0, [pc, #124]	; (8003438 <MX_GPIO_Init+0x104>)
 80033bc:	f002 fdb0 	bl	8005f20 <HAL_GPIO_WritePin>
                          |NP2_Pin|NP1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN2_Pin|EN1_Pin, GPIO_PIN_RESET);
 80033c0:	2200      	movs	r2, #0
 80033c2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80033c6:	481d      	ldr	r0, [pc, #116]	; (800343c <MX_GPIO_Init+0x108>)
 80033c8:	f002 fdaa 	bl	8005f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80033cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033d2:	2301      	movs	r3, #1
 80033d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d6:	2300      	movs	r3, #0
 80033d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033da:	2303      	movs	r3, #3
 80033dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80033de:	f107 0310 	add.w	r3, r7, #16
 80033e2:	4619      	mov	r1, r3
 80033e4:	4813      	ldr	r0, [pc, #76]	; (8003434 <MX_GPIO_Init+0x100>)
 80033e6:	f002 fc41 	bl	8005c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : F_CS_Pin NP5_Pin NP4_Pin NP3_Pin
                           NP2_Pin NP1_Pin */
  GPIO_InitStruct.Pin = F_CS_Pin|NP5_Pin|NP4_Pin|NP3_Pin
 80033ea:	f241 03f8 	movw	r3, #4344	; 0x10f8
 80033ee:	613b      	str	r3, [r7, #16]
                          |NP2_Pin|NP1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033f0:	2301      	movs	r3, #1
 80033f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033f4:	2301      	movs	r3, #1
 80033f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033f8:	2303      	movs	r3, #3
 80033fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033fc:	f107 0310 	add.w	r3, r7, #16
 8003400:	4619      	mov	r1, r3
 8003402:	480d      	ldr	r0, [pc, #52]	; (8003438 <MX_GPIO_Init+0x104>)
 8003404:	f002 fc32 	bl	8005c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : EN2_Pin EN1_Pin */
  GPIO_InitStruct.Pin = EN2_Pin|EN1_Pin;
 8003408:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800340c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800340e:	2301      	movs	r3, #1
 8003410:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003412:	2301      	movs	r3, #1
 8003414:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003416:	2303      	movs	r3, #3
 8003418:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800341a:	f107 0310 	add.w	r3, r7, #16
 800341e:	4619      	mov	r1, r3
 8003420:	4806      	ldr	r0, [pc, #24]	; (800343c <MX_GPIO_Init+0x108>)
 8003422:	f002 fc23 	bl	8005c6c <HAL_GPIO_Init>

}
 8003426:	bf00      	nop
 8003428:	3720      	adds	r7, #32
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	40021000 	.word	0x40021000
 8003434:	40011000 	.word	0x40011000
 8003438:	40010c00 	.word	0x40010c00
 800343c:	40010800 	.word	0x40010800

08003440 <WDT>:

/* USER CODE BEGIN 4 */
//-----------------------------------------------------------------------------------
void WDT()
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
	HAL_IWDG_Refresh(&hiwdg);
 8003444:	4802      	ldr	r0, [pc, #8]	; (8003450 <WDT+0x10>)
 8003446:	f002 fefc 	bl	8006242 <HAL_IWDG_Refresh>
}
 800344a:	bf00      	nop
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	200011f4 	.word	0x200011f4

08003454 <Send_Data_To_CDC>:
    ITM_SendChar((*ptr++));
  return len;
}
//----------------------------------------------------------------------------------
bool Send_Data_To_CDC(uint8_t * Data, uint8_t Len)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	460b      	mov	r3, r1
 800345e:	70fb      	strb	r3, [r7, #3]
	if(Len>MAX_BUF) return false;
 8003460:	78fb      	ldrb	r3, [r7, #3]
 8003462:	2b64      	cmp	r3, #100	; 0x64
 8003464:	d901      	bls.n	800346a <Send_Data_To_CDC+0x16>
 8003466:	2300      	movs	r3, #0
 8003468:	e032      	b.n	80034d0 <Send_Data_To_CDC+0x7c>
	if(Data==NULL) return false;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d101      	bne.n	8003474 <Send_Data_To_CDC+0x20>
 8003470:	2300      	movs	r3, #0
 8003472:	e02d      	b.n	80034d0 <Send_Data_To_CDC+0x7c>
	if(Data[0]==0) return false;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d101      	bne.n	8003480 <Send_Data_To_CDC+0x2c>
 800347c:	2300      	movs	r3, #0
 800347e:	e027      	b.n	80034d0 <Send_Data_To_CDC+0x7c>
	memcpy(SendData.Data,Data,Len);
 8003480:	78fb      	ldrb	r3, [r7, #3]
 8003482:	461a      	mov	r2, r3
 8003484:	6879      	ldr	r1, [r7, #4]
 8003486:	4814      	ldr	r0, [pc, #80]	; (80034d8 <Send_Data_To_CDC+0x84>)
 8003488:	f007 ff94 	bl	800b3b4 <memcpy>
	if(Len>0) SendData.len=Len;
 800348c:	78fb      	ldrb	r3, [r7, #3]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d003      	beq.n	800349a <Send_Data_To_CDC+0x46>
 8003492:	78fb      	ldrb	r3, [r7, #3]
 8003494:	4a10      	ldr	r2, [pc, #64]	; (80034d8 <Send_Data_To_CDC+0x84>)
 8003496:	60d3      	str	r3, [r2, #12]
 8003498:	e005      	b.n	80034a6 <Send_Data_To_CDC+0x52>
	else SendData.len=strlen((char*)Data);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7fc fe58 	bl	8000150 <strlen>
 80034a0:	4602      	mov	r2, r0
 80034a2:	4b0d      	ldr	r3, [pc, #52]	; (80034d8 <Send_Data_To_CDC+0x84>)
 80034a4:	60da      	str	r2, [r3, #12]
	uint8_t result = CDC_Transmit_FS(SendData.Data, SendData.len);
 80034a6:	4b0c      	ldr	r3, [pc, #48]	; (80034d8 <Send_Data_To_CDC+0x84>)
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	4619      	mov	r1, r3
 80034ae:	480a      	ldr	r0, [pc, #40]	; (80034d8 <Send_Data_To_CDC+0x84>)
 80034b0:	f007 fb7c 	bl	800abac <CDC_Transmit_FS>
 80034b4:	4603      	mov	r3, r0
 80034b6:	73fb      	strb	r3, [r7, #15]
	SendData.len=0;
 80034b8:	4b07      	ldr	r3, [pc, #28]	; (80034d8 <Send_Data_To_CDC+0x84>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	60da      	str	r2, [r3, #12]
	if(result==USBD_BUSY || result==USBD_FAIL) return false;
 80034be:	7bfb      	ldrb	r3, [r7, #15]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d002      	beq.n	80034ca <Send_Data_To_CDC+0x76>
 80034c4:	7bfb      	ldrb	r3, [r7, #15]
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d101      	bne.n	80034ce <Send_Data_To_CDC+0x7a>
 80034ca:	2300      	movs	r3, #0
 80034cc:	e000      	b.n	80034d0 <Send_Data_To_CDC+0x7c>
	return true;
 80034ce:	2301      	movs	r3, #1
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3710      	adds	r7, #16
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	200008c0 	.word	0x200008c0

080034dc <CDC_RX_IRQ_Handler>:
//------------------------------------------------------------------------------
void CDC_RX_IRQ_Handler(USBD_HandleTypeDef * usbfs)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
	if(usbfs->pClassData==NULL) return;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d037      	beq.n	800355e <CDC_RX_IRQ_Handler+0x82>
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)usbfs->pClassData;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80034f4:	60fb      	str	r3, [r7, #12]
	if(hcdc->RxLength==0) return;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d030      	beq.n	8003562 <CDC_RX_IRQ_Handler+0x86>
	if(RecvData.len>0 || BusyFlag)
 8003500:	4b1a      	ldr	r3, [pc, #104]	; (800356c <CDC_RX_IRQ_Handler+0x90>)
 8003502:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003504:	2b00      	cmp	r3, #0
 8003506:	d103      	bne.n	8003510 <CDC_RX_IRQ_Handler+0x34>
 8003508:	4b19      	ldr	r3, [pc, #100]	; (8003570 <CDC_RX_IRQ_Handler+0x94>)
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d004      	beq.n	800351a <CDC_RX_IRQ_Handler+0x3e>
		{
		hcdc->RxLength=0;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		/*uint8_t answ[2];
		answ[0]=COMMAND_PREFIX;
		answ[1]=BUSY_ANSWER;
		Send_Data_To_CDC(answ, 2);*/
		return;				//????? ?????????? ????? ?? ?????????
 8003518:	e024      	b.n	8003564 <CDC_RX_IRQ_Handler+0x88>
		}
	if(hcdc->RxBuffer[0]==0)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d107      	bne.n	8003536 <CDC_RX_IRQ_Handler+0x5a>
	{
		RecvData.len=0;
 8003526:	4b11      	ldr	r3, [pc, #68]	; (800356c <CDC_RX_IRQ_Handler+0x90>)
 8003528:	2200      	movs	r2, #0
 800352a:	665a      	str	r2, [r3, #100]	; 0x64
		hcdc->RxLength=0;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		return;
 8003534:	e016      	b.n	8003564 <CDC_RX_IRQ_Handler+0x88>
	}
	else
	{
		memcpy(RecvData.Data,hcdc->RxBuffer,hcdc->RxLength);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8003542:	461a      	mov	r2, r3
 8003544:	4809      	ldr	r0, [pc, #36]	; (800356c <CDC_RX_IRQ_Handler+0x90>)
 8003546:	f007 ff35 	bl	800b3b4 <memcpy>
		RecvData.len=hcdc->RxLength;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8003550:	4a06      	ldr	r2, [pc, #24]	; (800356c <CDC_RX_IRQ_Handler+0x90>)
 8003552:	6653      	str	r3, [r2, #100]	; 0x64
		hcdc->RxLength=0;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800355c:	e002      	b.n	8003564 <CDC_RX_IRQ_Handler+0x88>
	if(usbfs->pClassData==NULL) return;
 800355e:	bf00      	nop
 8003560:	e000      	b.n	8003564 <CDC_RX_IRQ_Handler+0x88>
	if(hcdc->RxLength==0) return;
 8003562:	bf00      	nop
	}
}
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	20000708 	.word	0x20000708
 8003570:	20000705 	.word	0x20000705

08003574 <USB_RX_MainProcess>:
//-----------------------------------------------------------------------------
uint8_t DataStage;
void USB_RX_MainProcess()
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
	  if(RecvData.len>0) //???????? ??????
 8003578:	4b0f      	ldr	r3, [pc, #60]	; (80035b8 <USB_RX_MainProcess+0x44>)
 800357a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800357c:	2b00      	cmp	r3, #0
 800357e:	d018      	beq.n	80035b2 <USB_RX_MainProcess+0x3e>
	  {
		  BusyFlag=true;
 8003580:	4b0e      	ldr	r3, [pc, #56]	; (80035bc <USB_RX_MainProcess+0x48>)
 8003582:	2201      	movs	r2, #1
 8003584:	701a      	strb	r2, [r3, #0]
		  //??? ?????????
		  if(RecvData.Data[0]=='V' || RecvData.Data[0]=='v')
 8003586:	4b0c      	ldr	r3, [pc, #48]	; (80035b8 <USB_RX_MainProcess+0x44>)
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	2b56      	cmp	r3, #86	; 0x56
 800358c:	d003      	beq.n	8003596 <USB_RX_MainProcess+0x22>
 800358e:	4b0a      	ldr	r3, [pc, #40]	; (80035b8 <USB_RX_MainProcess+0x44>)
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	2b76      	cmp	r3, #118	; 0x76
 8003594:	d104      	bne.n	80035a0 <USB_RX_MainProcess+0x2c>
		  {
			  Send_Data_To_CDC((uint8_t*)FirmVer,strlen((char *)FirmVer));
 8003596:	2105      	movs	r1, #5
 8003598:	4809      	ldr	r0, [pc, #36]	; (80035c0 <USB_RX_MainProcess+0x4c>)
 800359a:	f7ff ff5b 	bl	8003454 <Send_Data_To_CDC>
 800359e:	e002      	b.n	80035a6 <USB_RX_MainProcess+0x32>
		  }
		  else
		  {
			  PC_BuffProcessing(&RecvData);
 80035a0:	4805      	ldr	r0, [pc, #20]	; (80035b8 <USB_RX_MainProcess+0x44>)
 80035a2:	f7fe f8b3 	bl	800170c <PC_BuffProcessing>
		  }
		  //??? ?????????
		  RecvData.len=0; //????????? ????? ???????????? ??????.
 80035a6:	4b04      	ldr	r3, [pc, #16]	; (80035b8 <USB_RX_MainProcess+0x44>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	665a      	str	r2, [r3, #100]	; 0x64
		  BusyFlag=false;
 80035ac:	4b03      	ldr	r3, [pc, #12]	; (80035bc <USB_RX_MainProcess+0x48>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	701a      	strb	r2, [r3, #0]
	  }
}
 80035b2:	bf00      	nop
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	20000708 	.word	0x20000708
 80035bc:	20000705 	.word	0x20000705
 80035c0:	0800c3ac 	.word	0x0800c3ac

080035c4 <SysTickEvent>:
//------------------------------------------------------------------------------
void SysTickEvent()
{
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0
	return;
 80035c8:	bf00      	nop
}
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bc80      	pop	{r7}
 80035ce:	4770      	bx	lr

080035d0 <ADC_Interrupt_Handler>:

//----------------------------------------------------------------------------------
void ADC_Interrupt_Handler()
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
	ADCReady=true;
 80035d4:	4b03      	ldr	r3, [pc, #12]	; (80035e4 <ADC_Interrupt_Handler+0x14>)
 80035d6:	2201      	movs	r2, #1
 80035d8:	701a      	strb	r2, [r3, #0]
}
 80035da:	bf00      	nop
 80035dc:	46bd      	mov	sp, r7
 80035de:	bc80      	pop	{r7}
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	20001328 	.word	0x20001328

080035e8 <CalcProcents>:
//----------------------------------------------------------------------------------
void CalcProcents()
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
	WDT();
 80035ec:	f7ff ff28 	bl	8003440 <WDT>
	if(Channels.Vin>0)
 80035f0:	4b38      	ldr	r3, [pc, #224]	; (80036d4 <CalcProcents+0xec>)
 80035f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f4:	f04f 0100 	mov.w	r1, #0
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7fd fc99 	bl	8000f30 <__aeabi_fcmpgt>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d055      	beq.n	80036b0 <CalcProcents+0xc8>
	{
	Channels.CH1p= (Channels.CH1/Channels.Vin)*100.0;
 8003604:	4b33      	ldr	r3, [pc, #204]	; (80036d4 <CalcProcents+0xec>)
 8003606:	691a      	ldr	r2, [r3, #16]
 8003608:	4b32      	ldr	r3, [pc, #200]	; (80036d4 <CalcProcents+0xec>)
 800360a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360c:	4619      	mov	r1, r3
 800360e:	4610      	mov	r0, r2
 8003610:	f7fd fb86 	bl	8000d20 <__aeabi_fdiv>
 8003614:	4603      	mov	r3, r0
 8003616:	4930      	ldr	r1, [pc, #192]	; (80036d8 <CalcProcents+0xf0>)
 8003618:	4618      	mov	r0, r3
 800361a:	f7fd facd 	bl	8000bb8 <__aeabi_fmul>
 800361e:	4603      	mov	r3, r0
 8003620:	461a      	mov	r2, r3
 8003622:	4b2c      	ldr	r3, [pc, #176]	; (80036d4 <CalcProcents+0xec>)
 8003624:	62da      	str	r2, [r3, #44]	; 0x2c
	Channels.CH2p= (Channels.CH2/Channels.Vin)*100.0;
 8003626:	4b2b      	ldr	r3, [pc, #172]	; (80036d4 <CalcProcents+0xec>)
 8003628:	695a      	ldr	r2, [r3, #20]
 800362a:	4b2a      	ldr	r3, [pc, #168]	; (80036d4 <CalcProcents+0xec>)
 800362c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362e:	4619      	mov	r1, r3
 8003630:	4610      	mov	r0, r2
 8003632:	f7fd fb75 	bl	8000d20 <__aeabi_fdiv>
 8003636:	4603      	mov	r3, r0
 8003638:	4927      	ldr	r1, [pc, #156]	; (80036d8 <CalcProcents+0xf0>)
 800363a:	4618      	mov	r0, r3
 800363c:	f7fd fabc 	bl	8000bb8 <__aeabi_fmul>
 8003640:	4603      	mov	r3, r0
 8003642:	461a      	mov	r2, r3
 8003644:	4b23      	ldr	r3, [pc, #140]	; (80036d4 <CalcProcents+0xec>)
 8003646:	631a      	str	r2, [r3, #48]	; 0x30
	Channels.CH3p= (Channels.CH3/Channels.Vin)*100.0;
 8003648:	4b22      	ldr	r3, [pc, #136]	; (80036d4 <CalcProcents+0xec>)
 800364a:	699a      	ldr	r2, [r3, #24]
 800364c:	4b21      	ldr	r3, [pc, #132]	; (80036d4 <CalcProcents+0xec>)
 800364e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003650:	4619      	mov	r1, r3
 8003652:	4610      	mov	r0, r2
 8003654:	f7fd fb64 	bl	8000d20 <__aeabi_fdiv>
 8003658:	4603      	mov	r3, r0
 800365a:	491f      	ldr	r1, [pc, #124]	; (80036d8 <CalcProcents+0xf0>)
 800365c:	4618      	mov	r0, r3
 800365e:	f7fd faab 	bl	8000bb8 <__aeabi_fmul>
 8003662:	4603      	mov	r3, r0
 8003664:	461a      	mov	r2, r3
 8003666:	4b1b      	ldr	r3, [pc, #108]	; (80036d4 <CalcProcents+0xec>)
 8003668:	635a      	str	r2, [r3, #52]	; 0x34
	Channels.CH4p= (Channels.CH4/Channels.Vin)*100.0;
 800366a:	4b1a      	ldr	r3, [pc, #104]	; (80036d4 <CalcProcents+0xec>)
 800366c:	69da      	ldr	r2, [r3, #28]
 800366e:	4b19      	ldr	r3, [pc, #100]	; (80036d4 <CalcProcents+0xec>)
 8003670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003672:	4619      	mov	r1, r3
 8003674:	4610      	mov	r0, r2
 8003676:	f7fd fb53 	bl	8000d20 <__aeabi_fdiv>
 800367a:	4603      	mov	r3, r0
 800367c:	4916      	ldr	r1, [pc, #88]	; (80036d8 <CalcProcents+0xf0>)
 800367e:	4618      	mov	r0, r3
 8003680:	f7fd fa9a 	bl	8000bb8 <__aeabi_fmul>
 8003684:	4603      	mov	r3, r0
 8003686:	461a      	mov	r2, r3
 8003688:	4b12      	ldr	r3, [pc, #72]	; (80036d4 <CalcProcents+0xec>)
 800368a:	639a      	str	r2, [r3, #56]	; 0x38
	Channels.CH5p= (Channels.CH5/Channels.Vin)*100.0;
 800368c:	4b11      	ldr	r3, [pc, #68]	; (80036d4 <CalcProcents+0xec>)
 800368e:	6a1a      	ldr	r2, [r3, #32]
 8003690:	4b10      	ldr	r3, [pc, #64]	; (80036d4 <CalcProcents+0xec>)
 8003692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003694:	4619      	mov	r1, r3
 8003696:	4610      	mov	r0, r2
 8003698:	f7fd fb42 	bl	8000d20 <__aeabi_fdiv>
 800369c:	4603      	mov	r3, r0
 800369e:	490e      	ldr	r1, [pc, #56]	; (80036d8 <CalcProcents+0xf0>)
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7fd fa89 	bl	8000bb8 <__aeabi_fmul>
 80036a6:	4603      	mov	r3, r0
 80036a8:	461a      	mov	r2, r3
 80036aa:	4b0a      	ldr	r3, [pc, #40]	; (80036d4 <CalcProcents+0xec>)
 80036ac:	63da      	str	r2, [r3, #60]	; 0x3c
	Channels.CH2p= 100;
	Channels.CH3p= 100;
	Channels.CH4p= 100;
	Channels.CH5p= 100;
    }
}
 80036ae:	e00e      	b.n	80036ce <CalcProcents+0xe6>
	Channels.CH1p= 100;
 80036b0:	4b08      	ldr	r3, [pc, #32]	; (80036d4 <CalcProcents+0xec>)
 80036b2:	4a09      	ldr	r2, [pc, #36]	; (80036d8 <CalcProcents+0xf0>)
 80036b4:	62da      	str	r2, [r3, #44]	; 0x2c
	Channels.CH2p= 100;
 80036b6:	4b07      	ldr	r3, [pc, #28]	; (80036d4 <CalcProcents+0xec>)
 80036b8:	4a07      	ldr	r2, [pc, #28]	; (80036d8 <CalcProcents+0xf0>)
 80036ba:	631a      	str	r2, [r3, #48]	; 0x30
	Channels.CH3p= 100;
 80036bc:	4b05      	ldr	r3, [pc, #20]	; (80036d4 <CalcProcents+0xec>)
 80036be:	4a06      	ldr	r2, [pc, #24]	; (80036d8 <CalcProcents+0xf0>)
 80036c0:	635a      	str	r2, [r3, #52]	; 0x34
	Channels.CH4p= 100;
 80036c2:	4b04      	ldr	r3, [pc, #16]	; (80036d4 <CalcProcents+0xec>)
 80036c4:	4a04      	ldr	r2, [pc, #16]	; (80036d8 <CalcProcents+0xf0>)
 80036c6:	639a      	str	r2, [r3, #56]	; 0x38
	Channels.CH5p= 100;
 80036c8:	4b02      	ldr	r3, [pc, #8]	; (80036d4 <CalcProcents+0xec>)
 80036ca:	4a03      	ldr	r2, [pc, #12]	; (80036d8 <CalcProcents+0xf0>)
 80036cc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80036ce:	bf00      	nop
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	20000778 	.word	0x20000778
 80036d8:	42c80000 	.word	0x42c80000
 80036dc:	00000000 	.word	0x00000000

080036e0 <ProcessADC>:
//----------------------------------------------------------------------------------
#define USE_VREF
//#define PLC_DEBUG
#define VinOffsetVal 1910
void ProcessADC()
{
 80036e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80036e4:	b082      	sub	sp, #8
 80036e6:	af00      	add	r7, sp, #0
		//Channels
	float Vref;
	float temp;
	#ifdef USE_VREF
	if(ADCValues[8]>0)
 80036e8:	4b11      	ldr	r3, [pc, #68]	; (8003730 <ProcessADC+0x50>)
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d021      	beq.n	8003734 <ProcessADC+0x54>
	Vref = 1.157*4095.0/(float)(ADCValues[8]);
 80036f0:	4b0f      	ldr	r3, [pc, #60]	; (8003730 <ProcessADC+0x50>)
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7fd fa07 	bl	8000b08 <__aeabi_ui2f>
 80036fa:	4603      	mov	r3, r0
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7fc fe93 	bl	8000428 <__aeabi_f2d>
 8003702:	4603      	mov	r3, r0
 8003704:	460c      	mov	r4, r1
 8003706:	461a      	mov	r2, r3
 8003708:	4623      	mov	r3, r4
 800370a:	a107      	add	r1, pc, #28	; (adr r1, 8003728 <ProcessADC+0x48>)
 800370c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003710:	f7fd f80c 	bl	800072c <__aeabi_ddiv>
 8003714:	4603      	mov	r3, r0
 8003716:	460c      	mov	r4, r1
 8003718:	4618      	mov	r0, r3
 800371a:	4621      	mov	r1, r4
 800371c:	f7fd f8ee 	bl	80008fc <__aeabi_d2f>
 8003720:	4603      	mov	r3, r0
 8003722:	607b      	str	r3, [r7, #4]
 8003724:	e008      	b.n	8003738 <ProcessADC+0x58>
 8003726:	bf00      	nop
 8003728:	3d70a3d7 	.word	0x3d70a3d7
 800372c:	40b281ea 	.word	0x40b281ea
 8003730:	200012b4 	.word	0x200012b4
	else Vref =3.3;
 8003734:	4bc0      	ldr	r3, [pc, #768]	; (8003a38 <ProcessADC+0x358>)
 8003736:	607b      	str	r3, [r7, #4]
	#else
	Vref = 3.33;
	#endif
	#ifndef PLC_DEBUG
	temp = (float)ADCValues[9]*Vref/4095.0;
 8003738:	4bc0      	ldr	r3, [pc, #768]	; (8003a3c <ProcessADC+0x35c>)
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	4618      	mov	r0, r3
 800373e:	f7fd f9e3 	bl	8000b08 <__aeabi_ui2f>
 8003742:	4603      	mov	r3, r0
 8003744:	6879      	ldr	r1, [r7, #4]
 8003746:	4618      	mov	r0, r3
 8003748:	f7fd fa36 	bl	8000bb8 <__aeabi_fmul>
 800374c:	4603      	mov	r3, r0
 800374e:	49bc      	ldr	r1, [pc, #752]	; (8003a40 <ProcessADC+0x360>)
 8003750:	4618      	mov	r0, r3
 8003752:	f7fd fae5 	bl	8000d20 <__aeabi_fdiv>
 8003756:	4603      	mov	r3, r0
 8003758:	603b      	str	r3, [r7, #0]
	Channels.Temp = ((1.43-temp)/4.3)+25.0;
 800375a:	6838      	ldr	r0, [r7, #0]
 800375c:	f7fc fe64 	bl	8000428 <__aeabi_f2d>
 8003760:	4603      	mov	r3, r0
 8003762:	460c      	mov	r4, r1
 8003764:	461a      	mov	r2, r3
 8003766:	4623      	mov	r3, r4
 8003768:	a1a5      	add	r1, pc, #660	; (adr r1, 8003a00 <ProcessADC+0x320>)
 800376a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800376e:	f7fc fcfb 	bl	8000168 <__aeabi_dsub>
 8003772:	4603      	mov	r3, r0
 8003774:	460c      	mov	r4, r1
 8003776:	4618      	mov	r0, r3
 8003778:	4621      	mov	r1, r4
 800377a:	a3a3      	add	r3, pc, #652	; (adr r3, 8003a08 <ProcessADC+0x328>)
 800377c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003780:	f7fc ffd4 	bl	800072c <__aeabi_ddiv>
 8003784:	4603      	mov	r3, r0
 8003786:	460c      	mov	r4, r1
 8003788:	4618      	mov	r0, r3
 800378a:	4621      	mov	r1, r4
 800378c:	f04f 0200 	mov.w	r2, #0
 8003790:	4bac      	ldr	r3, [pc, #688]	; (8003a44 <ProcessADC+0x364>)
 8003792:	f7fc fceb 	bl	800016c <__adddf3>
 8003796:	4603      	mov	r3, r0
 8003798:	460c      	mov	r4, r1
 800379a:	4618      	mov	r0, r3
 800379c:	4621      	mov	r1, r4
 800379e:	f7fd f8ad 	bl	80008fc <__aeabi_d2f>
 80037a2:	4602      	mov	r2, r0
 80037a4:	4ba8      	ldr	r3, [pc, #672]	; (8003a48 <ProcessADC+0x368>)
 80037a6:	629a      	str	r2, [r3, #40]	; 0x28
	Channels.FB1p = (float)(ADCValues[0]/4095.0)*100.0;
 80037a8:	4ba4      	ldr	r3, [pc, #656]	; (8003a3c <ProcessADC+0x35c>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7fc fe19 	bl	80003e4 <__aeabi_ui2d>
 80037b2:	a397      	add	r3, pc, #604	; (adr r3, 8003a10 <ProcessADC+0x330>)
 80037b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b8:	f7fc ffb8 	bl	800072c <__aeabi_ddiv>
 80037bc:	4603      	mov	r3, r0
 80037be:	460c      	mov	r4, r1
 80037c0:	4618      	mov	r0, r3
 80037c2:	4621      	mov	r1, r4
 80037c4:	f7fd f89a 	bl	80008fc <__aeabi_d2f>
 80037c8:	4603      	mov	r3, r0
 80037ca:	49a0      	ldr	r1, [pc, #640]	; (8003a4c <ProcessADC+0x36c>)
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7fd f9f3 	bl	8000bb8 <__aeabi_fmul>
 80037d2:	4603      	mov	r3, r0
 80037d4:	461a      	mov	r2, r3
 80037d6:	4b9c      	ldr	r3, [pc, #624]	; (8003a48 <ProcessADC+0x368>)
 80037d8:	605a      	str	r2, [r3, #4]
	Channels.FB2p = (float)(ADCValues[1]/4095.0)*100.0;
 80037da:	4b98      	ldr	r3, [pc, #608]	; (8003a3c <ProcessADC+0x35c>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fc fe00 	bl	80003e4 <__aeabi_ui2d>
 80037e4:	a38a      	add	r3, pc, #552	; (adr r3, 8003a10 <ProcessADC+0x330>)
 80037e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ea:	f7fc ff9f 	bl	800072c <__aeabi_ddiv>
 80037ee:	4603      	mov	r3, r0
 80037f0:	460c      	mov	r4, r1
 80037f2:	4618      	mov	r0, r3
 80037f4:	4621      	mov	r1, r4
 80037f6:	f7fd f881 	bl	80008fc <__aeabi_d2f>
 80037fa:	4603      	mov	r3, r0
 80037fc:	4993      	ldr	r1, [pc, #588]	; (8003a4c <ProcessADC+0x36c>)
 80037fe:	4618      	mov	r0, r3
 8003800:	f7fd f9da 	bl	8000bb8 <__aeabi_fmul>
 8003804:	4603      	mov	r3, r0
 8003806:	461a      	mov	r2, r3
 8003808:	4b8f      	ldr	r3, [pc, #572]	; (8003a48 <ProcessADC+0x368>)
 800380a:	60da      	str	r2, [r3, #12]
	Channels.FB1 = (float)(ADCValues[0]/4095.0)*Vref*1000;
 800380c:	4b8b      	ldr	r3, [pc, #556]	; (8003a3c <ProcessADC+0x35c>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4618      	mov	r0, r3
 8003812:	f7fc fde7 	bl	80003e4 <__aeabi_ui2d>
 8003816:	a37e      	add	r3, pc, #504	; (adr r3, 8003a10 <ProcessADC+0x330>)
 8003818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800381c:	f7fc ff86 	bl	800072c <__aeabi_ddiv>
 8003820:	4603      	mov	r3, r0
 8003822:	460c      	mov	r4, r1
 8003824:	4618      	mov	r0, r3
 8003826:	4621      	mov	r1, r4
 8003828:	f7fd f868 	bl	80008fc <__aeabi_d2f>
 800382c:	4603      	mov	r3, r0
 800382e:	6879      	ldr	r1, [r7, #4]
 8003830:	4618      	mov	r0, r3
 8003832:	f7fd f9c1 	bl	8000bb8 <__aeabi_fmul>
 8003836:	4603      	mov	r3, r0
 8003838:	4985      	ldr	r1, [pc, #532]	; (8003a50 <ProcessADC+0x370>)
 800383a:	4618      	mov	r0, r3
 800383c:	f7fd f9bc 	bl	8000bb8 <__aeabi_fmul>
 8003840:	4603      	mov	r3, r0
 8003842:	461a      	mov	r2, r3
 8003844:	4b80      	ldr	r3, [pc, #512]	; (8003a48 <ProcessADC+0x368>)
 8003846:	601a      	str	r2, [r3, #0]
	Channels.FB2 = (float)(ADCValues[1]/4095.0)*Vref*1000;
 8003848:	4b7c      	ldr	r3, [pc, #496]	; (8003a3c <ProcessADC+0x35c>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	4618      	mov	r0, r3
 800384e:	f7fc fdc9 	bl	80003e4 <__aeabi_ui2d>
 8003852:	a36f      	add	r3, pc, #444	; (adr r3, 8003a10 <ProcessADC+0x330>)
 8003854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003858:	f7fc ff68 	bl	800072c <__aeabi_ddiv>
 800385c:	4603      	mov	r3, r0
 800385e:	460c      	mov	r4, r1
 8003860:	4618      	mov	r0, r3
 8003862:	4621      	mov	r1, r4
 8003864:	f7fd f84a 	bl	80008fc <__aeabi_d2f>
 8003868:	4603      	mov	r3, r0
 800386a:	6879      	ldr	r1, [r7, #4]
 800386c:	4618      	mov	r0, r3
 800386e:	f7fd f9a3 	bl	8000bb8 <__aeabi_fmul>
 8003872:	4603      	mov	r3, r0
 8003874:	4976      	ldr	r1, [pc, #472]	; (8003a50 <ProcessADC+0x370>)
 8003876:	4618      	mov	r0, r3
 8003878:	f7fd f99e 	bl	8000bb8 <__aeabi_fmul>
 800387c:	4603      	mov	r3, r0
 800387e:	461a      	mov	r2, r3
 8003880:	4b71      	ldr	r3, [pc, #452]	; (8003a48 <ProcessADC+0x368>)
 8003882:	609a      	str	r2, [r3, #8]
	if(ADCValues[2]>0)
 8003884:	4b6d      	ldr	r3, [pc, #436]	; (8003a3c <ProcessADC+0x35c>)
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d009      	beq.n	80038a0 <ProcessADC+0x1c0>
	{
		val2 = ADCValues[2];
 800388c:	4b6b      	ldr	r3, [pc, #428]	; (8003a3c <ProcessADC+0x35c>)
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	461a      	mov	r2, r3
 8003892:	4b70      	ldr	r3, [pc, #448]	; (8003a54 <ProcessADC+0x374>)
 8003894:	601a      	str	r2, [r3, #0]
		ADCValues[2] = ADCValues[2] + 60;
 8003896:	4b69      	ldr	r3, [pc, #420]	; (8003a3c <ProcessADC+0x35c>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	333c      	adds	r3, #60	; 0x3c
 800389c:	4a67      	ldr	r2, [pc, #412]	; (8003a3c <ProcessADC+0x35c>)
 800389e:	6093      	str	r3, [r2, #8]
	}
	temp = (float)ADCValues[2]*Vref/4095.0;
 80038a0:	4b66      	ldr	r3, [pc, #408]	; (8003a3c <ProcessADC+0x35c>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7fd f92f 	bl	8000b08 <__aeabi_ui2f>
 80038aa:	4603      	mov	r3, r0
 80038ac:	6879      	ldr	r1, [r7, #4]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7fd f982 	bl	8000bb8 <__aeabi_fmul>
 80038b4:	4603      	mov	r3, r0
 80038b6:	4962      	ldr	r1, [pc, #392]	; (8003a40 <ProcessADC+0x360>)
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7fd fa31 	bl	8000d20 <__aeabi_fdiv>
 80038be:	4603      	mov	r3, r0
 80038c0:	603b      	str	r3, [r7, #0]
	temp = ((8.2396 * temp * temp *temp) - (32.813 * temp *temp) + (53.346 * temp) - 19.091);
 80038c2:	6838      	ldr	r0, [r7, #0]
 80038c4:	f7fc fdb0 	bl	8000428 <__aeabi_f2d>
 80038c8:	a353      	add	r3, pc, #332	; (adr r3, 8003a18 <ProcessADC+0x338>)
 80038ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ce:	f7fc fe03 	bl	80004d8 <__aeabi_dmul>
 80038d2:	4603      	mov	r3, r0
 80038d4:	460c      	mov	r4, r1
 80038d6:	4625      	mov	r5, r4
 80038d8:	461c      	mov	r4, r3
 80038da:	6838      	ldr	r0, [r7, #0]
 80038dc:	f7fc fda4 	bl	8000428 <__aeabi_f2d>
 80038e0:	4602      	mov	r2, r0
 80038e2:	460b      	mov	r3, r1
 80038e4:	4620      	mov	r0, r4
 80038e6:	4629      	mov	r1, r5
 80038e8:	f7fc fdf6 	bl	80004d8 <__aeabi_dmul>
 80038ec:	4603      	mov	r3, r0
 80038ee:	460c      	mov	r4, r1
 80038f0:	4625      	mov	r5, r4
 80038f2:	461c      	mov	r4, r3
 80038f4:	6838      	ldr	r0, [r7, #0]
 80038f6:	f7fc fd97 	bl	8000428 <__aeabi_f2d>
 80038fa:	4602      	mov	r2, r0
 80038fc:	460b      	mov	r3, r1
 80038fe:	4620      	mov	r0, r4
 8003900:	4629      	mov	r1, r5
 8003902:	f7fc fde9 	bl	80004d8 <__aeabi_dmul>
 8003906:	4603      	mov	r3, r0
 8003908:	460c      	mov	r4, r1
 800390a:	4625      	mov	r5, r4
 800390c:	461c      	mov	r4, r3
 800390e:	6838      	ldr	r0, [r7, #0]
 8003910:	f7fc fd8a 	bl	8000428 <__aeabi_f2d>
 8003914:	a342      	add	r3, pc, #264	; (adr r3, 8003a20 <ProcessADC+0x340>)
 8003916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800391a:	f7fc fddd 	bl	80004d8 <__aeabi_dmul>
 800391e:	4602      	mov	r2, r0
 8003920:	460b      	mov	r3, r1
 8003922:	4690      	mov	r8, r2
 8003924:	4699      	mov	r9, r3
 8003926:	6838      	ldr	r0, [r7, #0]
 8003928:	f7fc fd7e 	bl	8000428 <__aeabi_f2d>
 800392c:	4602      	mov	r2, r0
 800392e:	460b      	mov	r3, r1
 8003930:	4640      	mov	r0, r8
 8003932:	4649      	mov	r1, r9
 8003934:	f7fc fdd0 	bl	80004d8 <__aeabi_dmul>
 8003938:	4602      	mov	r2, r0
 800393a:	460b      	mov	r3, r1
 800393c:	4620      	mov	r0, r4
 800393e:	4629      	mov	r1, r5
 8003940:	f7fc fc12 	bl	8000168 <__aeabi_dsub>
 8003944:	4603      	mov	r3, r0
 8003946:	460c      	mov	r4, r1
 8003948:	4625      	mov	r5, r4
 800394a:	461c      	mov	r4, r3
 800394c:	6838      	ldr	r0, [r7, #0]
 800394e:	f7fc fd6b 	bl	8000428 <__aeabi_f2d>
 8003952:	a335      	add	r3, pc, #212	; (adr r3, 8003a28 <ProcessADC+0x348>)
 8003954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003958:	f7fc fdbe 	bl	80004d8 <__aeabi_dmul>
 800395c:	4602      	mov	r2, r0
 800395e:	460b      	mov	r3, r1
 8003960:	4620      	mov	r0, r4
 8003962:	4629      	mov	r1, r5
 8003964:	f7fc fc02 	bl	800016c <__adddf3>
 8003968:	4603      	mov	r3, r0
 800396a:	460c      	mov	r4, r1
 800396c:	4618      	mov	r0, r3
 800396e:	4621      	mov	r1, r4
 8003970:	a32f      	add	r3, pc, #188	; (adr r3, 8003a30 <ProcessADC+0x350>)
 8003972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003976:	f7fc fbf7 	bl	8000168 <__aeabi_dsub>
 800397a:	4603      	mov	r3, r0
 800397c:	460c      	mov	r4, r1
 800397e:	4618      	mov	r0, r3
 8003980:	4621      	mov	r1, r4
 8003982:	f7fc ffbb 	bl	80008fc <__aeabi_d2f>
 8003986:	4603      	mov	r3, r0
 8003988:	603b      	str	r3, [r7, #0]
	Channels.CH1 = temp*convertToMili;
 800398a:	4931      	ldr	r1, [pc, #196]	; (8003a50 <ProcessADC+0x370>)
 800398c:	6838      	ldr	r0, [r7, #0]
 800398e:	f7fd f913 	bl	8000bb8 <__aeabi_fmul>
 8003992:	4603      	mov	r3, r0
 8003994:	461a      	mov	r2, r3
 8003996:	4b2c      	ldr	r3, [pc, #176]	; (8003a48 <ProcessADC+0x368>)
 8003998:	611a      	str	r2, [r3, #16]
	if(ADCValues[3]>0)
 800399a:	4b28      	ldr	r3, [pc, #160]	; (8003a3c <ProcessADC+0x35c>)
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d004      	beq.n	80039ac <ProcessADC+0x2cc>
	{
		ADCValues[3] = ADCValues[3] + 60;
 80039a2:	4b26      	ldr	r3, [pc, #152]	; (8003a3c <ProcessADC+0x35c>)
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	333c      	adds	r3, #60	; 0x3c
 80039a8:	4a24      	ldr	r2, [pc, #144]	; (8003a3c <ProcessADC+0x35c>)
 80039aa:	60d3      	str	r3, [r2, #12]
	}
	temp = (float)ADCValues[3]*Vref/4095.0;
 80039ac:	4b23      	ldr	r3, [pc, #140]	; (8003a3c <ProcessADC+0x35c>)
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7fd f8a9 	bl	8000b08 <__aeabi_ui2f>
 80039b6:	4603      	mov	r3, r0
 80039b8:	6879      	ldr	r1, [r7, #4]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7fd f8fc 	bl	8000bb8 <__aeabi_fmul>
 80039c0:	4603      	mov	r3, r0
 80039c2:	491f      	ldr	r1, [pc, #124]	; (8003a40 <ProcessADC+0x360>)
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7fd f9ab 	bl	8000d20 <__aeabi_fdiv>
 80039ca:	4603      	mov	r3, r0
 80039cc:	603b      	str	r3, [r7, #0]
	temp = ((8.2396 * temp * temp *temp) - (32.813 * temp *temp) + (53.346 * temp) - 19.091);
 80039ce:	6838      	ldr	r0, [r7, #0]
 80039d0:	f7fc fd2a 	bl	8000428 <__aeabi_f2d>
 80039d4:	a310      	add	r3, pc, #64	; (adr r3, 8003a18 <ProcessADC+0x338>)
 80039d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039da:	f7fc fd7d 	bl	80004d8 <__aeabi_dmul>
 80039de:	4603      	mov	r3, r0
 80039e0:	460c      	mov	r4, r1
 80039e2:	4625      	mov	r5, r4
 80039e4:	461c      	mov	r4, r3
 80039e6:	6838      	ldr	r0, [r7, #0]
 80039e8:	f7fc fd1e 	bl	8000428 <__aeabi_f2d>
 80039ec:	4602      	mov	r2, r0
 80039ee:	460b      	mov	r3, r1
 80039f0:	4620      	mov	r0, r4
 80039f2:	4629      	mov	r1, r5
 80039f4:	f7fc fd70 	bl	80004d8 <__aeabi_dmul>
 80039f8:	e02e      	b.n	8003a58 <ProcessADC+0x378>
 80039fa:	bf00      	nop
 80039fc:	f3af 8000 	nop.w
 8003a00:	ae147ae1 	.word	0xae147ae1
 8003a04:	3ff6e147 	.word	0x3ff6e147
 8003a08:	33333333 	.word	0x33333333
 8003a0c:	40113333 	.word	0x40113333
 8003a10:	00000000 	.word	0x00000000
 8003a14:	40affe00 	.word	0x40affe00
 8003a18:	d9e83e42 	.word	0xd9e83e42
 8003a1c:	40207aac 	.word	0x40207aac
 8003a20:	624dd2f2 	.word	0x624dd2f2
 8003a24:	40406810 	.word	0x40406810
 8003a28:	ba5e353f 	.word	0xba5e353f
 8003a2c:	404aac49 	.word	0x404aac49
 8003a30:	c6a7ef9e 	.word	0xc6a7ef9e
 8003a34:	4033174b 	.word	0x4033174b
 8003a38:	40533333 	.word	0x40533333
 8003a3c:	200012b4 	.word	0x200012b4
 8003a40:	457ff000 	.word	0x457ff000
 8003a44:	40390000 	.word	0x40390000
 8003a48:	20000778 	.word	0x20000778
 8003a4c:	42c80000 	.word	0x42c80000
 8003a50:	447a0000 	.word	0x447a0000
 8003a54:	200005f0 	.word	0x200005f0
 8003a58:	4603      	mov	r3, r0
 8003a5a:	460c      	mov	r4, r1
 8003a5c:	4625      	mov	r5, r4
 8003a5e:	461c      	mov	r4, r3
 8003a60:	6838      	ldr	r0, [r7, #0]
 8003a62:	f7fc fce1 	bl	8000428 <__aeabi_f2d>
 8003a66:	4602      	mov	r2, r0
 8003a68:	460b      	mov	r3, r1
 8003a6a:	4620      	mov	r0, r4
 8003a6c:	4629      	mov	r1, r5
 8003a6e:	f7fc fd33 	bl	80004d8 <__aeabi_dmul>
 8003a72:	4603      	mov	r3, r0
 8003a74:	460c      	mov	r4, r1
 8003a76:	4625      	mov	r5, r4
 8003a78:	461c      	mov	r4, r3
 8003a7a:	6838      	ldr	r0, [r7, #0]
 8003a7c:	f7fc fcd4 	bl	8000428 <__aeabi_f2d>
 8003a80:	a3c9      	add	r3, pc, #804	; (adr r3, 8003da8 <ProcessADC+0x6c8>)
 8003a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a86:	f7fc fd27 	bl	80004d8 <__aeabi_dmul>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	4690      	mov	r8, r2
 8003a90:	4699      	mov	r9, r3
 8003a92:	6838      	ldr	r0, [r7, #0]
 8003a94:	f7fc fcc8 	bl	8000428 <__aeabi_f2d>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	4640      	mov	r0, r8
 8003a9e:	4649      	mov	r1, r9
 8003aa0:	f7fc fd1a 	bl	80004d8 <__aeabi_dmul>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	4620      	mov	r0, r4
 8003aaa:	4629      	mov	r1, r5
 8003aac:	f7fc fb5c 	bl	8000168 <__aeabi_dsub>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	460c      	mov	r4, r1
 8003ab4:	4625      	mov	r5, r4
 8003ab6:	461c      	mov	r4, r3
 8003ab8:	6838      	ldr	r0, [r7, #0]
 8003aba:	f7fc fcb5 	bl	8000428 <__aeabi_f2d>
 8003abe:	a3bc      	add	r3, pc, #752	; (adr r3, 8003db0 <ProcessADC+0x6d0>)
 8003ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac4:	f7fc fd08 	bl	80004d8 <__aeabi_dmul>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	460b      	mov	r3, r1
 8003acc:	4620      	mov	r0, r4
 8003ace:	4629      	mov	r1, r5
 8003ad0:	f7fc fb4c 	bl	800016c <__adddf3>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	460c      	mov	r4, r1
 8003ad8:	4618      	mov	r0, r3
 8003ada:	4621      	mov	r1, r4
 8003adc:	a3b6      	add	r3, pc, #728	; (adr r3, 8003db8 <ProcessADC+0x6d8>)
 8003ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae2:	f7fc fb41 	bl	8000168 <__aeabi_dsub>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	460c      	mov	r4, r1
 8003aea:	4618      	mov	r0, r3
 8003aec:	4621      	mov	r1, r4
 8003aee:	f7fc ff05 	bl	80008fc <__aeabi_d2f>
 8003af2:	4603      	mov	r3, r0
 8003af4:	603b      	str	r3, [r7, #0]
	Channels.CH2 = temp*convertToMili;
 8003af6:	49b4      	ldr	r1, [pc, #720]	; (8003dc8 <ProcessADC+0x6e8>)
 8003af8:	6838      	ldr	r0, [r7, #0]
 8003afa:	f7fd f85d 	bl	8000bb8 <__aeabi_fmul>
 8003afe:	4603      	mov	r3, r0
 8003b00:	461a      	mov	r2, r3
 8003b02:	4bb2      	ldr	r3, [pc, #712]	; (8003dcc <ProcessADC+0x6ec>)
 8003b04:	615a      	str	r2, [r3, #20]
	if(ADCValues[4]>0)
 8003b06:	4bb2      	ldr	r3, [pc, #712]	; (8003dd0 <ProcessADC+0x6f0>)
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d004      	beq.n	8003b18 <ProcessADC+0x438>
	{
		ADCValues[4] = ADCValues[4] + 60;
 8003b0e:	4bb0      	ldr	r3, [pc, #704]	; (8003dd0 <ProcessADC+0x6f0>)
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	333c      	adds	r3, #60	; 0x3c
 8003b14:	4aae      	ldr	r2, [pc, #696]	; (8003dd0 <ProcessADC+0x6f0>)
 8003b16:	6113      	str	r3, [r2, #16]
	}
	temp = (float)ADCValues[4]*Vref/4095.0;
 8003b18:	4bad      	ldr	r3, [pc, #692]	; (8003dd0 <ProcessADC+0x6f0>)
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7fc fff3 	bl	8000b08 <__aeabi_ui2f>
 8003b22:	4603      	mov	r3, r0
 8003b24:	6879      	ldr	r1, [r7, #4]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7fd f846 	bl	8000bb8 <__aeabi_fmul>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	49a9      	ldr	r1, [pc, #676]	; (8003dd4 <ProcessADC+0x6f4>)
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7fd f8f5 	bl	8000d20 <__aeabi_fdiv>
 8003b36:	4603      	mov	r3, r0
 8003b38:	603b      	str	r3, [r7, #0]
	temp = ((8.2396 * temp * temp *temp) - (32.813 * temp *temp) + (53.346 * temp) - 19.091);
 8003b3a:	6838      	ldr	r0, [r7, #0]
 8003b3c:	f7fc fc74 	bl	8000428 <__aeabi_f2d>
 8003b40:	a39f      	add	r3, pc, #636	; (adr r3, 8003dc0 <ProcessADC+0x6e0>)
 8003b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b46:	f7fc fcc7 	bl	80004d8 <__aeabi_dmul>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	460c      	mov	r4, r1
 8003b4e:	4625      	mov	r5, r4
 8003b50:	461c      	mov	r4, r3
 8003b52:	6838      	ldr	r0, [r7, #0]
 8003b54:	f7fc fc68 	bl	8000428 <__aeabi_f2d>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	4620      	mov	r0, r4
 8003b5e:	4629      	mov	r1, r5
 8003b60:	f7fc fcba 	bl	80004d8 <__aeabi_dmul>
 8003b64:	4603      	mov	r3, r0
 8003b66:	460c      	mov	r4, r1
 8003b68:	4625      	mov	r5, r4
 8003b6a:	461c      	mov	r4, r3
 8003b6c:	6838      	ldr	r0, [r7, #0]
 8003b6e:	f7fc fc5b 	bl	8000428 <__aeabi_f2d>
 8003b72:	4602      	mov	r2, r0
 8003b74:	460b      	mov	r3, r1
 8003b76:	4620      	mov	r0, r4
 8003b78:	4629      	mov	r1, r5
 8003b7a:	f7fc fcad 	bl	80004d8 <__aeabi_dmul>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	460c      	mov	r4, r1
 8003b82:	4625      	mov	r5, r4
 8003b84:	461c      	mov	r4, r3
 8003b86:	6838      	ldr	r0, [r7, #0]
 8003b88:	f7fc fc4e 	bl	8000428 <__aeabi_f2d>
 8003b8c:	a386      	add	r3, pc, #536	; (adr r3, 8003da8 <ProcessADC+0x6c8>)
 8003b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b92:	f7fc fca1 	bl	80004d8 <__aeabi_dmul>
 8003b96:	4602      	mov	r2, r0
 8003b98:	460b      	mov	r3, r1
 8003b9a:	4690      	mov	r8, r2
 8003b9c:	4699      	mov	r9, r3
 8003b9e:	6838      	ldr	r0, [r7, #0]
 8003ba0:	f7fc fc42 	bl	8000428 <__aeabi_f2d>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	4640      	mov	r0, r8
 8003baa:	4649      	mov	r1, r9
 8003bac:	f7fc fc94 	bl	80004d8 <__aeabi_dmul>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	4620      	mov	r0, r4
 8003bb6:	4629      	mov	r1, r5
 8003bb8:	f7fc fad6 	bl	8000168 <__aeabi_dsub>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	460c      	mov	r4, r1
 8003bc0:	4625      	mov	r5, r4
 8003bc2:	461c      	mov	r4, r3
 8003bc4:	6838      	ldr	r0, [r7, #0]
 8003bc6:	f7fc fc2f 	bl	8000428 <__aeabi_f2d>
 8003bca:	a379      	add	r3, pc, #484	; (adr r3, 8003db0 <ProcessADC+0x6d0>)
 8003bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd0:	f7fc fc82 	bl	80004d8 <__aeabi_dmul>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	4620      	mov	r0, r4
 8003bda:	4629      	mov	r1, r5
 8003bdc:	f7fc fac6 	bl	800016c <__adddf3>
 8003be0:	4603      	mov	r3, r0
 8003be2:	460c      	mov	r4, r1
 8003be4:	4618      	mov	r0, r3
 8003be6:	4621      	mov	r1, r4
 8003be8:	a373      	add	r3, pc, #460	; (adr r3, 8003db8 <ProcessADC+0x6d8>)
 8003bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bee:	f7fc fabb 	bl	8000168 <__aeabi_dsub>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	460c      	mov	r4, r1
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	4621      	mov	r1, r4
 8003bfa:	f7fc fe7f 	bl	80008fc <__aeabi_d2f>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	603b      	str	r3, [r7, #0]
	Channels.CH3 = temp*convertToMili;
 8003c02:	4971      	ldr	r1, [pc, #452]	; (8003dc8 <ProcessADC+0x6e8>)
 8003c04:	6838      	ldr	r0, [r7, #0]
 8003c06:	f7fc ffd7 	bl	8000bb8 <__aeabi_fmul>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	4b6f      	ldr	r3, [pc, #444]	; (8003dcc <ProcessADC+0x6ec>)
 8003c10:	619a      	str	r2, [r3, #24]
	if(ADCValues[5]>0)
 8003c12:	4b6f      	ldr	r3, [pc, #444]	; (8003dd0 <ProcessADC+0x6f0>)
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d004      	beq.n	8003c24 <ProcessADC+0x544>
	{
		ADCValues[5] = ADCValues[5] + 60;
 8003c1a:	4b6d      	ldr	r3, [pc, #436]	; (8003dd0 <ProcessADC+0x6f0>)
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	333c      	adds	r3, #60	; 0x3c
 8003c20:	4a6b      	ldr	r2, [pc, #428]	; (8003dd0 <ProcessADC+0x6f0>)
 8003c22:	6153      	str	r3, [r2, #20]
	}
	temp = (float)ADCValues[5]*Vref/4095.0;
 8003c24:	4b6a      	ldr	r3, [pc, #424]	; (8003dd0 <ProcessADC+0x6f0>)
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7fc ff6d 	bl	8000b08 <__aeabi_ui2f>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	6879      	ldr	r1, [r7, #4]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7fc ffc0 	bl	8000bb8 <__aeabi_fmul>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	4966      	ldr	r1, [pc, #408]	; (8003dd4 <ProcessADC+0x6f4>)
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7fd f86f 	bl	8000d20 <__aeabi_fdiv>
 8003c42:	4603      	mov	r3, r0
 8003c44:	603b      	str	r3, [r7, #0]
	temp = ((8.2396 * temp * temp *temp) - (32.813 * temp *temp) + (53.346 * temp) - 19.091);
 8003c46:	6838      	ldr	r0, [r7, #0]
 8003c48:	f7fc fbee 	bl	8000428 <__aeabi_f2d>
 8003c4c:	a35c      	add	r3, pc, #368	; (adr r3, 8003dc0 <ProcessADC+0x6e0>)
 8003c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c52:	f7fc fc41 	bl	80004d8 <__aeabi_dmul>
 8003c56:	4603      	mov	r3, r0
 8003c58:	460c      	mov	r4, r1
 8003c5a:	4625      	mov	r5, r4
 8003c5c:	461c      	mov	r4, r3
 8003c5e:	6838      	ldr	r0, [r7, #0]
 8003c60:	f7fc fbe2 	bl	8000428 <__aeabi_f2d>
 8003c64:	4602      	mov	r2, r0
 8003c66:	460b      	mov	r3, r1
 8003c68:	4620      	mov	r0, r4
 8003c6a:	4629      	mov	r1, r5
 8003c6c:	f7fc fc34 	bl	80004d8 <__aeabi_dmul>
 8003c70:	4603      	mov	r3, r0
 8003c72:	460c      	mov	r4, r1
 8003c74:	4625      	mov	r5, r4
 8003c76:	461c      	mov	r4, r3
 8003c78:	6838      	ldr	r0, [r7, #0]
 8003c7a:	f7fc fbd5 	bl	8000428 <__aeabi_f2d>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	460b      	mov	r3, r1
 8003c82:	4620      	mov	r0, r4
 8003c84:	4629      	mov	r1, r5
 8003c86:	f7fc fc27 	bl	80004d8 <__aeabi_dmul>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	460c      	mov	r4, r1
 8003c8e:	4625      	mov	r5, r4
 8003c90:	461c      	mov	r4, r3
 8003c92:	6838      	ldr	r0, [r7, #0]
 8003c94:	f7fc fbc8 	bl	8000428 <__aeabi_f2d>
 8003c98:	a343      	add	r3, pc, #268	; (adr r3, 8003da8 <ProcessADC+0x6c8>)
 8003c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c9e:	f7fc fc1b 	bl	80004d8 <__aeabi_dmul>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	4690      	mov	r8, r2
 8003ca8:	4699      	mov	r9, r3
 8003caa:	6838      	ldr	r0, [r7, #0]
 8003cac:	f7fc fbbc 	bl	8000428 <__aeabi_f2d>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	4640      	mov	r0, r8
 8003cb6:	4649      	mov	r1, r9
 8003cb8:	f7fc fc0e 	bl	80004d8 <__aeabi_dmul>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4620      	mov	r0, r4
 8003cc2:	4629      	mov	r1, r5
 8003cc4:	f7fc fa50 	bl	8000168 <__aeabi_dsub>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	460c      	mov	r4, r1
 8003ccc:	4625      	mov	r5, r4
 8003cce:	461c      	mov	r4, r3
 8003cd0:	6838      	ldr	r0, [r7, #0]
 8003cd2:	f7fc fba9 	bl	8000428 <__aeabi_f2d>
 8003cd6:	a336      	add	r3, pc, #216	; (adr r3, 8003db0 <ProcessADC+0x6d0>)
 8003cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cdc:	f7fc fbfc 	bl	80004d8 <__aeabi_dmul>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	4620      	mov	r0, r4
 8003ce6:	4629      	mov	r1, r5
 8003ce8:	f7fc fa40 	bl	800016c <__adddf3>
 8003cec:	4603      	mov	r3, r0
 8003cee:	460c      	mov	r4, r1
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	4621      	mov	r1, r4
 8003cf4:	a330      	add	r3, pc, #192	; (adr r3, 8003db8 <ProcessADC+0x6d8>)
 8003cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfa:	f7fc fa35 	bl	8000168 <__aeabi_dsub>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	460c      	mov	r4, r1
 8003d02:	4618      	mov	r0, r3
 8003d04:	4621      	mov	r1, r4
 8003d06:	f7fc fdf9 	bl	80008fc <__aeabi_d2f>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	603b      	str	r3, [r7, #0]
	Channels.CH4 = temp*convertToMili;
 8003d0e:	492e      	ldr	r1, [pc, #184]	; (8003dc8 <ProcessADC+0x6e8>)
 8003d10:	6838      	ldr	r0, [r7, #0]
 8003d12:	f7fc ff51 	bl	8000bb8 <__aeabi_fmul>
 8003d16:	4603      	mov	r3, r0
 8003d18:	461a      	mov	r2, r3
 8003d1a:	4b2c      	ldr	r3, [pc, #176]	; (8003dcc <ProcessADC+0x6ec>)
 8003d1c:	61da      	str	r2, [r3, #28]
	if(ADCValues[6]>0)
 8003d1e:	4b2c      	ldr	r3, [pc, #176]	; (8003dd0 <ProcessADC+0x6f0>)
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d004      	beq.n	8003d30 <ProcessADC+0x650>
	{
		ADCValues[6] = ADCValues[6] + 60;
 8003d26:	4b2a      	ldr	r3, [pc, #168]	; (8003dd0 <ProcessADC+0x6f0>)
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	333c      	adds	r3, #60	; 0x3c
 8003d2c:	4a28      	ldr	r2, [pc, #160]	; (8003dd0 <ProcessADC+0x6f0>)
 8003d2e:	6193      	str	r3, [r2, #24]
	}
	temp = (float)ADCValues[6]*Vref/4095.0;
 8003d30:	4b27      	ldr	r3, [pc, #156]	; (8003dd0 <ProcessADC+0x6f0>)
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7fc fee7 	bl	8000b08 <__aeabi_ui2f>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	6879      	ldr	r1, [r7, #4]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7fc ff3a 	bl	8000bb8 <__aeabi_fmul>
 8003d44:	4603      	mov	r3, r0
 8003d46:	4923      	ldr	r1, [pc, #140]	; (8003dd4 <ProcessADC+0x6f4>)
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7fc ffe9 	bl	8000d20 <__aeabi_fdiv>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	603b      	str	r3, [r7, #0]
	temp = ((8.2396 * temp * temp *temp) - (32.813 * temp *temp) + (53.346 * temp) - 19.091);
 8003d52:	6838      	ldr	r0, [r7, #0]
 8003d54:	f7fc fb68 	bl	8000428 <__aeabi_f2d>
 8003d58:	a319      	add	r3, pc, #100	; (adr r3, 8003dc0 <ProcessADC+0x6e0>)
 8003d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d5e:	f7fc fbbb 	bl	80004d8 <__aeabi_dmul>
 8003d62:	4603      	mov	r3, r0
 8003d64:	460c      	mov	r4, r1
 8003d66:	4625      	mov	r5, r4
 8003d68:	461c      	mov	r4, r3
 8003d6a:	6838      	ldr	r0, [r7, #0]
 8003d6c:	f7fc fb5c 	bl	8000428 <__aeabi_f2d>
 8003d70:	4602      	mov	r2, r0
 8003d72:	460b      	mov	r3, r1
 8003d74:	4620      	mov	r0, r4
 8003d76:	4629      	mov	r1, r5
 8003d78:	f7fc fbae 	bl	80004d8 <__aeabi_dmul>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	460c      	mov	r4, r1
 8003d80:	4625      	mov	r5, r4
 8003d82:	461c      	mov	r4, r3
 8003d84:	6838      	ldr	r0, [r7, #0]
 8003d86:	f7fc fb4f 	bl	8000428 <__aeabi_f2d>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	4620      	mov	r0, r4
 8003d90:	4629      	mov	r1, r5
 8003d92:	f7fc fba1 	bl	80004d8 <__aeabi_dmul>
 8003d96:	4603      	mov	r3, r0
 8003d98:	460c      	mov	r4, r1
 8003d9a:	4625      	mov	r5, r4
 8003d9c:	461c      	mov	r4, r3
 8003d9e:	6838      	ldr	r0, [r7, #0]
 8003da0:	e01a      	b.n	8003dd8 <ProcessADC+0x6f8>
 8003da2:	bf00      	nop
 8003da4:	f3af 8000 	nop.w
 8003da8:	624dd2f2 	.word	0x624dd2f2
 8003dac:	40406810 	.word	0x40406810
 8003db0:	ba5e353f 	.word	0xba5e353f
 8003db4:	404aac49 	.word	0x404aac49
 8003db8:	c6a7ef9e 	.word	0xc6a7ef9e
 8003dbc:	4033174b 	.word	0x4033174b
 8003dc0:	d9e83e42 	.word	0xd9e83e42
 8003dc4:	40207aac 	.word	0x40207aac
 8003dc8:	447a0000 	.word	0x447a0000
 8003dcc:	20000778 	.word	0x20000778
 8003dd0:	200012b4 	.word	0x200012b4
 8003dd4:	457ff000 	.word	0x457ff000
 8003dd8:	f7fc fb26 	bl	8000428 <__aeabi_f2d>
 8003ddc:	a36c      	add	r3, pc, #432	; (adr r3, 8003f90 <ProcessADC+0x8b0>)
 8003dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de2:	f7fc fb79 	bl	80004d8 <__aeabi_dmul>
 8003de6:	4602      	mov	r2, r0
 8003de8:	460b      	mov	r3, r1
 8003dea:	4690      	mov	r8, r2
 8003dec:	4699      	mov	r9, r3
 8003dee:	6838      	ldr	r0, [r7, #0]
 8003df0:	f7fc fb1a 	bl	8000428 <__aeabi_f2d>
 8003df4:	4602      	mov	r2, r0
 8003df6:	460b      	mov	r3, r1
 8003df8:	4640      	mov	r0, r8
 8003dfa:	4649      	mov	r1, r9
 8003dfc:	f7fc fb6c 	bl	80004d8 <__aeabi_dmul>
 8003e00:	4602      	mov	r2, r0
 8003e02:	460b      	mov	r3, r1
 8003e04:	4620      	mov	r0, r4
 8003e06:	4629      	mov	r1, r5
 8003e08:	f7fc f9ae 	bl	8000168 <__aeabi_dsub>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	460c      	mov	r4, r1
 8003e10:	4625      	mov	r5, r4
 8003e12:	461c      	mov	r4, r3
 8003e14:	6838      	ldr	r0, [r7, #0]
 8003e16:	f7fc fb07 	bl	8000428 <__aeabi_f2d>
 8003e1a:	a35f      	add	r3, pc, #380	; (adr r3, 8003f98 <ProcessADC+0x8b8>)
 8003e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e20:	f7fc fb5a 	bl	80004d8 <__aeabi_dmul>
 8003e24:	4602      	mov	r2, r0
 8003e26:	460b      	mov	r3, r1
 8003e28:	4620      	mov	r0, r4
 8003e2a:	4629      	mov	r1, r5
 8003e2c:	f7fc f99e 	bl	800016c <__adddf3>
 8003e30:	4603      	mov	r3, r0
 8003e32:	460c      	mov	r4, r1
 8003e34:	4618      	mov	r0, r3
 8003e36:	4621      	mov	r1, r4
 8003e38:	a359      	add	r3, pc, #356	; (adr r3, 8003fa0 <ProcessADC+0x8c0>)
 8003e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e3e:	f7fc f993 	bl	8000168 <__aeabi_dsub>
 8003e42:	4603      	mov	r3, r0
 8003e44:	460c      	mov	r4, r1
 8003e46:	4618      	mov	r0, r3
 8003e48:	4621      	mov	r1, r4
 8003e4a:	f7fc fd57 	bl	80008fc <__aeabi_d2f>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	603b      	str	r3, [r7, #0]
	Channels.CH5 = temp*convertToMili;
 8003e52:	4957      	ldr	r1, [pc, #348]	; (8003fb0 <ProcessADC+0x8d0>)
 8003e54:	6838      	ldr	r0, [r7, #0]
 8003e56:	f7fc feaf 	bl	8000bb8 <__aeabi_fmul>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	4b55      	ldr	r3, [pc, #340]	; (8003fb4 <ProcessADC+0x8d4>)
 8003e60:	621a      	str	r2, [r3, #32]
	if(ADCValues[7]>0)
 8003e62:	4b55      	ldr	r3, [pc, #340]	; (8003fb8 <ProcessADC+0x8d8>)
 8003e64:	69db      	ldr	r3, [r3, #28]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	f000 8083 	beq.w	8003f72 <ProcessADC+0x892>
	{
		ADCValues[7] = ADCValues[7] + 60;
 8003e6c:	4b52      	ldr	r3, [pc, #328]	; (8003fb8 <ProcessADC+0x8d8>)
 8003e6e:	69db      	ldr	r3, [r3, #28]
 8003e70:	333c      	adds	r3, #60	; 0x3c
 8003e72:	4a51      	ldr	r2, [pc, #324]	; (8003fb8 <ProcessADC+0x8d8>)
 8003e74:	61d3      	str	r3, [r2, #28]
		temp = (float)ADCValues[7]*Vref/4095.0;
 8003e76:	4b50      	ldr	r3, [pc, #320]	; (8003fb8 <ProcessADC+0x8d8>)
 8003e78:	69db      	ldr	r3, [r3, #28]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7fc fe44 	bl	8000b08 <__aeabi_ui2f>
 8003e80:	4603      	mov	r3, r0
 8003e82:	6879      	ldr	r1, [r7, #4]
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7fc fe97 	bl	8000bb8 <__aeabi_fmul>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	494b      	ldr	r1, [pc, #300]	; (8003fbc <ProcessADC+0x8dc>)
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7fc ff46 	bl	8000d20 <__aeabi_fdiv>
 8003e94:	4603      	mov	r3, r0
 8003e96:	603b      	str	r3, [r7, #0]
		temp = ((8.2396 * temp * temp *temp) - (32.813 * temp *temp) + (53.346 * temp) - 19.091);
 8003e98:	6838      	ldr	r0, [r7, #0]
 8003e9a:	f7fc fac5 	bl	8000428 <__aeabi_f2d>
 8003e9e:	a342      	add	r3, pc, #264	; (adr r3, 8003fa8 <ProcessADC+0x8c8>)
 8003ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea4:	f7fc fb18 	bl	80004d8 <__aeabi_dmul>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	460c      	mov	r4, r1
 8003eac:	4625      	mov	r5, r4
 8003eae:	461c      	mov	r4, r3
 8003eb0:	6838      	ldr	r0, [r7, #0]
 8003eb2:	f7fc fab9 	bl	8000428 <__aeabi_f2d>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	460b      	mov	r3, r1
 8003eba:	4620      	mov	r0, r4
 8003ebc:	4629      	mov	r1, r5
 8003ebe:	f7fc fb0b 	bl	80004d8 <__aeabi_dmul>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	460c      	mov	r4, r1
 8003ec6:	4625      	mov	r5, r4
 8003ec8:	461c      	mov	r4, r3
 8003eca:	6838      	ldr	r0, [r7, #0]
 8003ecc:	f7fc faac 	bl	8000428 <__aeabi_f2d>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	4620      	mov	r0, r4
 8003ed6:	4629      	mov	r1, r5
 8003ed8:	f7fc fafe 	bl	80004d8 <__aeabi_dmul>
 8003edc:	4603      	mov	r3, r0
 8003ede:	460c      	mov	r4, r1
 8003ee0:	4625      	mov	r5, r4
 8003ee2:	461c      	mov	r4, r3
 8003ee4:	6838      	ldr	r0, [r7, #0]
 8003ee6:	f7fc fa9f 	bl	8000428 <__aeabi_f2d>
 8003eea:	a329      	add	r3, pc, #164	; (adr r3, 8003f90 <ProcessADC+0x8b0>)
 8003eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef0:	f7fc faf2 	bl	80004d8 <__aeabi_dmul>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	4690      	mov	r8, r2
 8003efa:	4699      	mov	r9, r3
 8003efc:	6838      	ldr	r0, [r7, #0]
 8003efe:	f7fc fa93 	bl	8000428 <__aeabi_f2d>
 8003f02:	4602      	mov	r2, r0
 8003f04:	460b      	mov	r3, r1
 8003f06:	4640      	mov	r0, r8
 8003f08:	4649      	mov	r1, r9
 8003f0a:	f7fc fae5 	bl	80004d8 <__aeabi_dmul>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	460b      	mov	r3, r1
 8003f12:	4620      	mov	r0, r4
 8003f14:	4629      	mov	r1, r5
 8003f16:	f7fc f927 	bl	8000168 <__aeabi_dsub>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	460c      	mov	r4, r1
 8003f1e:	4625      	mov	r5, r4
 8003f20:	461c      	mov	r4, r3
 8003f22:	6838      	ldr	r0, [r7, #0]
 8003f24:	f7fc fa80 	bl	8000428 <__aeabi_f2d>
 8003f28:	a31b      	add	r3, pc, #108	; (adr r3, 8003f98 <ProcessADC+0x8b8>)
 8003f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2e:	f7fc fad3 	bl	80004d8 <__aeabi_dmul>
 8003f32:	4602      	mov	r2, r0
 8003f34:	460b      	mov	r3, r1
 8003f36:	4620      	mov	r0, r4
 8003f38:	4629      	mov	r1, r5
 8003f3a:	f7fc f917 	bl	800016c <__adddf3>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	460c      	mov	r4, r1
 8003f42:	4618      	mov	r0, r3
 8003f44:	4621      	mov	r1, r4
 8003f46:	a316      	add	r3, pc, #88	; (adr r3, 8003fa0 <ProcessADC+0x8c0>)
 8003f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f4c:	f7fc f90c 	bl	8000168 <__aeabi_dsub>
 8003f50:	4603      	mov	r3, r0
 8003f52:	460c      	mov	r4, r1
 8003f54:	4618      	mov	r0, r3
 8003f56:	4621      	mov	r1, r4
 8003f58:	f7fc fcd0 	bl	80008fc <__aeabi_d2f>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	603b      	str	r3, [r7, #0]
		Channels.Vin = temp*convertToMili;
 8003f60:	4913      	ldr	r1, [pc, #76]	; (8003fb0 <ProcessADC+0x8d0>)
 8003f62:	6838      	ldr	r0, [r7, #0]
 8003f64:	f7fc fe28 	bl	8000bb8 <__aeabi_fmul>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	4b11      	ldr	r3, [pc, #68]	; (8003fb4 <ProcessADC+0x8d4>)
 8003f6e:	625a      	str	r2, [r3, #36]	; 0x24
 8003f70:	e003      	b.n	8003f7a <ProcessADC+0x89a>
	}
	else
	{
		Channels.Vin = 0;
 8003f72:	4b10      	ldr	r3, [pc, #64]	; (8003fb4 <ProcessADC+0x8d4>)
 8003f74:	f04f 0200 	mov.w	r2, #0
 8003f78:	625a      	str	r2, [r3, #36]	; 0x24
	Channels.CH2 = (float)ADCValues[3]*Vref/4095.0;
	Channels.CH3 = (float)ADCValues[4]*Vref/4095.0;
	Channels.CH4 = (float)ADCValues[5]*Vref/4095.0;
	Channels.CH5 = (float)ADCValues[6]*Vref/4095.0;
	#endif
	CalcProcents();
 8003f7a:	f7ff fb35 	bl	80035e8 <CalcProcents>
	ADCReady=false;
 8003f7e:	4b10      	ldr	r3, [pc, #64]	; (8003fc0 <ProcessADC+0x8e0>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	701a      	strb	r2, [r3, #0]
}
 8003f84:	bf00      	nop
 8003f86:	3708      	adds	r7, #8
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003f8e:	bf00      	nop
 8003f90:	624dd2f2 	.word	0x624dd2f2
 8003f94:	40406810 	.word	0x40406810
 8003f98:	ba5e353f 	.word	0xba5e353f
 8003f9c:	404aac49 	.word	0x404aac49
 8003fa0:	c6a7ef9e 	.word	0xc6a7ef9e
 8003fa4:	4033174b 	.word	0x4033174b
 8003fa8:	d9e83e42 	.word	0xd9e83e42
 8003fac:	40207aac 	.word	0x40207aac
 8003fb0:	447a0000 	.word	0x447a0000
 8003fb4:	20000778 	.word	0x20000778
 8003fb8:	200012b4 	.word	0x200012b4
 8003fbc:	457ff000 	.word	0x457ff000
 8003fc0:	20001328 	.word	0x20001328

08003fc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003fc8:	bf00      	nop
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bc80      	pop	{r7}
 8003fce:	4770      	bx	lr

08003fd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003fd6:	4b15      	ldr	r3, [pc, #84]	; (800402c <HAL_MspInit+0x5c>)
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	4a14      	ldr	r2, [pc, #80]	; (800402c <HAL_MspInit+0x5c>)
 8003fdc:	f043 0301 	orr.w	r3, r3, #1
 8003fe0:	6193      	str	r3, [r2, #24]
 8003fe2:	4b12      	ldr	r3, [pc, #72]	; (800402c <HAL_MspInit+0x5c>)
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	60bb      	str	r3, [r7, #8]
 8003fec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003fee:	4b0f      	ldr	r3, [pc, #60]	; (800402c <HAL_MspInit+0x5c>)
 8003ff0:	69db      	ldr	r3, [r3, #28]
 8003ff2:	4a0e      	ldr	r2, [pc, #56]	; (800402c <HAL_MspInit+0x5c>)
 8003ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ff8:	61d3      	str	r3, [r2, #28]
 8003ffa:	4b0c      	ldr	r3, [pc, #48]	; (800402c <HAL_MspInit+0x5c>)
 8003ffc:	69db      	ldr	r3, [r3, #28]
 8003ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004002:	607b      	str	r3, [r7, #4]
 8004004:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004006:	4b0a      	ldr	r3, [pc, #40]	; (8004030 <HAL_MspInit+0x60>)
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	60fb      	str	r3, [r7, #12]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004012:	60fb      	str	r3, [r7, #12]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800401a:	60fb      	str	r3, [r7, #12]
 800401c:	4a04      	ldr	r2, [pc, #16]	; (8004030 <HAL_MspInit+0x60>)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004022:	bf00      	nop
 8004024:	3714      	adds	r7, #20
 8004026:	46bd      	mov	sp, r7
 8004028:	bc80      	pop	{r7}
 800402a:	4770      	bx	lr
 800402c:	40021000 	.word	0x40021000
 8004030:	40010000 	.word	0x40010000

08004034 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b088      	sub	sp, #32
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800403c:	f107 0310 	add.w	r3, r7, #16
 8004040:	2200      	movs	r2, #0
 8004042:	601a      	str	r2, [r3, #0]
 8004044:	605a      	str	r2, [r3, #4]
 8004046:	609a      	str	r2, [r3, #8]
 8004048:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a2d      	ldr	r2, [pc, #180]	; (8004104 <HAL_ADC_MspInit+0xd0>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d152      	bne.n	80040fa <HAL_ADC_MspInit+0xc6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004054:	4b2c      	ldr	r3, [pc, #176]	; (8004108 <HAL_ADC_MspInit+0xd4>)
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	4a2b      	ldr	r2, [pc, #172]	; (8004108 <HAL_ADC_MspInit+0xd4>)
 800405a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800405e:	6193      	str	r3, [r2, #24]
 8004060:	4b29      	ldr	r3, [pc, #164]	; (8004108 <HAL_ADC_MspInit+0xd4>)
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004068:	60fb      	str	r3, [r7, #12]
 800406a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800406c:	4b26      	ldr	r3, [pc, #152]	; (8004108 <HAL_ADC_MspInit+0xd4>)
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	4a25      	ldr	r2, [pc, #148]	; (8004108 <HAL_ADC_MspInit+0xd4>)
 8004072:	f043 0304 	orr.w	r3, r3, #4
 8004076:	6193      	str	r3, [r2, #24]
 8004078:	4b23      	ldr	r3, [pc, #140]	; (8004108 <HAL_ADC_MspInit+0xd4>)
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	f003 0304 	and.w	r3, r3, #4
 8004080:	60bb      	str	r3, [r7, #8]
 8004082:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = FB1_Pin|FB2_Pin|CH1_Pin|CH2_Pin
 8004084:	23ff      	movs	r3, #255	; 0xff
 8004086:	613b      	str	r3, [r7, #16]
                          |CH3_Pin|CH4_Pin|CH5_Pin|Vin_MEAS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004088:	2303      	movs	r3, #3
 800408a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800408c:	f107 0310 	add.w	r3, r7, #16
 8004090:	4619      	mov	r1, r3
 8004092:	481e      	ldr	r0, [pc, #120]	; (800410c <HAL_ADC_MspInit+0xd8>)
 8004094:	f001 fdea 	bl	8005c6c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004098:	4b1d      	ldr	r3, [pc, #116]	; (8004110 <HAL_ADC_MspInit+0xdc>)
 800409a:	4a1e      	ldr	r2, [pc, #120]	; (8004114 <HAL_ADC_MspInit+0xe0>)
 800409c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800409e:	4b1c      	ldr	r3, [pc, #112]	; (8004110 <HAL_ADC_MspInit+0xdc>)
 80040a0:	2200      	movs	r2, #0
 80040a2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80040a4:	4b1a      	ldr	r3, [pc, #104]	; (8004110 <HAL_ADC_MspInit+0xdc>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80040aa:	4b19      	ldr	r3, [pc, #100]	; (8004110 <HAL_ADC_MspInit+0xdc>)
 80040ac:	2280      	movs	r2, #128	; 0x80
 80040ae:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80040b0:	4b17      	ldr	r3, [pc, #92]	; (8004110 <HAL_ADC_MspInit+0xdc>)
 80040b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040b6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80040b8:	4b15      	ldr	r3, [pc, #84]	; (8004110 <HAL_ADC_MspInit+0xdc>)
 80040ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040be:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80040c0:	4b13      	ldr	r3, [pc, #76]	; (8004110 <HAL_ADC_MspInit+0xdc>)
 80040c2:	2220      	movs	r2, #32
 80040c4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80040c6:	4b12      	ldr	r3, [pc, #72]	; (8004110 <HAL_ADC_MspInit+0xdc>)
 80040c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80040cc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80040ce:	4810      	ldr	r0, [pc, #64]	; (8004110 <HAL_ADC_MspInit+0xdc>)
 80040d0:	f001 fb68 	bl	80057a4 <HAL_DMA_Init>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 80040da:	f7ff ff73 	bl	8003fc4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a0b      	ldr	r2, [pc, #44]	; (8004110 <HAL_ADC_MspInit+0xdc>)
 80040e2:	621a      	str	r2, [r3, #32]
 80040e4:	4a0a      	ldr	r2, [pc, #40]	; (8004110 <HAL_ADC_MspInit+0xdc>)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80040ea:	2200      	movs	r2, #0
 80040ec:	2100      	movs	r1, #0
 80040ee:	2012      	movs	r0, #18
 80040f0:	f001 fb21 	bl	8005736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80040f4:	2012      	movs	r0, #18
 80040f6:	f001 fb3a 	bl	800576e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80040fa:	bf00      	nop
 80040fc:	3720      	adds	r7, #32
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	40012400 	.word	0x40012400
 8004108:	40021000 	.word	0x40021000
 800410c:	40010800 	.word	0x40010800
 8004110:	200012e0 	.word	0x200012e0
 8004114:	40020008 	.word	0x40020008

08004118 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b08a      	sub	sp, #40	; 0x28
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004120:	f107 0314 	add.w	r3, r7, #20
 8004124:	2200      	movs	r2, #0
 8004126:	601a      	str	r2, [r3, #0]
 8004128:	605a      	str	r2, [r3, #4]
 800412a:	609a      	str	r2, [r3, #8]
 800412c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a2d      	ldr	r2, [pc, #180]	; (80041e8 <HAL_CAN_MspInit+0xd0>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d153      	bne.n	80041e0 <HAL_CAN_MspInit+0xc8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004138:	4b2c      	ldr	r3, [pc, #176]	; (80041ec <HAL_CAN_MspInit+0xd4>)
 800413a:	69db      	ldr	r3, [r3, #28]
 800413c:	4a2b      	ldr	r2, [pc, #172]	; (80041ec <HAL_CAN_MspInit+0xd4>)
 800413e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004142:	61d3      	str	r3, [r2, #28]
 8004144:	4b29      	ldr	r3, [pc, #164]	; (80041ec <HAL_CAN_MspInit+0xd4>)
 8004146:	69db      	ldr	r3, [r3, #28]
 8004148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800414c:	613b      	str	r3, [r7, #16]
 800414e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004150:	4b26      	ldr	r3, [pc, #152]	; (80041ec <HAL_CAN_MspInit+0xd4>)
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	4a25      	ldr	r2, [pc, #148]	; (80041ec <HAL_CAN_MspInit+0xd4>)
 8004156:	f043 0308 	orr.w	r3, r3, #8
 800415a:	6193      	str	r3, [r2, #24]
 800415c:	4b23      	ldr	r3, [pc, #140]	; (80041ec <HAL_CAN_MspInit+0xd4>)
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	f003 0308 	and.w	r3, r3, #8
 8004164:	60fb      	str	r3, [r7, #12]
 8004166:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004168:	f44f 7380 	mov.w	r3, #256	; 0x100
 800416c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800416e:	2300      	movs	r3, #0
 8004170:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004172:	2300      	movs	r3, #0
 8004174:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004176:	f107 0314 	add.w	r3, r7, #20
 800417a:	4619      	mov	r1, r3
 800417c:	481c      	ldr	r0, [pc, #112]	; (80041f0 <HAL_CAN_MspInit+0xd8>)
 800417e:	f001 fd75 	bl	8005c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004182:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004186:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004188:	2302      	movs	r3, #2
 800418a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800418c:	2303      	movs	r3, #3
 800418e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004190:	f107 0314 	add.w	r3, r7, #20
 8004194:	4619      	mov	r1, r3
 8004196:	4816      	ldr	r0, [pc, #88]	; (80041f0 <HAL_CAN_MspInit+0xd8>)
 8004198:	f001 fd68 	bl	8005c6c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 800419c:	4b15      	ldr	r3, [pc, #84]	; (80041f4 <HAL_CAN_MspInit+0xdc>)
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	627b      	str	r3, [r7, #36]	; 0x24
 80041a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a4:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80041a8:	627b      	str	r3, [r7, #36]	; 0x24
 80041aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ac:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80041b0:	627b      	str	r3, [r7, #36]	; 0x24
 80041b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041b8:	627b      	str	r3, [r7, #36]	; 0x24
 80041ba:	4a0e      	ldr	r2, [pc, #56]	; (80041f4 <HAL_CAN_MspInit+0xdc>)
 80041bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041be:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 80041c0:	2200      	movs	r2, #0
 80041c2:	2100      	movs	r1, #0
 80041c4:	2013      	movs	r0, #19
 80041c6:	f001 fab6 	bl	8005736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 80041ca:	2013      	movs	r0, #19
 80041cc:	f001 facf 	bl	800576e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80041d0:	2200      	movs	r2, #0
 80041d2:	2100      	movs	r1, #0
 80041d4:	2014      	movs	r0, #20
 80041d6:	f001 faae 	bl	8005736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80041da:	2014      	movs	r0, #20
 80041dc:	f001 fac7 	bl	800576e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80041e0:	bf00      	nop
 80041e2:	3728      	adds	r7, #40	; 0x28
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	40006400 	.word	0x40006400
 80041ec:	40021000 	.word	0x40021000
 80041f0:	40010c00 	.word	0x40010c00
 80041f4:	40010000 	.word	0x40010000

080041f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b088      	sub	sp, #32
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004200:	f107 0310 	add.w	r3, r7, #16
 8004204:	2200      	movs	r2, #0
 8004206:	601a      	str	r2, [r3, #0]
 8004208:	605a      	str	r2, [r3, #4]
 800420a:	609a      	str	r2, [r3, #8]
 800420c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a16      	ldr	r2, [pc, #88]	; (800426c <HAL_I2C_MspInit+0x74>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d124      	bne.n	8004262 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004218:	4b15      	ldr	r3, [pc, #84]	; (8004270 <HAL_I2C_MspInit+0x78>)
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	4a14      	ldr	r2, [pc, #80]	; (8004270 <HAL_I2C_MspInit+0x78>)
 800421e:	f043 0308 	orr.w	r3, r3, #8
 8004222:	6193      	str	r3, [r2, #24]
 8004224:	4b12      	ldr	r3, [pc, #72]	; (8004270 <HAL_I2C_MspInit+0x78>)
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	f003 0308 	and.w	r3, r3, #8
 800422c:	60fb      	str	r3, [r7, #12]
 800422e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004230:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004234:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004236:	2312      	movs	r3, #18
 8004238:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800423a:	2303      	movs	r3, #3
 800423c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800423e:	f107 0310 	add.w	r3, r7, #16
 8004242:	4619      	mov	r1, r3
 8004244:	480b      	ldr	r0, [pc, #44]	; (8004274 <HAL_I2C_MspInit+0x7c>)
 8004246:	f001 fd11 	bl	8005c6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800424a:	4b09      	ldr	r3, [pc, #36]	; (8004270 <HAL_I2C_MspInit+0x78>)
 800424c:	69db      	ldr	r3, [r3, #28]
 800424e:	4a08      	ldr	r2, [pc, #32]	; (8004270 <HAL_I2C_MspInit+0x78>)
 8004250:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004254:	61d3      	str	r3, [r2, #28]
 8004256:	4b06      	ldr	r3, [pc, #24]	; (8004270 <HAL_I2C_MspInit+0x78>)
 8004258:	69db      	ldr	r3, [r3, #28]
 800425a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800425e:	60bb      	str	r3, [r7, #8]
 8004260:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004262:	bf00      	nop
 8004264:	3720      	adds	r7, #32
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	40005800 	.word	0x40005800
 8004270:	40021000 	.word	0x40021000
 8004274:	40010c00 	.word	0x40010c00

08004278 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b088      	sub	sp, #32
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004280:	f107 0310 	add.w	r3, r7, #16
 8004284:	2200      	movs	r2, #0
 8004286:	601a      	str	r2, [r3, #0]
 8004288:	605a      	str	r2, [r3, #4]
 800428a:	609a      	str	r2, [r3, #8]
 800428c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a20      	ldr	r2, [pc, #128]	; (8004314 <HAL_SPI_MspInit+0x9c>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d139      	bne.n	800430c <HAL_SPI_MspInit+0x94>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004298:	4b1f      	ldr	r3, [pc, #124]	; (8004318 <HAL_SPI_MspInit+0xa0>)
 800429a:	69db      	ldr	r3, [r3, #28]
 800429c:	4a1e      	ldr	r2, [pc, #120]	; (8004318 <HAL_SPI_MspInit+0xa0>)
 800429e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042a2:	61d3      	str	r3, [r2, #28]
 80042a4:	4b1c      	ldr	r3, [pc, #112]	; (8004318 <HAL_SPI_MspInit+0xa0>)
 80042a6:	69db      	ldr	r3, [r3, #28]
 80042a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042ac:	60fb      	str	r3, [r7, #12]
 80042ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042b0:	4b19      	ldr	r3, [pc, #100]	; (8004318 <HAL_SPI_MspInit+0xa0>)
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	4a18      	ldr	r2, [pc, #96]	; (8004318 <HAL_SPI_MspInit+0xa0>)
 80042b6:	f043 0308 	orr.w	r3, r3, #8
 80042ba:	6193      	str	r3, [r2, #24]
 80042bc:	4b16      	ldr	r3, [pc, #88]	; (8004318 <HAL_SPI_MspInit+0xa0>)
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	f003 0308 	and.w	r3, r3, #8
 80042c4:	60bb      	str	r3, [r7, #8]
 80042c6:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80042c8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80042cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ce:	2302      	movs	r3, #2
 80042d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80042d2:	2303      	movs	r3, #3
 80042d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042d6:	f107 0310 	add.w	r3, r7, #16
 80042da:	4619      	mov	r1, r3
 80042dc:	480f      	ldr	r0, [pc, #60]	; (800431c <HAL_SPI_MspInit+0xa4>)
 80042de:	f001 fcc5 	bl	8005c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80042e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80042e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80042e8:	2300      	movs	r3, #0
 80042ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80042ec:	2301      	movs	r3, #1
 80042ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042f0:	f107 0310 	add.w	r3, r7, #16
 80042f4:	4619      	mov	r1, r3
 80042f6:	4809      	ldr	r0, [pc, #36]	; (800431c <HAL_SPI_MspInit+0xa4>)
 80042f8:	f001 fcb8 	bl	8005c6c <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80042fc:	2200      	movs	r2, #0
 80042fe:	2100      	movs	r1, #0
 8004300:	2024      	movs	r0, #36	; 0x24
 8004302:	f001 fa18 	bl	8005736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004306:	2024      	movs	r0, #36	; 0x24
 8004308:	f001 fa31 	bl	800576e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800430c:	bf00      	nop
 800430e:	3720      	adds	r7, #32
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	40003800 	.word	0x40003800
 8004318:	40021000 	.word	0x40021000
 800431c:	40010c00 	.word	0x40010c00

08004320 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004320:	b480      	push	{r7}
 8004322:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004324:	bf00      	nop
 8004326:	46bd      	mov	sp, r7
 8004328:	bc80      	pop	{r7}
 800432a:	4770      	bx	lr

0800432c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800432c:	b480      	push	{r7}
 800432e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004330:	e7fe      	b.n	8004330 <HardFault_Handler+0x4>

08004332 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004332:	b480      	push	{r7}
 8004334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004336:	e7fe      	b.n	8004336 <MemManage_Handler+0x4>

08004338 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004338:	b480      	push	{r7}
 800433a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800433c:	e7fe      	b.n	800433c <BusFault_Handler+0x4>

0800433e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800433e:	b480      	push	{r7}
 8004340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004342:	e7fe      	b.n	8004342 <UsageFault_Handler+0x4>

08004344 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004344:	b480      	push	{r7}
 8004346:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004348:	bf00      	nop
 800434a:	46bd      	mov	sp, r7
 800434c:	bc80      	pop	{r7}
 800434e:	4770      	bx	lr

08004350 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004350:	b480      	push	{r7}
 8004352:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004354:	bf00      	nop
 8004356:	46bd      	mov	sp, r7
 8004358:	bc80      	pop	{r7}
 800435a:	4770      	bx	lr

0800435c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800435c:	b480      	push	{r7}
 800435e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004360:	bf00      	nop
 8004362:	46bd      	mov	sp, r7
 8004364:	bc80      	pop	{r7}
 8004366:	4770      	bx	lr

08004368 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800436c:	f000 f91c 	bl	80045a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  SysTickEvent();
 8004370:	f7ff f928 	bl	80035c4 <SysTickEvent>
  /* USER CODE END SysTick_IRQn 1 */
}
 8004374:	bf00      	nop
 8004376:	bd80      	pop	{r7, pc}

08004378 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800437c:	4803      	ldr	r0, [pc, #12]	; (800438c <DMA1_Channel1_IRQHandler+0x14>)
 800437e:	f001 fb41 	bl	8005a04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
  //DMA1->IFCR|=1;
  /*if ( HAL_DMA_GetState( &hdma_adc1 ) == HAL_DMA_STATE_READY )
  {*/
	  ADC_Interrupt_Handler();
 8004382:	f7ff f925 	bl	80035d0 <ADC_Interrupt_Handler>
  //}
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004386:	bf00      	nop
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	200012e0 	.word	0x200012e0

08004390 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004394:	4802      	ldr	r0, [pc, #8]	; (80043a0 <ADC1_2_IRQHandler+0x10>)
 8004396:	f000 fafb 	bl	8004990 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800439a:	bf00      	nop
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	20001280 	.word	0x20001280

080043a4 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80043a8:	4803      	ldr	r0, [pc, #12]	; (80043b8 <USB_HP_CAN1_TX_IRQHandler+0x14>)
 80043aa:	f000 fec7 	bl	800513c <HAL_CAN_IRQHandler>
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80043ae:	4803      	ldr	r0, [pc, #12]	; (80043bc <USB_HP_CAN1_TX_IRQHandler+0x18>)
 80043b0:	f002 f85d 	bl	800646e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 80043b4:	bf00      	nop
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	20001258 	.word	0x20001258
 80043bc:	20001820 	.word	0x20001820

080043c0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80043c4:	4805      	ldr	r0, [pc, #20]	; (80043dc <USB_LP_CAN1_RX0_IRQHandler+0x1c>)
 80043c6:	f000 feb9 	bl	800513c <HAL_CAN_IRQHandler>
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80043ca:	4805      	ldr	r0, [pc, #20]	; (80043e0 <USB_LP_CAN1_RX0_IRQHandler+0x20>)
 80043cc:	f002 f84f 	bl	800646e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */
  CDC_RX_IRQ_Handler(&hUsbDeviceFS);
 80043d0:	4804      	ldr	r0, [pc, #16]	; (80043e4 <USB_LP_CAN1_RX0_IRQHandler+0x24>)
 80043d2:	f7ff f883 	bl	80034dc <CDC_RX_IRQ_Handler>
  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80043d6:	bf00      	nop
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	20001258 	.word	0x20001258
 80043e0:	20001820 	.word	0x20001820
 80043e4:	20001330 	.word	0x20001330

080043e8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80043ec:	4802      	ldr	r0, [pc, #8]	; (80043f8 <SPI2_IRQHandler+0x10>)
 80043ee:	f003 fcdd 	bl	8007dac <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80043f2:	bf00      	nop
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	20000598 	.word	0x20000598

080043fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004404:	4a14      	ldr	r2, [pc, #80]	; (8004458 <_sbrk+0x5c>)
 8004406:	4b15      	ldr	r3, [pc, #84]	; (800445c <_sbrk+0x60>)
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004410:	4b13      	ldr	r3, [pc, #76]	; (8004460 <_sbrk+0x64>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d102      	bne.n	800441e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004418:	4b11      	ldr	r3, [pc, #68]	; (8004460 <_sbrk+0x64>)
 800441a:	4a12      	ldr	r2, [pc, #72]	; (8004464 <_sbrk+0x68>)
 800441c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800441e:	4b10      	ldr	r3, [pc, #64]	; (8004460 <_sbrk+0x64>)
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4413      	add	r3, r2
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	429a      	cmp	r2, r3
 800442a:	d207      	bcs.n	800443c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800442c:	f006 ff98 	bl	800b360 <__errno>
 8004430:	4602      	mov	r2, r0
 8004432:	230c      	movs	r3, #12
 8004434:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8004436:	f04f 33ff 	mov.w	r3, #4294967295
 800443a:	e009      	b.n	8004450 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800443c:	4b08      	ldr	r3, [pc, #32]	; (8004460 <_sbrk+0x64>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004442:	4b07      	ldr	r3, [pc, #28]	; (8004460 <_sbrk+0x64>)
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4413      	add	r3, r2
 800444a:	4a05      	ldr	r2, [pc, #20]	; (8004460 <_sbrk+0x64>)
 800444c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800444e:	68fb      	ldr	r3, [r7, #12]
}
 8004450:	4618      	mov	r0, r3
 8004452:	3718      	adds	r7, #24
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	20005000 	.word	0x20005000
 800445c:	00000600 	.word	0x00000600
 8004460:	20000368 	.word	0x20000368
 8004464:	20001a90 	.word	0x20001a90

08004468 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004468:	b480      	push	{r7}
 800446a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800446c:	4b15      	ldr	r3, [pc, #84]	; (80044c4 <SystemInit+0x5c>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a14      	ldr	r2, [pc, #80]	; (80044c4 <SystemInit+0x5c>)
 8004472:	f043 0301 	orr.w	r3, r3, #1
 8004476:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8004478:	4b12      	ldr	r3, [pc, #72]	; (80044c4 <SystemInit+0x5c>)
 800447a:	685a      	ldr	r2, [r3, #4]
 800447c:	4911      	ldr	r1, [pc, #68]	; (80044c4 <SystemInit+0x5c>)
 800447e:	4b12      	ldr	r3, [pc, #72]	; (80044c8 <SystemInit+0x60>)
 8004480:	4013      	ands	r3, r2
 8004482:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004484:	4b0f      	ldr	r3, [pc, #60]	; (80044c4 <SystemInit+0x5c>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a0e      	ldr	r2, [pc, #56]	; (80044c4 <SystemInit+0x5c>)
 800448a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800448e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004492:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004494:	4b0b      	ldr	r3, [pc, #44]	; (80044c4 <SystemInit+0x5c>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a0a      	ldr	r2, [pc, #40]	; (80044c4 <SystemInit+0x5c>)
 800449a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800449e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80044a0:	4b08      	ldr	r3, [pc, #32]	; (80044c4 <SystemInit+0x5c>)
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	4a07      	ldr	r2, [pc, #28]	; (80044c4 <SystemInit+0x5c>)
 80044a6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80044aa:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80044ac:	4b05      	ldr	r3, [pc, #20]	; (80044c4 <SystemInit+0x5c>)
 80044ae:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80044b2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80044b4:	4b05      	ldr	r3, [pc, #20]	; (80044cc <SystemInit+0x64>)
 80044b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80044ba:	609a      	str	r2, [r3, #8]
#endif 
}
 80044bc:	bf00      	nop
 80044be:	46bd      	mov	sp, r7
 80044c0:	bc80      	pop	{r7}
 80044c2:	4770      	bx	lr
 80044c4:	40021000 	.word	0x40021000
 80044c8:	f8ff0000 	.word	0xf8ff0000
 80044cc:	e000ed00 	.word	0xe000ed00

080044d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80044d0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80044d2:	e003      	b.n	80044dc <LoopCopyDataInit>

080044d4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80044d4:	4b0b      	ldr	r3, [pc, #44]	; (8004504 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80044d6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80044d8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80044da:	3104      	adds	r1, #4

080044dc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80044dc:	480a      	ldr	r0, [pc, #40]	; (8004508 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80044de:	4b0b      	ldr	r3, [pc, #44]	; (800450c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80044e0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80044e2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80044e4:	d3f6      	bcc.n	80044d4 <CopyDataInit>
  ldr r2, =_sbss
 80044e6:	4a0a      	ldr	r2, [pc, #40]	; (8004510 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80044e8:	e002      	b.n	80044f0 <LoopFillZerobss>

080044ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80044ea:	2300      	movs	r3, #0
  str r3, [r2], #4
 80044ec:	f842 3b04 	str.w	r3, [r2], #4

080044f0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80044f0:	4b08      	ldr	r3, [pc, #32]	; (8004514 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80044f2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80044f4:	d3f9      	bcc.n	80044ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80044f6:	f7ff ffb7 	bl	8004468 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80044fa:	f006 ff37 	bl	800b36c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80044fe:	f7fe fce3 	bl	8002ec8 <main>
  bx lr
 8004502:	4770      	bx	lr
  ldr r3, =_sidata
 8004504:	0800c5b8 	.word	0x0800c5b8
  ldr r0, =_sdata
 8004508:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800450c:	2000034c 	.word	0x2000034c
  ldr r2, =_sbss
 8004510:	2000034c 	.word	0x2000034c
  ldr r3, = _ebss
 8004514:	20001a90 	.word	0x20001a90

08004518 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004518:	e7fe      	b.n	8004518 <CAN1_RX1_IRQHandler>
	...

0800451c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004520:	4b08      	ldr	r3, [pc, #32]	; (8004544 <HAL_Init+0x28>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a07      	ldr	r2, [pc, #28]	; (8004544 <HAL_Init+0x28>)
 8004526:	f043 0310 	orr.w	r3, r3, #16
 800452a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800452c:	2003      	movs	r0, #3
 800452e:	f001 f8f7 	bl	8005720 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004532:	2000      	movs	r0, #0
 8004534:	f000 f808 	bl	8004548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004538:	f7ff fd4a 	bl	8003fd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	40022000 	.word	0x40022000

08004548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004550:	4b12      	ldr	r3, [pc, #72]	; (800459c <HAL_InitTick+0x54>)
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	4b12      	ldr	r3, [pc, #72]	; (80045a0 <HAL_InitTick+0x58>)
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	4619      	mov	r1, r3
 800455a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800455e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004562:	fbb2 f3f3 	udiv	r3, r2, r3
 8004566:	4618      	mov	r0, r3
 8004568:	f001 f90f 	bl	800578a <HAL_SYSTICK_Config>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d001      	beq.n	8004576 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e00e      	b.n	8004594 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2b0f      	cmp	r3, #15
 800457a:	d80a      	bhi.n	8004592 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800457c:	2200      	movs	r2, #0
 800457e:	6879      	ldr	r1, [r7, #4]
 8004580:	f04f 30ff 	mov.w	r0, #4294967295
 8004584:	f001 f8d7 	bl	8005736 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004588:	4a06      	ldr	r2, [pc, #24]	; (80045a4 <HAL_InitTick+0x5c>)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800458e:	2300      	movs	r3, #0
 8004590:	e000      	b.n	8004594 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
}
 8004594:	4618      	mov	r0, r3
 8004596:	3708      	adds	r7, #8
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}
 800459c:	20000000 	.word	0x20000000
 80045a0:	20000008 	.word	0x20000008
 80045a4:	20000004 	.word	0x20000004

080045a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80045a8:	b480      	push	{r7}
 80045aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80045ac:	4b05      	ldr	r3, [pc, #20]	; (80045c4 <HAL_IncTick+0x1c>)
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	461a      	mov	r2, r3
 80045b2:	4b05      	ldr	r3, [pc, #20]	; (80045c8 <HAL_IncTick+0x20>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4413      	add	r3, r2
 80045b8:	4a03      	ldr	r2, [pc, #12]	; (80045c8 <HAL_IncTick+0x20>)
 80045ba:	6013      	str	r3, [r2, #0]
}
 80045bc:	bf00      	nop
 80045be:	46bd      	mov	sp, r7
 80045c0:	bc80      	pop	{r7}
 80045c2:	4770      	bx	lr
 80045c4:	20000008 	.word	0x20000008
 80045c8:	2000132c 	.word	0x2000132c

080045cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045cc:	b480      	push	{r7}
 80045ce:	af00      	add	r7, sp, #0
  return uwTick;
 80045d0:	4b02      	ldr	r3, [pc, #8]	; (80045dc <HAL_GetTick+0x10>)
 80045d2:	681b      	ldr	r3, [r3, #0]
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bc80      	pop	{r7}
 80045da:	4770      	bx	lr
 80045dc:	2000132c 	.word	0x2000132c

080045e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80045e8:	f7ff fff0 	bl	80045cc <HAL_GetTick>
 80045ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f8:	d005      	beq.n	8004606 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80045fa:	4b09      	ldr	r3, [pc, #36]	; (8004620 <HAL_Delay+0x40>)
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	461a      	mov	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	4413      	add	r3, r2
 8004604:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004606:	bf00      	nop
 8004608:	f7ff ffe0 	bl	80045cc <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	429a      	cmp	r2, r3
 8004616:	d8f7      	bhi.n	8004608 <HAL_Delay+0x28>
  {
  }
}
 8004618:	bf00      	nop
 800461a:	3710      	adds	r7, #16
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	20000008 	.word	0x20000008

08004624 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b086      	sub	sp, #24
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800462c:	2300      	movs	r3, #0
 800462e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004630:	2300      	movs	r3, #0
 8004632:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004634:	2300      	movs	r3, #0
 8004636:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004638:	2300      	movs	r3, #0
 800463a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d101      	bne.n	8004646 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e0be      	b.n	80047c4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004650:	2b00      	cmp	r3, #0
 8004652:	d109      	bne.n	8004668 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f7ff fce6 	bl	8004034 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 fbc3 	bl	8004df4 <ADC_ConversionStop_Disable>
 800466e:	4603      	mov	r3, r0
 8004670:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004676:	f003 0310 	and.w	r3, r3, #16
 800467a:	2b00      	cmp	r3, #0
 800467c:	f040 8099 	bne.w	80047b2 <HAL_ADC_Init+0x18e>
 8004680:	7dfb      	ldrb	r3, [r7, #23]
 8004682:	2b00      	cmp	r3, #0
 8004684:	f040 8095 	bne.w	80047b2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004690:	f023 0302 	bic.w	r3, r3, #2
 8004694:	f043 0202 	orr.w	r2, r3, #2
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80046a4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	7b1b      	ldrb	r3, [r3, #12]
 80046aa:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80046ac:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046bc:	d003      	beq.n	80046c6 <HAL_ADC_Init+0xa2>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d102      	bne.n	80046cc <HAL_ADC_Init+0xa8>
 80046c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80046ca:	e000      	b.n	80046ce <HAL_ADC_Init+0xaa>
 80046cc:	2300      	movs	r3, #0
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	7d1b      	ldrb	r3, [r3, #20]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d119      	bne.n	8004710 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	7b1b      	ldrb	r3, [r3, #12]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d109      	bne.n	80046f8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	3b01      	subs	r3, #1
 80046ea:	035a      	lsls	r2, r3, #13
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80046f4:	613b      	str	r3, [r7, #16]
 80046f6:	e00b      	b.n	8004710 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fc:	f043 0220 	orr.w	r2, r3, #32
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004708:	f043 0201 	orr.w	r2, r3, #1
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	430a      	orrs	r2, r1
 8004722:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	689a      	ldr	r2, [r3, #8]
 800472a:	4b28      	ldr	r3, [pc, #160]	; (80047cc <HAL_ADC_Init+0x1a8>)
 800472c:	4013      	ands	r3, r2
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	6812      	ldr	r2, [r2, #0]
 8004732:	68b9      	ldr	r1, [r7, #8]
 8004734:	430b      	orrs	r3, r1
 8004736:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004740:	d003      	beq.n	800474a <HAL_ADC_Init+0x126>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d104      	bne.n	8004754 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	3b01      	subs	r3, #1
 8004750:	051b      	lsls	r3, r3, #20
 8004752:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	430a      	orrs	r2, r1
 8004766:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	689a      	ldr	r2, [r3, #8]
 800476e:	4b18      	ldr	r3, [pc, #96]	; (80047d0 <HAL_ADC_Init+0x1ac>)
 8004770:	4013      	ands	r3, r2
 8004772:	68ba      	ldr	r2, [r7, #8]
 8004774:	429a      	cmp	r2, r3
 8004776:	d10b      	bne.n	8004790 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004782:	f023 0303 	bic.w	r3, r3, #3
 8004786:	f043 0201 	orr.w	r2, r3, #1
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800478e:	e018      	b.n	80047c2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004794:	f023 0312 	bic.w	r3, r3, #18
 8004798:	f043 0210 	orr.w	r2, r3, #16
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a4:	f043 0201 	orr.w	r2, r3, #1
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80047b0:	e007      	b.n	80047c2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b6:	f043 0210 	orr.w	r2, r3, #16
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80047c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3718      	adds	r7, #24
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	ffe1f7fd 	.word	0xffe1f7fd
 80047d0:	ff1f0efe 	.word	0xff1f0efe

080047d4 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b086      	sub	sp, #24
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047e0:	2300      	movs	r3, #0
 80047e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a64      	ldr	r2, [pc, #400]	; (800497c <HAL_ADC_Start_DMA+0x1a8>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d004      	beq.n	80047f8 <HAL_ADC_Start_DMA+0x24>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a63      	ldr	r2, [pc, #396]	; (8004980 <HAL_ADC_Start_DMA+0x1ac>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d106      	bne.n	8004806 <HAL_ADC_Start_DMA+0x32>
 80047f8:	4b60      	ldr	r3, [pc, #384]	; (800497c <HAL_ADC_Start_DMA+0x1a8>)
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004800:	2b00      	cmp	r3, #0
 8004802:	f040 80b3 	bne.w	800496c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800480c:	2b01      	cmp	r3, #1
 800480e:	d101      	bne.n	8004814 <HAL_ADC_Start_DMA+0x40>
 8004810:	2302      	movs	r3, #2
 8004812:	e0ae      	b.n	8004972 <HAL_ADC_Start_DMA+0x19e>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f000 fa97 	bl	8004d50 <ADC_Enable>
 8004822:	4603      	mov	r3, r0
 8004824:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004826:	7dfb      	ldrb	r3, [r7, #23]
 8004828:	2b00      	cmp	r3, #0
 800482a:	f040 809a 	bne.w	8004962 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004832:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004836:	f023 0301 	bic.w	r3, r3, #1
 800483a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a4e      	ldr	r2, [pc, #312]	; (8004980 <HAL_ADC_Start_DMA+0x1ac>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d105      	bne.n	8004858 <HAL_ADC_Start_DMA+0x84>
 800484c:	4b4b      	ldr	r3, [pc, #300]	; (800497c <HAL_ADC_Start_DMA+0x1a8>)
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d115      	bne.n	8004884 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800485c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800486e:	2b00      	cmp	r3, #0
 8004870:	d026      	beq.n	80048c0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004876:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800487a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004882:	e01d      	b.n	80048c0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004888:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a39      	ldr	r2, [pc, #228]	; (800497c <HAL_ADC_Start_DMA+0x1a8>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d004      	beq.n	80048a4 <HAL_ADC_Start_DMA+0xd0>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a38      	ldr	r2, [pc, #224]	; (8004980 <HAL_ADC_Start_DMA+0x1ac>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d10d      	bne.n	80048c0 <HAL_ADC_Start_DMA+0xec>
 80048a4:	4b35      	ldr	r3, [pc, #212]	; (800497c <HAL_ADC_Start_DMA+0x1a8>)
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d007      	beq.n	80048c0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80048b8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d006      	beq.n	80048da <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d0:	f023 0206 	bic.w	r2, r3, #6
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80048d8:	e002      	b.n	80048e0 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6a1b      	ldr	r3, [r3, #32]
 80048ec:	4a25      	ldr	r2, [pc, #148]	; (8004984 <HAL_ADC_Start_DMA+0x1b0>)
 80048ee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6a1b      	ldr	r3, [r3, #32]
 80048f4:	4a24      	ldr	r2, [pc, #144]	; (8004988 <HAL_ADC_Start_DMA+0x1b4>)
 80048f6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6a1b      	ldr	r3, [r3, #32]
 80048fc:	4a23      	ldr	r2, [pc, #140]	; (800498c <HAL_ADC_Start_DMA+0x1b8>)
 80048fe:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f06f 0202 	mvn.w	r2, #2
 8004908:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004918:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6a18      	ldr	r0, [r3, #32]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	334c      	adds	r3, #76	; 0x4c
 8004924:	4619      	mov	r1, r3
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f000 ff95 	bl	8005858 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004938:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800493c:	d108      	bne.n	8004950 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	689a      	ldr	r2, [r3, #8]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800494c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800494e:	e00f      	b.n	8004970 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	689a      	ldr	r2, [r3, #8]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800495e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8004960:	e006      	b.n	8004970 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800496a:	e001      	b.n	8004970 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004970:	7dfb      	ldrb	r3, [r7, #23]
}
 8004972:	4618      	mov	r0, r3
 8004974:	3718      	adds	r7, #24
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	40012400 	.word	0x40012400
 8004980:	40012800 	.word	0x40012800
 8004984:	08004e69 	.word	0x08004e69
 8004988:	08004ee5 	.word	0x08004ee5
 800498c:	08004f01 	.word	0x08004f01

08004990 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f003 0320 	and.w	r3, r3, #32
 80049a2:	2b20      	cmp	r3, #32
 80049a4:	d140      	bne.n	8004a28 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0302 	and.w	r3, r3, #2
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d139      	bne.n	8004a28 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b8:	f003 0310 	and.w	r3, r3, #16
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d105      	bne.n	80049cc <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80049d6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80049da:	d11d      	bne.n	8004a18 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d119      	bne.n	8004a18 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	685a      	ldr	r2, [r3, #4]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f022 0220 	bic.w	r2, r2, #32
 80049f2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d105      	bne.n	8004a18 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a10:	f043 0201 	orr.w	r2, r3, #1
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 f87c 	bl	8004b16 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f06f 0212 	mvn.w	r2, #18
 8004a26:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a32:	2b80      	cmp	r3, #128	; 0x80
 8004a34:	d14f      	bne.n	8004ad6 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0304 	and.w	r3, r3, #4
 8004a40:	2b04      	cmp	r3, #4
 8004a42:	d148      	bne.n	8004ad6 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a48:	f003 0310 	and.w	r3, r3, #16
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d105      	bne.n	8004a5c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a54:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004a66:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8004a6a:	d012      	beq.n	8004a92 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d125      	bne.n	8004ac6 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8004a84:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004a88:	d11d      	bne.n	8004ac6 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d119      	bne.n	8004ac6 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	685a      	ldr	r2, [r3, #4]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004aa0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d105      	bne.n	8004ac6 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004abe:	f043 0201 	orr.w	r2, r3, #1
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 fa34 	bl	8004f34 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f06f 020c 	mvn.w	r2, #12
 8004ad4:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae0:	2b40      	cmp	r3, #64	; 0x40
 8004ae2:	d114      	bne.n	8004b0e <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d10d      	bne.n	8004b0e <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 f81b 	bl	8004b3a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f06f 0201 	mvn.w	r2, #1
 8004b0c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8004b0e:	bf00      	nop
 8004b10:	3708      	adds	r7, #8
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b083      	sub	sp, #12
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004b1e:	bf00      	nop
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bc80      	pop	{r7}
 8004b26:	4770      	bx	lr

08004b28 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bc80      	pop	{r7}
 8004b38:	4770      	bx	lr

08004b3a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b083      	sub	sp, #12
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004b42:	bf00      	nop
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bc80      	pop	{r7}
 8004b4a:	4770      	bx	lr

08004b4c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004b54:	bf00      	nop
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bc80      	pop	{r7}
 8004b5c:	4770      	bx	lr
	...

08004b60 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004b60:	b480      	push	{r7}
 8004b62:	b085      	sub	sp, #20
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d101      	bne.n	8004b80 <HAL_ADC_ConfigChannel+0x20>
 8004b7c:	2302      	movs	r3, #2
 8004b7e:	e0dc      	b.n	8004d3a <HAL_ADC_ConfigChannel+0x1da>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	2b06      	cmp	r3, #6
 8004b8e:	d81c      	bhi.n	8004bca <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	685a      	ldr	r2, [r3, #4]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	4413      	add	r3, r2
 8004ba0:	3b05      	subs	r3, #5
 8004ba2:	221f      	movs	r2, #31
 8004ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba8:	43db      	mvns	r3, r3
 8004baa:	4019      	ands	r1, r3
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	6818      	ldr	r0, [r3, #0]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	685a      	ldr	r2, [r3, #4]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	4413      	add	r3, r2
 8004bba:	3b05      	subs	r3, #5
 8004bbc:	fa00 f203 	lsl.w	r2, r0, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	635a      	str	r2, [r3, #52]	; 0x34
 8004bc8:	e03c      	b.n	8004c44 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	2b0c      	cmp	r3, #12
 8004bd0:	d81c      	bhi.n	8004c0c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	4413      	add	r3, r2
 8004be2:	3b23      	subs	r3, #35	; 0x23
 8004be4:	221f      	movs	r2, #31
 8004be6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bea:	43db      	mvns	r3, r3
 8004bec:	4019      	ands	r1, r3
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	6818      	ldr	r0, [r3, #0]
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	685a      	ldr	r2, [r3, #4]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	4413      	add	r3, r2
 8004bfc:	3b23      	subs	r3, #35	; 0x23
 8004bfe:	fa00 f203 	lsl.w	r2, r0, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	430a      	orrs	r2, r1
 8004c08:	631a      	str	r2, [r3, #48]	; 0x30
 8004c0a:	e01b      	b.n	8004c44 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685a      	ldr	r2, [r3, #4]
 8004c16:	4613      	mov	r3, r2
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	4413      	add	r3, r2
 8004c1c:	3b41      	subs	r3, #65	; 0x41
 8004c1e:	221f      	movs	r2, #31
 8004c20:	fa02 f303 	lsl.w	r3, r2, r3
 8004c24:	43db      	mvns	r3, r3
 8004c26:	4019      	ands	r1, r3
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	6818      	ldr	r0, [r3, #0]
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	685a      	ldr	r2, [r3, #4]
 8004c30:	4613      	mov	r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	4413      	add	r3, r2
 8004c36:	3b41      	subs	r3, #65	; 0x41
 8004c38:	fa00 f203 	lsl.w	r2, r0, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	430a      	orrs	r2, r1
 8004c42:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2b09      	cmp	r3, #9
 8004c4a:	d91c      	bls.n	8004c86 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68d9      	ldr	r1, [r3, #12]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	4613      	mov	r3, r2
 8004c58:	005b      	lsls	r3, r3, #1
 8004c5a:	4413      	add	r3, r2
 8004c5c:	3b1e      	subs	r3, #30
 8004c5e:	2207      	movs	r2, #7
 8004c60:	fa02 f303 	lsl.w	r3, r2, r3
 8004c64:	43db      	mvns	r3, r3
 8004c66:	4019      	ands	r1, r3
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	6898      	ldr	r0, [r3, #8]
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	4613      	mov	r3, r2
 8004c72:	005b      	lsls	r3, r3, #1
 8004c74:	4413      	add	r3, r2
 8004c76:	3b1e      	subs	r3, #30
 8004c78:	fa00 f203 	lsl.w	r2, r0, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	430a      	orrs	r2, r1
 8004c82:	60da      	str	r2, [r3, #12]
 8004c84:	e019      	b.n	8004cba <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	6919      	ldr	r1, [r3, #16]
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	4613      	mov	r3, r2
 8004c92:	005b      	lsls	r3, r3, #1
 8004c94:	4413      	add	r3, r2
 8004c96:	2207      	movs	r2, #7
 8004c98:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9c:	43db      	mvns	r3, r3
 8004c9e:	4019      	ands	r1, r3
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	6898      	ldr	r0, [r3, #8]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	4613      	mov	r3, r2
 8004caa:	005b      	lsls	r3, r3, #1
 8004cac:	4413      	add	r3, r2
 8004cae:	fa00 f203 	lsl.w	r2, r0, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2b10      	cmp	r3, #16
 8004cc0:	d003      	beq.n	8004cca <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004cc6:	2b11      	cmp	r3, #17
 8004cc8:	d132      	bne.n	8004d30 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a1d      	ldr	r2, [pc, #116]	; (8004d44 <HAL_ADC_ConfigChannel+0x1e4>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d125      	bne.n	8004d20 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d126      	bne.n	8004d30 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	689a      	ldr	r2, [r3, #8]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004cf0:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2b10      	cmp	r3, #16
 8004cf8:	d11a      	bne.n	8004d30 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004cfa:	4b13      	ldr	r3, [pc, #76]	; (8004d48 <HAL_ADC_ConfigChannel+0x1e8>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a13      	ldr	r2, [pc, #76]	; (8004d4c <HAL_ADC_ConfigChannel+0x1ec>)
 8004d00:	fba2 2303 	umull	r2, r3, r2, r3
 8004d04:	0c9a      	lsrs	r2, r3, #18
 8004d06:	4613      	mov	r3, r2
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	4413      	add	r3, r2
 8004d0c:	005b      	lsls	r3, r3, #1
 8004d0e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004d10:	e002      	b.n	8004d18 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	3b01      	subs	r3, #1
 8004d16:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d1f9      	bne.n	8004d12 <HAL_ADC_ConfigChannel+0x1b2>
 8004d1e:	e007      	b.n	8004d30 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d24:	f043 0220 	orr.w	r2, r3, #32
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3714      	adds	r7, #20
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bc80      	pop	{r7}
 8004d42:	4770      	bx	lr
 8004d44:	40012400 	.word	0x40012400
 8004d48:	20000000 	.word	0x20000000
 8004d4c:	431bde83 	.word	0x431bde83

08004d50 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d039      	beq.n	8004de2 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	689a      	ldr	r2, [r3, #8]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f042 0201 	orr.w	r2, r2, #1
 8004d7c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004d7e:	4b1b      	ldr	r3, [pc, #108]	; (8004dec <ADC_Enable+0x9c>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a1b      	ldr	r2, [pc, #108]	; (8004df0 <ADC_Enable+0xa0>)
 8004d84:	fba2 2303 	umull	r2, r3, r2, r3
 8004d88:	0c9b      	lsrs	r3, r3, #18
 8004d8a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004d8c:	e002      	b.n	8004d94 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	3b01      	subs	r3, #1
 8004d92:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1f9      	bne.n	8004d8e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004d9a:	f7ff fc17 	bl	80045cc <HAL_GetTick>
 8004d9e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004da0:	e018      	b.n	8004dd4 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004da2:	f7ff fc13 	bl	80045cc <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d911      	bls.n	8004dd4 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db4:	f043 0210 	orr.w	r2, r3, #16
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc0:	f043 0201 	orr.w	r2, r3, #1
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e007      	b.n	8004de4 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d1df      	bne.n	8004da2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3710      	adds	r7, #16
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	20000000 	.word	0x20000000
 8004df0:	431bde83 	.word	0x431bde83

08004df4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d127      	bne.n	8004e5e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	689a      	ldr	r2, [r3, #8]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f022 0201 	bic.w	r2, r2, #1
 8004e1c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004e1e:	f7ff fbd5 	bl	80045cc <HAL_GetTick>
 8004e22:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004e24:	e014      	b.n	8004e50 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004e26:	f7ff fbd1 	bl	80045cc <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d90d      	bls.n	8004e50 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e38:	f043 0210 	orr.w	r2, r3, #16
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e44:	f043 0201 	orr.w	r2, r3, #1
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e007      	b.n	8004e60 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d0e3      	beq.n	8004e26 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e74:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e7a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d127      	bne.n	8004ed2 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e86:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004e98:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004e9c:	d115      	bne.n	8004eca <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d111      	bne.n	8004eca <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eaa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d105      	bne.n	8004eca <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec2:	f043 0201 	orr.w	r2, r3, #1
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f7ff fe23 	bl	8004b16 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8004ed0:	e004      	b.n	8004edc <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	4798      	blx	r3
}
 8004edc:	bf00      	nop
 8004ede:	3710      	adds	r7, #16
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef0:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004ef2:	68f8      	ldr	r0, [r7, #12]
 8004ef4:	f7ff fe18 	bl	8004b28 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004ef8:	bf00      	nop
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0c:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f12:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1e:	f043 0204 	orr.w	r2, r3, #4
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004f26:	68f8      	ldr	r0, [r7, #12]
 8004f28:	f7ff fe10 	bl	8004b4c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004f2c:	bf00      	nop
 8004f2e:	3710      	adds	r7, #16
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8004f3c:	bf00      	nop
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bc80      	pop	{r7}
 8004f44:	4770      	bx	lr

08004f46 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004f46:	b580      	push	{r7, lr}
 8004f48:	b084      	sub	sp, #16
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d101      	bne.n	8004f58 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e0ed      	b.n	8005134 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d102      	bne.n	8004f6a <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f7ff f8d7 	bl	8004118 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f022 0202 	bic.w	r2, r2, #2
 8004f78:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f7a:	f7ff fb27 	bl	80045cc <HAL_GetTick>
 8004f7e:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004f80:	e012      	b.n	8004fa8 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004f82:	f7ff fb23 	bl	80045cc <HAL_GetTick>
 8004f86:	4602      	mov	r2, r0
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	2b0a      	cmp	r3, #10
 8004f8e:	d90b      	bls.n	8004fa8 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f94:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2205      	movs	r2, #5
 8004fa0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e0c5      	b.n	8005134 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f003 0302 	and.w	r3, r3, #2
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d1e5      	bne.n	8004f82 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f042 0201 	orr.w	r2, r2, #1
 8004fc4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004fc6:	f7ff fb01 	bl	80045cc <HAL_GetTick>
 8004fca:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004fcc:	e012      	b.n	8004ff4 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004fce:	f7ff fafd 	bl	80045cc <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	2b0a      	cmp	r3, #10
 8004fda:	d90b      	bls.n	8004ff4 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2205      	movs	r2, #5
 8004fec:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e09f      	b.n	8005134 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d0e5      	beq.n	8004fce <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	7e1b      	ldrb	r3, [r3, #24]
 8005006:	2b01      	cmp	r3, #1
 8005008:	d108      	bne.n	800501c <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005018:	601a      	str	r2, [r3, #0]
 800501a:	e007      	b.n	800502c <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800502a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	7e5b      	ldrb	r3, [r3, #25]
 8005030:	2b01      	cmp	r3, #1
 8005032:	d108      	bne.n	8005046 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005042:	601a      	str	r2, [r3, #0]
 8005044:	e007      	b.n	8005056 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005054:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	7e9b      	ldrb	r3, [r3, #26]
 800505a:	2b01      	cmp	r3, #1
 800505c:	d108      	bne.n	8005070 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f042 0220 	orr.w	r2, r2, #32
 800506c:	601a      	str	r2, [r3, #0]
 800506e:	e007      	b.n	8005080 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f022 0220 	bic.w	r2, r2, #32
 800507e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	7edb      	ldrb	r3, [r3, #27]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d108      	bne.n	800509a <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f022 0210 	bic.w	r2, r2, #16
 8005096:	601a      	str	r2, [r3, #0]
 8005098:	e007      	b.n	80050aa <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f042 0210 	orr.w	r2, r2, #16
 80050a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	7f1b      	ldrb	r3, [r3, #28]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d108      	bne.n	80050c4 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f042 0208 	orr.w	r2, r2, #8
 80050c0:	601a      	str	r2, [r3, #0]
 80050c2:	e007      	b.n	80050d4 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f022 0208 	bic.w	r2, r2, #8
 80050d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	7f5b      	ldrb	r3, [r3, #29]
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d108      	bne.n	80050ee <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f042 0204 	orr.w	r2, r2, #4
 80050ea:	601a      	str	r2, [r3, #0]
 80050ec:	e007      	b.n	80050fe <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f022 0204 	bic.w	r2, r2, #4
 80050fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	689a      	ldr	r2, [r3, #8]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	431a      	orrs	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	431a      	orrs	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	ea42 0103 	orr.w	r1, r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	1e5a      	subs	r2, r3, #1
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	430a      	orrs	r2, r1
 8005122:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2201      	movs	r2, #1
 800512e:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	4618      	mov	r0, r3
 8005136:	3710      	adds	r7, #16
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b08a      	sub	sp, #40	; 0x28
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005144:	2300      	movs	r3, #0
 8005146:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005178:	6a3b      	ldr	r3, [r7, #32]
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	2b00      	cmp	r3, #0
 8005180:	d07c      	beq.n	800527c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	f003 0301 	and.w	r3, r3, #1
 8005188:	2b00      	cmp	r3, #0
 800518a:	d023      	beq.n	80051d4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2201      	movs	r2, #1
 8005192:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d003      	beq.n	80051a6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 f97d 	bl	800549e <HAL_CAN_TxMailbox0CompleteCallback>
 80051a4:	e016      	b.n	80051d4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	f003 0304 	and.w	r3, r3, #4
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d004      	beq.n	80051ba <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80051b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80051b6:	627b      	str	r3, [r7, #36]	; 0x24
 80051b8:	e00c      	b.n	80051d4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	f003 0308 	and.w	r3, r3, #8
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d004      	beq.n	80051ce <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80051c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80051ca:	627b      	str	r3, [r7, #36]	; 0x24
 80051cc:	e002      	b.n	80051d4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 f980 	bl	80054d4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d024      	beq.n	8005228 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80051e6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d003      	beq.n	80051fa <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 f95c 	bl	80054b0 <HAL_CAN_TxMailbox1CompleteCallback>
 80051f8:	e016      	b.n	8005228 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005200:	2b00      	cmp	r3, #0
 8005202:	d004      	beq.n	800520e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005206:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800520a:	627b      	str	r3, [r7, #36]	; 0x24
 800520c:	e00c      	b.n	8005228 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005214:	2b00      	cmp	r3, #0
 8005216:	d004      	beq.n	8005222 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800521e:	627b      	str	r3, [r7, #36]	; 0x24
 8005220:	e002      	b.n	8005228 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f95f 	bl	80054e6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d024      	beq.n	800527c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800523a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d003      	beq.n	800524e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 f93b 	bl	80054c2 <HAL_CAN_TxMailbox2CompleteCallback>
 800524c:	e016      	b.n	800527c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d004      	beq.n	8005262 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800525e:	627b      	str	r3, [r7, #36]	; 0x24
 8005260:	e00c      	b.n	800527c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005268:	2b00      	cmp	r3, #0
 800526a:	d004      	beq.n	8005276 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800526c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005272:	627b      	str	r3, [r7, #36]	; 0x24
 8005274:	e002      	b.n	800527c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f93e 	bl	80054f8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800527c:	6a3b      	ldr	r3, [r7, #32]
 800527e:	f003 0308 	and.w	r3, r3, #8
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00c      	beq.n	80052a0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	f003 0310 	and.w	r3, r3, #16
 800528c:	2b00      	cmp	r3, #0
 800528e:	d007      	beq.n	80052a0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005292:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005296:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2210      	movs	r2, #16
 800529e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80052a0:	6a3b      	ldr	r3, [r7, #32]
 80052a2:	f003 0304 	and.w	r3, r3, #4
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00b      	beq.n	80052c2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f003 0308 	and.w	r3, r3, #8
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d006      	beq.n	80052c2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2208      	movs	r2, #8
 80052ba:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 f92d 	bl	800551c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80052c2:	6a3b      	ldr	r3, [r7, #32]
 80052c4:	f003 0302 	and.w	r3, r3, #2
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d009      	beq.n	80052e0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	f003 0303 	and.w	r3, r3, #3
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d002      	beq.n	80052e0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 f915 	bl	800550a <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80052e0:	6a3b      	ldr	r3, [r7, #32]
 80052e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00c      	beq.n	8005304 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	f003 0310 	and.w	r3, r3, #16
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d007      	beq.n	8005304 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80052f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80052fa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2210      	movs	r2, #16
 8005302:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005304:	6a3b      	ldr	r3, [r7, #32]
 8005306:	f003 0320 	and.w	r3, r3, #32
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00b      	beq.n	8005326 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	f003 0308 	and.w	r3, r3, #8
 8005314:	2b00      	cmp	r3, #0
 8005316:	d006      	beq.n	8005326 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2208      	movs	r2, #8
 800531e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 f90d 	bl	8005540 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005326:	6a3b      	ldr	r3, [r7, #32]
 8005328:	f003 0310 	and.w	r3, r3, #16
 800532c:	2b00      	cmp	r3, #0
 800532e:	d009      	beq.n	8005344 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	f003 0303 	and.w	r3, r3, #3
 800533a:	2b00      	cmp	r3, #0
 800533c:	d002      	beq.n	8005344 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 f8f5 	bl	800552e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005344:	6a3b      	ldr	r3, [r7, #32]
 8005346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00b      	beq.n	8005366 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	f003 0310 	and.w	r3, r3, #16
 8005354:	2b00      	cmp	r3, #0
 8005356:	d006      	beq.n	8005366 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2210      	movs	r2, #16
 800535e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 f8f6 	bl	8005552 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005366:	6a3b      	ldr	r3, [r7, #32]
 8005368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00b      	beq.n	8005388 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	f003 0308 	and.w	r3, r3, #8
 8005376:	2b00      	cmp	r3, #0
 8005378:	d006      	beq.n	8005388 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2208      	movs	r2, #8
 8005380:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f8ee 	bl	8005564 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005388:	6a3b      	ldr	r3, [r7, #32]
 800538a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d075      	beq.n	800547e <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	f003 0304 	and.w	r3, r3, #4
 8005398:	2b00      	cmp	r3, #0
 800539a:	d06c      	beq.n	8005476 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800539c:	6a3b      	ldr	r3, [r7, #32]
 800539e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d008      	beq.n	80053b8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d003      	beq.n	80053b8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80053b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b2:	f043 0301 	orr.w	r3, r3, #1
 80053b6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80053b8:	6a3b      	ldr	r3, [r7, #32]
 80053ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d008      	beq.n	80053d4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d003      	beq.n	80053d4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80053cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ce:	f043 0302 	orr.w	r3, r3, #2
 80053d2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80053d4:	6a3b      	ldr	r3, [r7, #32]
 80053d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d008      	beq.n	80053f0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d003      	beq.n	80053f0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80053e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ea:	f043 0304 	orr.w	r3, r3, #4
 80053ee:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80053f0:	6a3b      	ldr	r3, [r7, #32]
 80053f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d03d      	beq.n	8005476 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005400:	2b00      	cmp	r3, #0
 8005402:	d038      	beq.n	8005476 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800540a:	2b30      	cmp	r3, #48	; 0x30
 800540c:	d017      	beq.n	800543e <HAL_CAN_IRQHandler+0x302>
 800540e:	2b30      	cmp	r3, #48	; 0x30
 8005410:	d804      	bhi.n	800541c <HAL_CAN_IRQHandler+0x2e0>
 8005412:	2b10      	cmp	r3, #16
 8005414:	d009      	beq.n	800542a <HAL_CAN_IRQHandler+0x2ee>
 8005416:	2b20      	cmp	r3, #32
 8005418:	d00c      	beq.n	8005434 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800541a:	e024      	b.n	8005466 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 800541c:	2b50      	cmp	r3, #80	; 0x50
 800541e:	d018      	beq.n	8005452 <HAL_CAN_IRQHandler+0x316>
 8005420:	2b60      	cmp	r3, #96	; 0x60
 8005422:	d01b      	beq.n	800545c <HAL_CAN_IRQHandler+0x320>
 8005424:	2b40      	cmp	r3, #64	; 0x40
 8005426:	d00f      	beq.n	8005448 <HAL_CAN_IRQHandler+0x30c>
            break;
 8005428:	e01d      	b.n	8005466 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 800542a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542c:	f043 0308 	orr.w	r3, r3, #8
 8005430:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005432:	e018      	b.n	8005466 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005436:	f043 0310 	orr.w	r3, r3, #16
 800543a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800543c:	e013      	b.n	8005466 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 800543e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005440:	f043 0320 	orr.w	r3, r3, #32
 8005444:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005446:	e00e      	b.n	8005466 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8005448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800544e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005450:	e009      	b.n	8005466 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8005452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005458:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800545a:	e004      	b.n	8005466 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800545c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005462:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005464:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	699a      	ldr	r2, [r3, #24]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005474:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2204      	movs	r2, #4
 800547c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800547e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005480:	2b00      	cmp	r3, #0
 8005482:	d008      	beq.n	8005496 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548a:	431a      	orrs	r2, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 f870 	bl	8005576 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005496:	bf00      	nop
 8005498:	3728      	adds	r7, #40	; 0x28
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}

0800549e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800549e:	b480      	push	{r7}
 80054a0:	b083      	sub	sp, #12
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80054a6:	bf00      	nop
 80054a8:	370c      	adds	r7, #12
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bc80      	pop	{r7}
 80054ae:	4770      	bx	lr

080054b0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80054b8:	bf00      	nop
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	bc80      	pop	{r7}
 80054c0:	4770      	bx	lr

080054c2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b083      	sub	sp, #12
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80054ca:	bf00      	nop
 80054cc:	370c      	adds	r7, #12
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bc80      	pop	{r7}
 80054d2:	4770      	bx	lr

080054d4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80054dc:	bf00      	nop
 80054de:	370c      	adds	r7, #12
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bc80      	pop	{r7}
 80054e4:	4770      	bx	lr

080054e6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80054e6:	b480      	push	{r7}
 80054e8:	b083      	sub	sp, #12
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80054ee:	bf00      	nop
 80054f0:	370c      	adds	r7, #12
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bc80      	pop	{r7}
 80054f6:	4770      	bx	lr

080054f8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	bc80      	pop	{r7}
 8005508:	4770      	bx	lr

0800550a <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800550a:	b480      	push	{r7}
 800550c:	b083      	sub	sp, #12
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8005512:	bf00      	nop
 8005514:	370c      	adds	r7, #12
 8005516:	46bd      	mov	sp, r7
 8005518:	bc80      	pop	{r7}
 800551a:	4770      	bx	lr

0800551c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005524:	bf00      	nop
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	bc80      	pop	{r7}
 800552c:	4770      	bx	lr

0800552e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800552e:	b480      	push	{r7}
 8005530:	b083      	sub	sp, #12
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005536:	bf00      	nop
 8005538:	370c      	adds	r7, #12
 800553a:	46bd      	mov	sp, r7
 800553c:	bc80      	pop	{r7}
 800553e:	4770      	bx	lr

08005540 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005548:	bf00      	nop
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	bc80      	pop	{r7}
 8005550:	4770      	bx	lr

08005552 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005552:	b480      	push	{r7}
 8005554:	b083      	sub	sp, #12
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800555a:	bf00      	nop
 800555c:	370c      	adds	r7, #12
 800555e:	46bd      	mov	sp, r7
 8005560:	bc80      	pop	{r7}
 8005562:	4770      	bx	lr

08005564 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	bc80      	pop	{r7}
 8005574:	4770      	bx	lr

08005576 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005576:	b480      	push	{r7}
 8005578:	b083      	sub	sp, #12
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800557e:	bf00      	nop
 8005580:	370c      	adds	r7, #12
 8005582:	46bd      	mov	sp, r7
 8005584:	bc80      	pop	{r7}
 8005586:	4770      	bx	lr

08005588 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005588:	b480      	push	{r7}
 800558a:	b085      	sub	sp, #20
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f003 0307 	and.w	r3, r3, #7
 8005596:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005598:	4b0c      	ldr	r3, [pc, #48]	; (80055cc <__NVIC_SetPriorityGrouping+0x44>)
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800559e:	68ba      	ldr	r2, [r7, #8]
 80055a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80055a4:	4013      	ands	r3, r2
 80055a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80055b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80055b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80055ba:	4a04      	ldr	r2, [pc, #16]	; (80055cc <__NVIC_SetPriorityGrouping+0x44>)
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	60d3      	str	r3, [r2, #12]
}
 80055c0:	bf00      	nop
 80055c2:	3714      	adds	r7, #20
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bc80      	pop	{r7}
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop
 80055cc:	e000ed00 	.word	0xe000ed00

080055d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80055d0:	b480      	push	{r7}
 80055d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80055d4:	4b04      	ldr	r3, [pc, #16]	; (80055e8 <__NVIC_GetPriorityGrouping+0x18>)
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	0a1b      	lsrs	r3, r3, #8
 80055da:	f003 0307 	and.w	r3, r3, #7
}
 80055de:	4618      	mov	r0, r3
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bc80      	pop	{r7}
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	e000ed00 	.word	0xe000ed00

080055ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	4603      	mov	r3, r0
 80055f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	db0b      	blt.n	8005616 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055fe:	79fb      	ldrb	r3, [r7, #7]
 8005600:	f003 021f 	and.w	r2, r3, #31
 8005604:	4906      	ldr	r1, [pc, #24]	; (8005620 <__NVIC_EnableIRQ+0x34>)
 8005606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800560a:	095b      	lsrs	r3, r3, #5
 800560c:	2001      	movs	r0, #1
 800560e:	fa00 f202 	lsl.w	r2, r0, r2
 8005612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005616:	bf00      	nop
 8005618:	370c      	adds	r7, #12
 800561a:	46bd      	mov	sp, r7
 800561c:	bc80      	pop	{r7}
 800561e:	4770      	bx	lr
 8005620:	e000e100 	.word	0xe000e100

08005624 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	4603      	mov	r3, r0
 800562c:	6039      	str	r1, [r7, #0]
 800562e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005634:	2b00      	cmp	r3, #0
 8005636:	db0a      	blt.n	800564e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	b2da      	uxtb	r2, r3
 800563c:	490c      	ldr	r1, [pc, #48]	; (8005670 <__NVIC_SetPriority+0x4c>)
 800563e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005642:	0112      	lsls	r2, r2, #4
 8005644:	b2d2      	uxtb	r2, r2
 8005646:	440b      	add	r3, r1
 8005648:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800564c:	e00a      	b.n	8005664 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	b2da      	uxtb	r2, r3
 8005652:	4908      	ldr	r1, [pc, #32]	; (8005674 <__NVIC_SetPriority+0x50>)
 8005654:	79fb      	ldrb	r3, [r7, #7]
 8005656:	f003 030f 	and.w	r3, r3, #15
 800565a:	3b04      	subs	r3, #4
 800565c:	0112      	lsls	r2, r2, #4
 800565e:	b2d2      	uxtb	r2, r2
 8005660:	440b      	add	r3, r1
 8005662:	761a      	strb	r2, [r3, #24]
}
 8005664:	bf00      	nop
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	bc80      	pop	{r7}
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	e000e100 	.word	0xe000e100
 8005674:	e000ed00 	.word	0xe000ed00

08005678 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005678:	b480      	push	{r7}
 800567a:	b089      	sub	sp, #36	; 0x24
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f003 0307 	and.w	r3, r3, #7
 800568a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	f1c3 0307 	rsb	r3, r3, #7
 8005692:	2b04      	cmp	r3, #4
 8005694:	bf28      	it	cs
 8005696:	2304      	movcs	r3, #4
 8005698:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	3304      	adds	r3, #4
 800569e:	2b06      	cmp	r3, #6
 80056a0:	d902      	bls.n	80056a8 <NVIC_EncodePriority+0x30>
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	3b03      	subs	r3, #3
 80056a6:	e000      	b.n	80056aa <NVIC_EncodePriority+0x32>
 80056a8:	2300      	movs	r3, #0
 80056aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056ac:	f04f 32ff 	mov.w	r2, #4294967295
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	fa02 f303 	lsl.w	r3, r2, r3
 80056b6:	43da      	mvns	r2, r3
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	401a      	ands	r2, r3
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80056c0:	f04f 31ff 	mov.w	r1, #4294967295
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	fa01 f303 	lsl.w	r3, r1, r3
 80056ca:	43d9      	mvns	r1, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056d0:	4313      	orrs	r3, r2
         );
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3724      	adds	r7, #36	; 0x24
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bc80      	pop	{r7}
 80056da:	4770      	bx	lr

080056dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b082      	sub	sp, #8
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	3b01      	subs	r3, #1
 80056e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80056ec:	d301      	bcc.n	80056f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80056ee:	2301      	movs	r3, #1
 80056f0:	e00f      	b.n	8005712 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80056f2:	4a0a      	ldr	r2, [pc, #40]	; (800571c <SysTick_Config+0x40>)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	3b01      	subs	r3, #1
 80056f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80056fa:	210f      	movs	r1, #15
 80056fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005700:	f7ff ff90 	bl	8005624 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005704:	4b05      	ldr	r3, [pc, #20]	; (800571c <SysTick_Config+0x40>)
 8005706:	2200      	movs	r2, #0
 8005708:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800570a:	4b04      	ldr	r3, [pc, #16]	; (800571c <SysTick_Config+0x40>)
 800570c:	2207      	movs	r2, #7
 800570e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3708      	adds	r7, #8
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	e000e010 	.word	0xe000e010

08005720 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f7ff ff2d 	bl	8005588 <__NVIC_SetPriorityGrouping>
}
 800572e:	bf00      	nop
 8005730:	3708      	adds	r7, #8
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}

08005736 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005736:	b580      	push	{r7, lr}
 8005738:	b086      	sub	sp, #24
 800573a:	af00      	add	r7, sp, #0
 800573c:	4603      	mov	r3, r0
 800573e:	60b9      	str	r1, [r7, #8]
 8005740:	607a      	str	r2, [r7, #4]
 8005742:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005744:	2300      	movs	r3, #0
 8005746:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005748:	f7ff ff42 	bl	80055d0 <__NVIC_GetPriorityGrouping>
 800574c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	68b9      	ldr	r1, [r7, #8]
 8005752:	6978      	ldr	r0, [r7, #20]
 8005754:	f7ff ff90 	bl	8005678 <NVIC_EncodePriority>
 8005758:	4602      	mov	r2, r0
 800575a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800575e:	4611      	mov	r1, r2
 8005760:	4618      	mov	r0, r3
 8005762:	f7ff ff5f 	bl	8005624 <__NVIC_SetPriority>
}
 8005766:	bf00      	nop
 8005768:	3718      	adds	r7, #24
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}

0800576e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800576e:	b580      	push	{r7, lr}
 8005770:	b082      	sub	sp, #8
 8005772:	af00      	add	r7, sp, #0
 8005774:	4603      	mov	r3, r0
 8005776:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800577c:	4618      	mov	r0, r3
 800577e:	f7ff ff35 	bl	80055ec <__NVIC_EnableIRQ>
}
 8005782:	bf00      	nop
 8005784:	3708      	adds	r7, #8
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}

0800578a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800578a:	b580      	push	{r7, lr}
 800578c:	b082      	sub	sp, #8
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f7ff ffa2 	bl	80056dc <SysTick_Config>
 8005798:	4603      	mov	r3, r0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3708      	adds	r7, #8
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
	...

080057a4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b085      	sub	sp, #20
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80057ac:	2300      	movs	r3, #0
 80057ae:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d101      	bne.n	80057ba <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e043      	b.n	8005842 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	461a      	mov	r2, r3
 80057c0:	4b22      	ldr	r3, [pc, #136]	; (800584c <HAL_DMA_Init+0xa8>)
 80057c2:	4413      	add	r3, r2
 80057c4:	4a22      	ldr	r2, [pc, #136]	; (8005850 <HAL_DMA_Init+0xac>)
 80057c6:	fba2 2303 	umull	r2, r3, r2, r3
 80057ca:	091b      	lsrs	r3, r3, #4
 80057cc:	009a      	lsls	r2, r3, #2
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a1f      	ldr	r2, [pc, #124]	; (8005854 <HAL_DMA_Init+0xb0>)
 80057d6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2202      	movs	r2, #2
 80057dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80057ee:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80057f2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80057fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005808:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005814:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	69db      	ldr	r3, [r3, #28]
 800581a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	4313      	orrs	r3, r2
 8005820:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3714      	adds	r7, #20
 8005846:	46bd      	mov	sp, r7
 8005848:	bc80      	pop	{r7}
 800584a:	4770      	bx	lr
 800584c:	bffdfff8 	.word	0xbffdfff8
 8005850:	cccccccd 	.word	0xcccccccd
 8005854:	40020000 	.word	0x40020000

08005858 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b086      	sub	sp, #24
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]
 8005864:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005866:	2300      	movs	r3, #0
 8005868:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005870:	2b01      	cmp	r3, #1
 8005872:	d101      	bne.n	8005878 <HAL_DMA_Start_IT+0x20>
 8005874:	2302      	movs	r3, #2
 8005876:	e04a      	b.n	800590e <HAL_DMA_Start_IT+0xb6>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005886:	2b01      	cmp	r3, #1
 8005888:	d13a      	bne.n	8005900 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2202      	movs	r2, #2
 800588e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f022 0201 	bic.w	r2, r2, #1
 80058a6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	68b9      	ldr	r1, [r7, #8]
 80058ae:	68f8      	ldr	r0, [r7, #12]
 80058b0:	f000 f9ae 	bl	8005c10 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d008      	beq.n	80058ce <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f042 020e 	orr.w	r2, r2, #14
 80058ca:	601a      	str	r2, [r3, #0]
 80058cc:	e00f      	b.n	80058ee <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f022 0204 	bic.w	r2, r2, #4
 80058dc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f042 020a 	orr.w	r2, r2, #10
 80058ec:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f042 0201 	orr.w	r2, r2, #1
 80058fc:	601a      	str	r2, [r3, #0]
 80058fe:	e005      	b.n	800590c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8005908:	2302      	movs	r3, #2
 800590a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800590c:	7dfb      	ldrb	r3, [r7, #23]
}
 800590e:	4618      	mov	r0, r3
 8005910:	3718      	adds	r7, #24
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
	...

08005918 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005920:	2300      	movs	r3, #0
 8005922:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800592a:	2b02      	cmp	r3, #2
 800592c:	d005      	beq.n	800593a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2204      	movs	r2, #4
 8005932:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	73fb      	strb	r3, [r7, #15]
 8005938:	e051      	b.n	80059de <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f022 020e 	bic.w	r2, r2, #14
 8005948:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f022 0201 	bic.w	r2, r2, #1
 8005958:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a22      	ldr	r2, [pc, #136]	; (80059e8 <HAL_DMA_Abort_IT+0xd0>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d029      	beq.n	80059b8 <HAL_DMA_Abort_IT+0xa0>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a20      	ldr	r2, [pc, #128]	; (80059ec <HAL_DMA_Abort_IT+0xd4>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d022      	beq.n	80059b4 <HAL_DMA_Abort_IT+0x9c>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a1f      	ldr	r2, [pc, #124]	; (80059f0 <HAL_DMA_Abort_IT+0xd8>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d01a      	beq.n	80059ae <HAL_DMA_Abort_IT+0x96>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a1d      	ldr	r2, [pc, #116]	; (80059f4 <HAL_DMA_Abort_IT+0xdc>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d012      	beq.n	80059a8 <HAL_DMA_Abort_IT+0x90>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a1c      	ldr	r2, [pc, #112]	; (80059f8 <HAL_DMA_Abort_IT+0xe0>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d00a      	beq.n	80059a2 <HAL_DMA_Abort_IT+0x8a>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a1a      	ldr	r2, [pc, #104]	; (80059fc <HAL_DMA_Abort_IT+0xe4>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d102      	bne.n	800599c <HAL_DMA_Abort_IT+0x84>
 8005996:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800599a:	e00e      	b.n	80059ba <HAL_DMA_Abort_IT+0xa2>
 800599c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80059a0:	e00b      	b.n	80059ba <HAL_DMA_Abort_IT+0xa2>
 80059a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80059a6:	e008      	b.n	80059ba <HAL_DMA_Abort_IT+0xa2>
 80059a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80059ac:	e005      	b.n	80059ba <HAL_DMA_Abort_IT+0xa2>
 80059ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059b2:	e002      	b.n	80059ba <HAL_DMA_Abort_IT+0xa2>
 80059b4:	2310      	movs	r3, #16
 80059b6:	e000      	b.n	80059ba <HAL_DMA_Abort_IT+0xa2>
 80059b8:	2301      	movs	r3, #1
 80059ba:	4a11      	ldr	r2, [pc, #68]	; (8005a00 <HAL_DMA_Abort_IT+0xe8>)
 80059bc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d003      	beq.n	80059de <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	4798      	blx	r3
    } 
  }
  return status;
 80059de:	7bfb      	ldrb	r3, [r7, #15]
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3710      	adds	r7, #16
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	40020008 	.word	0x40020008
 80059ec:	4002001c 	.word	0x4002001c
 80059f0:	40020030 	.word	0x40020030
 80059f4:	40020044 	.word	0x40020044
 80059f8:	40020058 	.word	0x40020058
 80059fc:	4002006c 	.word	0x4002006c
 8005a00:	40020000 	.word	0x40020000

08005a04 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a20:	2204      	movs	r2, #4
 8005a22:	409a      	lsls	r2, r3
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	4013      	ands	r3, r2
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d04f      	beq.n	8005acc <HAL_DMA_IRQHandler+0xc8>
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	f003 0304 	and.w	r3, r3, #4
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d04a      	beq.n	8005acc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0320 	and.w	r3, r3, #32
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d107      	bne.n	8005a54 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f022 0204 	bic.w	r2, r2, #4
 8005a52:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a66      	ldr	r2, [pc, #408]	; (8005bf4 <HAL_DMA_IRQHandler+0x1f0>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d029      	beq.n	8005ab2 <HAL_DMA_IRQHandler+0xae>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a65      	ldr	r2, [pc, #404]	; (8005bf8 <HAL_DMA_IRQHandler+0x1f4>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d022      	beq.n	8005aae <HAL_DMA_IRQHandler+0xaa>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a63      	ldr	r2, [pc, #396]	; (8005bfc <HAL_DMA_IRQHandler+0x1f8>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d01a      	beq.n	8005aa8 <HAL_DMA_IRQHandler+0xa4>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a62      	ldr	r2, [pc, #392]	; (8005c00 <HAL_DMA_IRQHandler+0x1fc>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d012      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0x9e>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a60      	ldr	r2, [pc, #384]	; (8005c04 <HAL_DMA_IRQHandler+0x200>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d00a      	beq.n	8005a9c <HAL_DMA_IRQHandler+0x98>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a5f      	ldr	r2, [pc, #380]	; (8005c08 <HAL_DMA_IRQHandler+0x204>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d102      	bne.n	8005a96 <HAL_DMA_IRQHandler+0x92>
 8005a90:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005a94:	e00e      	b.n	8005ab4 <HAL_DMA_IRQHandler+0xb0>
 8005a96:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005a9a:	e00b      	b.n	8005ab4 <HAL_DMA_IRQHandler+0xb0>
 8005a9c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005aa0:	e008      	b.n	8005ab4 <HAL_DMA_IRQHandler+0xb0>
 8005aa2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005aa6:	e005      	b.n	8005ab4 <HAL_DMA_IRQHandler+0xb0>
 8005aa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005aac:	e002      	b.n	8005ab4 <HAL_DMA_IRQHandler+0xb0>
 8005aae:	2340      	movs	r3, #64	; 0x40
 8005ab0:	e000      	b.n	8005ab4 <HAL_DMA_IRQHandler+0xb0>
 8005ab2:	2304      	movs	r3, #4
 8005ab4:	4a55      	ldr	r2, [pc, #340]	; (8005c0c <HAL_DMA_IRQHandler+0x208>)
 8005ab6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f000 8094 	beq.w	8005bea <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8005aca:	e08e      	b.n	8005bea <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad0:	2202      	movs	r2, #2
 8005ad2:	409a      	lsls	r2, r3
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d056      	beq.n	8005b8a <HAL_DMA_IRQHandler+0x186>
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	f003 0302 	and.w	r3, r3, #2
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d051      	beq.n	8005b8a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0320 	and.w	r3, r3, #32
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d10b      	bne.n	8005b0c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f022 020a 	bic.w	r2, r2, #10
 8005b02:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a38      	ldr	r2, [pc, #224]	; (8005bf4 <HAL_DMA_IRQHandler+0x1f0>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d029      	beq.n	8005b6a <HAL_DMA_IRQHandler+0x166>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a37      	ldr	r2, [pc, #220]	; (8005bf8 <HAL_DMA_IRQHandler+0x1f4>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d022      	beq.n	8005b66 <HAL_DMA_IRQHandler+0x162>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a35      	ldr	r2, [pc, #212]	; (8005bfc <HAL_DMA_IRQHandler+0x1f8>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d01a      	beq.n	8005b60 <HAL_DMA_IRQHandler+0x15c>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a34      	ldr	r2, [pc, #208]	; (8005c00 <HAL_DMA_IRQHandler+0x1fc>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d012      	beq.n	8005b5a <HAL_DMA_IRQHandler+0x156>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a32      	ldr	r2, [pc, #200]	; (8005c04 <HAL_DMA_IRQHandler+0x200>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d00a      	beq.n	8005b54 <HAL_DMA_IRQHandler+0x150>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a31      	ldr	r2, [pc, #196]	; (8005c08 <HAL_DMA_IRQHandler+0x204>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d102      	bne.n	8005b4e <HAL_DMA_IRQHandler+0x14a>
 8005b48:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005b4c:	e00e      	b.n	8005b6c <HAL_DMA_IRQHandler+0x168>
 8005b4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b52:	e00b      	b.n	8005b6c <HAL_DMA_IRQHandler+0x168>
 8005b54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b58:	e008      	b.n	8005b6c <HAL_DMA_IRQHandler+0x168>
 8005b5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005b5e:	e005      	b.n	8005b6c <HAL_DMA_IRQHandler+0x168>
 8005b60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b64:	e002      	b.n	8005b6c <HAL_DMA_IRQHandler+0x168>
 8005b66:	2320      	movs	r3, #32
 8005b68:	e000      	b.n	8005b6c <HAL_DMA_IRQHandler+0x168>
 8005b6a:	2302      	movs	r3, #2
 8005b6c:	4a27      	ldr	r2, [pc, #156]	; (8005c0c <HAL_DMA_IRQHandler+0x208>)
 8005b6e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d034      	beq.n	8005bea <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005b88:	e02f      	b.n	8005bea <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8e:	2208      	movs	r2, #8
 8005b90:	409a      	lsls	r2, r3
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	4013      	ands	r3, r2
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d028      	beq.n	8005bec <HAL_DMA_IRQHandler+0x1e8>
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	f003 0308 	and.w	r3, r3, #8
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d023      	beq.n	8005bec <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f022 020e 	bic.w	r2, r2, #14
 8005bb2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bbc:	2101      	movs	r1, #1
 8005bbe:	fa01 f202 	lsl.w	r2, r1, r2
 8005bc2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d004      	beq.n	8005bec <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	4798      	blx	r3
    }
  }
  return;
 8005bea:	bf00      	nop
 8005bec:	bf00      	nop
}
 8005bee:	3710      	adds	r7, #16
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	40020008 	.word	0x40020008
 8005bf8:	4002001c 	.word	0x4002001c
 8005bfc:	40020030 	.word	0x40020030
 8005c00:	40020044 	.word	0x40020044
 8005c04:	40020058 	.word	0x40020058
 8005c08:	4002006c 	.word	0x4002006c
 8005c0c:	40020000 	.word	0x40020000

08005c10 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]
 8005c1c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c26:	2101      	movs	r1, #1
 8005c28:	fa01 f202 	lsl.w	r2, r1, r2
 8005c2c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	683a      	ldr	r2, [r7, #0]
 8005c34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	2b10      	cmp	r3, #16
 8005c3c:	d108      	bne.n	8005c50 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68ba      	ldr	r2, [r7, #8]
 8005c4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005c4e:	e007      	b.n	8005c60 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68ba      	ldr	r2, [r7, #8]
 8005c56:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	60da      	str	r2, [r3, #12]
}
 8005c60:	bf00      	nop
 8005c62:	3714      	adds	r7, #20
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bc80      	pop	{r7}
 8005c68:	4770      	bx	lr
	...

08005c6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b08b      	sub	sp, #44	; 0x2c
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005c76:	2300      	movs	r3, #0
 8005c78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005c7e:	e127      	b.n	8005ed0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005c80:	2201      	movs	r2, #1
 8005c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c84:	fa02 f303 	lsl.w	r3, r2, r3
 8005c88:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	69fa      	ldr	r2, [r7, #28]
 8005c90:	4013      	ands	r3, r2
 8005c92:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005c94:	69ba      	ldr	r2, [r7, #24]
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	f040 8116 	bne.w	8005eca <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	2b12      	cmp	r3, #18
 8005ca4:	d034      	beq.n	8005d10 <HAL_GPIO_Init+0xa4>
 8005ca6:	2b12      	cmp	r3, #18
 8005ca8:	d80d      	bhi.n	8005cc6 <HAL_GPIO_Init+0x5a>
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d02b      	beq.n	8005d06 <HAL_GPIO_Init+0x9a>
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	d804      	bhi.n	8005cbc <HAL_GPIO_Init+0x50>
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d031      	beq.n	8005d1a <HAL_GPIO_Init+0xae>
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d01c      	beq.n	8005cf4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005cba:	e048      	b.n	8005d4e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8005cbc:	2b03      	cmp	r3, #3
 8005cbe:	d043      	beq.n	8005d48 <HAL_GPIO_Init+0xdc>
 8005cc0:	2b11      	cmp	r3, #17
 8005cc2:	d01b      	beq.n	8005cfc <HAL_GPIO_Init+0x90>
          break;
 8005cc4:	e043      	b.n	8005d4e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8005cc6:	4a89      	ldr	r2, [pc, #548]	; (8005eec <HAL_GPIO_Init+0x280>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d026      	beq.n	8005d1a <HAL_GPIO_Init+0xae>
 8005ccc:	4a87      	ldr	r2, [pc, #540]	; (8005eec <HAL_GPIO_Init+0x280>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d806      	bhi.n	8005ce0 <HAL_GPIO_Init+0x74>
 8005cd2:	4a87      	ldr	r2, [pc, #540]	; (8005ef0 <HAL_GPIO_Init+0x284>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d020      	beq.n	8005d1a <HAL_GPIO_Init+0xae>
 8005cd8:	4a86      	ldr	r2, [pc, #536]	; (8005ef4 <HAL_GPIO_Init+0x288>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d01d      	beq.n	8005d1a <HAL_GPIO_Init+0xae>
          break;
 8005cde:	e036      	b.n	8005d4e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8005ce0:	4a85      	ldr	r2, [pc, #532]	; (8005ef8 <HAL_GPIO_Init+0x28c>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d019      	beq.n	8005d1a <HAL_GPIO_Init+0xae>
 8005ce6:	4a85      	ldr	r2, [pc, #532]	; (8005efc <HAL_GPIO_Init+0x290>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d016      	beq.n	8005d1a <HAL_GPIO_Init+0xae>
 8005cec:	4a84      	ldr	r2, [pc, #528]	; (8005f00 <HAL_GPIO_Init+0x294>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d013      	beq.n	8005d1a <HAL_GPIO_Init+0xae>
          break;
 8005cf2:	e02c      	b.n	8005d4e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	623b      	str	r3, [r7, #32]
          break;
 8005cfa:	e028      	b.n	8005d4e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	3304      	adds	r3, #4
 8005d02:	623b      	str	r3, [r7, #32]
          break;
 8005d04:	e023      	b.n	8005d4e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	3308      	adds	r3, #8
 8005d0c:	623b      	str	r3, [r7, #32]
          break;
 8005d0e:	e01e      	b.n	8005d4e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	330c      	adds	r3, #12
 8005d16:	623b      	str	r3, [r7, #32]
          break;
 8005d18:	e019      	b.n	8005d4e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d102      	bne.n	8005d28 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005d22:	2304      	movs	r3, #4
 8005d24:	623b      	str	r3, [r7, #32]
          break;
 8005d26:	e012      	b.n	8005d4e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d105      	bne.n	8005d3c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005d30:	2308      	movs	r3, #8
 8005d32:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	69fa      	ldr	r2, [r7, #28]
 8005d38:	611a      	str	r2, [r3, #16]
          break;
 8005d3a:	e008      	b.n	8005d4e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005d3c:	2308      	movs	r3, #8
 8005d3e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	69fa      	ldr	r2, [r7, #28]
 8005d44:	615a      	str	r2, [r3, #20]
          break;
 8005d46:	e002      	b.n	8005d4e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	623b      	str	r3, [r7, #32]
          break;
 8005d4c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	2bff      	cmp	r3, #255	; 0xff
 8005d52:	d801      	bhi.n	8005d58 <HAL_GPIO_Init+0xec>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	e001      	b.n	8005d5c <HAL_GPIO_Init+0xf0>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	3304      	adds	r3, #4
 8005d5c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	2bff      	cmp	r3, #255	; 0xff
 8005d62:	d802      	bhi.n	8005d6a <HAL_GPIO_Init+0xfe>
 8005d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	e002      	b.n	8005d70 <HAL_GPIO_Init+0x104>
 8005d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6c:	3b08      	subs	r3, #8
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	210f      	movs	r1, #15
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d7e:	43db      	mvns	r3, r3
 8005d80:	401a      	ands	r2, r3
 8005d82:	6a39      	ldr	r1, [r7, #32]
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	fa01 f303 	lsl.w	r3, r1, r3
 8005d8a:	431a      	orrs	r2, r3
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	f000 8096 	beq.w	8005eca <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005d9e:	4b59      	ldr	r3, [pc, #356]	; (8005f04 <HAL_GPIO_Init+0x298>)
 8005da0:	699b      	ldr	r3, [r3, #24]
 8005da2:	4a58      	ldr	r2, [pc, #352]	; (8005f04 <HAL_GPIO_Init+0x298>)
 8005da4:	f043 0301 	orr.w	r3, r3, #1
 8005da8:	6193      	str	r3, [r2, #24]
 8005daa:	4b56      	ldr	r3, [pc, #344]	; (8005f04 <HAL_GPIO_Init+0x298>)
 8005dac:	699b      	ldr	r3, [r3, #24]
 8005dae:	f003 0301 	and.w	r3, r3, #1
 8005db2:	60bb      	str	r3, [r7, #8]
 8005db4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005db6:	4a54      	ldr	r2, [pc, #336]	; (8005f08 <HAL_GPIO_Init+0x29c>)
 8005db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dba:	089b      	lsrs	r3, r3, #2
 8005dbc:	3302      	adds	r3, #2
 8005dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dc2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc6:	f003 0303 	and.w	r3, r3, #3
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	220f      	movs	r2, #15
 8005dce:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd2:	43db      	mvns	r3, r3
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a4b      	ldr	r2, [pc, #300]	; (8005f0c <HAL_GPIO_Init+0x2a0>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d013      	beq.n	8005e0a <HAL_GPIO_Init+0x19e>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a4a      	ldr	r2, [pc, #296]	; (8005f10 <HAL_GPIO_Init+0x2a4>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d00d      	beq.n	8005e06 <HAL_GPIO_Init+0x19a>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a49      	ldr	r2, [pc, #292]	; (8005f14 <HAL_GPIO_Init+0x2a8>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d007      	beq.n	8005e02 <HAL_GPIO_Init+0x196>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a48      	ldr	r2, [pc, #288]	; (8005f18 <HAL_GPIO_Init+0x2ac>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d101      	bne.n	8005dfe <HAL_GPIO_Init+0x192>
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e006      	b.n	8005e0c <HAL_GPIO_Init+0x1a0>
 8005dfe:	2304      	movs	r3, #4
 8005e00:	e004      	b.n	8005e0c <HAL_GPIO_Init+0x1a0>
 8005e02:	2302      	movs	r3, #2
 8005e04:	e002      	b.n	8005e0c <HAL_GPIO_Init+0x1a0>
 8005e06:	2301      	movs	r3, #1
 8005e08:	e000      	b.n	8005e0c <HAL_GPIO_Init+0x1a0>
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e0e:	f002 0203 	and.w	r2, r2, #3
 8005e12:	0092      	lsls	r2, r2, #2
 8005e14:	4093      	lsls	r3, r2
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005e1c:	493a      	ldr	r1, [pc, #232]	; (8005f08 <HAL_GPIO_Init+0x29c>)
 8005e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e20:	089b      	lsrs	r3, r3, #2
 8005e22:	3302      	adds	r3, #2
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d006      	beq.n	8005e44 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005e36:	4b39      	ldr	r3, [pc, #228]	; (8005f1c <HAL_GPIO_Init+0x2b0>)
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	4938      	ldr	r1, [pc, #224]	; (8005f1c <HAL_GPIO_Init+0x2b0>)
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	600b      	str	r3, [r1, #0]
 8005e42:	e006      	b.n	8005e52 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005e44:	4b35      	ldr	r3, [pc, #212]	; (8005f1c <HAL_GPIO_Init+0x2b0>)
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	43db      	mvns	r3, r3
 8005e4c:	4933      	ldr	r1, [pc, #204]	; (8005f1c <HAL_GPIO_Init+0x2b0>)
 8005e4e:	4013      	ands	r3, r2
 8005e50:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d006      	beq.n	8005e6c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005e5e:	4b2f      	ldr	r3, [pc, #188]	; (8005f1c <HAL_GPIO_Init+0x2b0>)
 8005e60:	685a      	ldr	r2, [r3, #4]
 8005e62:	492e      	ldr	r1, [pc, #184]	; (8005f1c <HAL_GPIO_Init+0x2b0>)
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	604b      	str	r3, [r1, #4]
 8005e6a:	e006      	b.n	8005e7a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005e6c:	4b2b      	ldr	r3, [pc, #172]	; (8005f1c <HAL_GPIO_Init+0x2b0>)
 8005e6e:	685a      	ldr	r2, [r3, #4]
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	43db      	mvns	r3, r3
 8005e74:	4929      	ldr	r1, [pc, #164]	; (8005f1c <HAL_GPIO_Init+0x2b0>)
 8005e76:	4013      	ands	r3, r2
 8005e78:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d006      	beq.n	8005e94 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005e86:	4b25      	ldr	r3, [pc, #148]	; (8005f1c <HAL_GPIO_Init+0x2b0>)
 8005e88:	689a      	ldr	r2, [r3, #8]
 8005e8a:	4924      	ldr	r1, [pc, #144]	; (8005f1c <HAL_GPIO_Init+0x2b0>)
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	608b      	str	r3, [r1, #8]
 8005e92:	e006      	b.n	8005ea2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005e94:	4b21      	ldr	r3, [pc, #132]	; (8005f1c <HAL_GPIO_Init+0x2b0>)
 8005e96:	689a      	ldr	r2, [r3, #8]
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	43db      	mvns	r3, r3
 8005e9c:	491f      	ldr	r1, [pc, #124]	; (8005f1c <HAL_GPIO_Init+0x2b0>)
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d006      	beq.n	8005ebc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005eae:	4b1b      	ldr	r3, [pc, #108]	; (8005f1c <HAL_GPIO_Init+0x2b0>)
 8005eb0:	68da      	ldr	r2, [r3, #12]
 8005eb2:	491a      	ldr	r1, [pc, #104]	; (8005f1c <HAL_GPIO_Init+0x2b0>)
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	60cb      	str	r3, [r1, #12]
 8005eba:	e006      	b.n	8005eca <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005ebc:	4b17      	ldr	r3, [pc, #92]	; (8005f1c <HAL_GPIO_Init+0x2b0>)
 8005ebe:	68da      	ldr	r2, [r3, #12]
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	43db      	mvns	r3, r3
 8005ec4:	4915      	ldr	r1, [pc, #84]	; (8005f1c <HAL_GPIO_Init+0x2b0>)
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ecc:	3301      	adds	r3, #1
 8005ece:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	f47f aed0 	bne.w	8005c80 <HAL_GPIO_Init+0x14>
  }
}
 8005ee0:	bf00      	nop
 8005ee2:	372c      	adds	r7, #44	; 0x2c
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bc80      	pop	{r7}
 8005ee8:	4770      	bx	lr
 8005eea:	bf00      	nop
 8005eec:	10210000 	.word	0x10210000
 8005ef0:	10110000 	.word	0x10110000
 8005ef4:	10120000 	.word	0x10120000
 8005ef8:	10310000 	.word	0x10310000
 8005efc:	10320000 	.word	0x10320000
 8005f00:	10220000 	.word	0x10220000
 8005f04:	40021000 	.word	0x40021000
 8005f08:	40010000 	.word	0x40010000
 8005f0c:	40010800 	.word	0x40010800
 8005f10:	40010c00 	.word	0x40010c00
 8005f14:	40011000 	.word	0x40011000
 8005f18:	40011400 	.word	0x40011400
 8005f1c:	40010400 	.word	0x40010400

08005f20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	460b      	mov	r3, r1
 8005f2a:	807b      	strh	r3, [r7, #2]
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005f30:	787b      	ldrb	r3, [r7, #1]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d003      	beq.n	8005f3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f36:	887a      	ldrh	r2, [r7, #2]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005f3c:	e003      	b.n	8005f46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005f3e:	887b      	ldrh	r3, [r7, #2]
 8005f40:	041a      	lsls	r2, r3, #16
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	611a      	str	r2, [r3, #16]
}
 8005f46:	bf00      	nop
 8005f48:	370c      	adds	r7, #12
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bc80      	pop	{r7}
 8005f4e:	4770      	bx	lr

08005f50 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	460b      	mov	r3, r1
 8005f5a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	68da      	ldr	r2, [r3, #12]
 8005f60:	887b      	ldrh	r3, [r7, #2]
 8005f62:	4013      	ands	r3, r2
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d003      	beq.n	8005f70 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005f68:	887a      	ldrh	r2, [r7, #2]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8005f6e:	e002      	b.n	8005f76 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005f70:	887a      	ldrh	r2, [r7, #2]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	611a      	str	r2, [r3, #16]
}
 8005f76:	bf00      	nop
 8005f78:	370c      	adds	r7, #12
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bc80      	pop	{r7}
 8005f7e:	4770      	bx	lr

08005f80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d101      	bne.n	8005f92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e10f      	b.n	80061b2 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d106      	bne.n	8005fac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f7fe f926 	bl	80041f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2224      	movs	r2, #36	; 0x24
 8005fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f022 0201 	bic.w	r2, r2, #1
 8005fc2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005fc4:	f001 fc06 	bl	80077d4 <HAL_RCC_GetPCLK1Freq>
 8005fc8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	4a7b      	ldr	r2, [pc, #492]	; (80061bc <HAL_I2C_Init+0x23c>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d807      	bhi.n	8005fe4 <HAL_I2C_Init+0x64>
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	4a7a      	ldr	r2, [pc, #488]	; (80061c0 <HAL_I2C_Init+0x240>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	bf94      	ite	ls
 8005fdc:	2301      	movls	r3, #1
 8005fde:	2300      	movhi	r3, #0
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	e006      	b.n	8005ff2 <HAL_I2C_Init+0x72>
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	4a77      	ldr	r2, [pc, #476]	; (80061c4 <HAL_I2C_Init+0x244>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	bf94      	ite	ls
 8005fec:	2301      	movls	r3, #1
 8005fee:	2300      	movhi	r3, #0
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d001      	beq.n	8005ffa <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e0db      	b.n	80061b2 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	4a72      	ldr	r2, [pc, #456]	; (80061c8 <HAL_I2C_Init+0x248>)
 8005ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8006002:	0c9b      	lsrs	r3, r3, #18
 8006004:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68ba      	ldr	r2, [r7, #8]
 8006016:	430a      	orrs	r2, r1
 8006018:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	6a1b      	ldr	r3, [r3, #32]
 8006020:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	4a64      	ldr	r2, [pc, #400]	; (80061bc <HAL_I2C_Init+0x23c>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d802      	bhi.n	8006034 <HAL_I2C_Init+0xb4>
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	3301      	adds	r3, #1
 8006032:	e009      	b.n	8006048 <HAL_I2C_Init+0xc8>
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800603a:	fb02 f303 	mul.w	r3, r2, r3
 800603e:	4a63      	ldr	r2, [pc, #396]	; (80061cc <HAL_I2C_Init+0x24c>)
 8006040:	fba2 2303 	umull	r2, r3, r2, r3
 8006044:	099b      	lsrs	r3, r3, #6
 8006046:	3301      	adds	r3, #1
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	6812      	ldr	r2, [r2, #0]
 800604c:	430b      	orrs	r3, r1
 800604e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	69db      	ldr	r3, [r3, #28]
 8006056:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800605a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	4956      	ldr	r1, [pc, #344]	; (80061bc <HAL_I2C_Init+0x23c>)
 8006064:	428b      	cmp	r3, r1
 8006066:	d80d      	bhi.n	8006084 <HAL_I2C_Init+0x104>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	1e59      	subs	r1, r3, #1
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	005b      	lsls	r3, r3, #1
 8006072:	fbb1 f3f3 	udiv	r3, r1, r3
 8006076:	3301      	adds	r3, #1
 8006078:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800607c:	2b04      	cmp	r3, #4
 800607e:	bf38      	it	cc
 8006080:	2304      	movcc	r3, #4
 8006082:	e04f      	b.n	8006124 <HAL_I2C_Init+0x1a4>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d111      	bne.n	80060b0 <HAL_I2C_Init+0x130>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	1e58      	subs	r0, r3, #1
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6859      	ldr	r1, [r3, #4]
 8006094:	460b      	mov	r3, r1
 8006096:	005b      	lsls	r3, r3, #1
 8006098:	440b      	add	r3, r1
 800609a:	fbb0 f3f3 	udiv	r3, r0, r3
 800609e:	3301      	adds	r3, #1
 80060a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	bf0c      	ite	eq
 80060a8:	2301      	moveq	r3, #1
 80060aa:	2300      	movne	r3, #0
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	e012      	b.n	80060d6 <HAL_I2C_Init+0x156>
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	1e58      	subs	r0, r3, #1
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6859      	ldr	r1, [r3, #4]
 80060b8:	460b      	mov	r3, r1
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	440b      	add	r3, r1
 80060be:	0099      	lsls	r1, r3, #2
 80060c0:	440b      	add	r3, r1
 80060c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80060c6:	3301      	adds	r3, #1
 80060c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	bf0c      	ite	eq
 80060d0:	2301      	moveq	r3, #1
 80060d2:	2300      	movne	r3, #0
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d001      	beq.n	80060de <HAL_I2C_Init+0x15e>
 80060da:	2301      	movs	r3, #1
 80060dc:	e022      	b.n	8006124 <HAL_I2C_Init+0x1a4>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d10e      	bne.n	8006104 <HAL_I2C_Init+0x184>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	1e58      	subs	r0, r3, #1
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6859      	ldr	r1, [r3, #4]
 80060ee:	460b      	mov	r3, r1
 80060f0:	005b      	lsls	r3, r3, #1
 80060f2:	440b      	add	r3, r1
 80060f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80060f8:	3301      	adds	r3, #1
 80060fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006102:	e00f      	b.n	8006124 <HAL_I2C_Init+0x1a4>
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	1e58      	subs	r0, r3, #1
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6859      	ldr	r1, [r3, #4]
 800610c:	460b      	mov	r3, r1
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	440b      	add	r3, r1
 8006112:	0099      	lsls	r1, r3, #2
 8006114:	440b      	add	r3, r1
 8006116:	fbb0 f3f3 	udiv	r3, r0, r3
 800611a:	3301      	adds	r3, #1
 800611c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006120:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006124:	6879      	ldr	r1, [r7, #4]
 8006126:	6809      	ldr	r1, [r1, #0]
 8006128:	4313      	orrs	r3, r2
 800612a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	69da      	ldr	r2, [r3, #28]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a1b      	ldr	r3, [r3, #32]
 800613e:	431a      	orrs	r2, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	430a      	orrs	r2, r1
 8006146:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006152:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	6911      	ldr	r1, [r2, #16]
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	68d2      	ldr	r2, [r2, #12]
 800615e:	4311      	orrs	r1, r2
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	6812      	ldr	r2, [r2, #0]
 8006164:	430b      	orrs	r3, r1
 8006166:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	695a      	ldr	r2, [r3, #20]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	699b      	ldr	r3, [r3, #24]
 800617a:	431a      	orrs	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	430a      	orrs	r2, r1
 8006182:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f042 0201 	orr.w	r2, r2, #1
 8006192:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2220      	movs	r2, #32
 800619e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3710      	adds	r7, #16
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	000186a0 	.word	0x000186a0
 80061c0:	001e847f 	.word	0x001e847f
 80061c4:	003d08ff 	.word	0x003d08ff
 80061c8:	431bde83 	.word	0x431bde83
 80061cc:	10624dd3 	.word	0x10624dd3

080061d0 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d101      	bne.n	80061e2 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e02b      	b.n	800623a <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80061ea:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing 0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f245 5255 	movw	r2, #21845	; 0x5555
 80061f4:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	6852      	ldr	r2, [r2, #4]
 80061fe:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	6892      	ldr	r2, [r2, #8]
 8006208:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800620a:	f7fe f9df 	bl	80045cc <HAL_GetTick>
 800620e:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != RESET)
 8006210:	e008      	b.n	8006224 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8006212:	f7fe f9db 	bl	80045cc <HAL_GetTick>
 8006216:	4602      	mov	r2, r0
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	1ad3      	subs	r3, r2, r3
 800621c:	2b30      	cmp	r3, #48	; 0x30
 800621e:	d901      	bls.n	8006224 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8006220:	2303      	movs	r3, #3
 8006222:	e00a      	b.n	800623a <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != RESET)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d1f1      	bne.n	8006212 <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006236:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3710      	adds	r7, #16
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}

08006242 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8006242:	b480      	push	{r7}
 8006244:	b083      	sub	sp, #12
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006252:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	370c      	adds	r7, #12
 800625a:	46bd      	mov	sp, r7
 800625c:	bc80      	pop	{r7}
 800625e:	4770      	bx	lr

08006260 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006262:	b08b      	sub	sp, #44	; 0x2c
 8006264:	af06      	add	r7, sp, #24
 8006266:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d101      	bne.n	8006272 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e0d3      	b.n	800641a <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8006278:	b2db      	uxtb	r3, r3
 800627a:	2b00      	cmp	r3, #0
 800627c:	d106      	bne.n	800628c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f004 fdc4 	bl	800ae14 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2203      	movs	r2, #3
 8006290:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4618      	mov	r0, r3
 800629a:	f001 ff3b 	bl	8008114 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	603b      	str	r3, [r7, #0]
 80062a4:	687e      	ldr	r6, [r7, #4]
 80062a6:	466d      	mov	r5, sp
 80062a8:	f106 0410 	add.w	r4, r6, #16
 80062ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80062ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80062b0:	6823      	ldr	r3, [r4, #0]
 80062b2:	602b      	str	r3, [r5, #0]
 80062b4:	1d33      	adds	r3, r6, #4
 80062b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80062b8:	6838      	ldr	r0, [r7, #0]
 80062ba:	f001 ff04 	bl	80080c6 <USB_CoreInit>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d005      	beq.n	80062d0 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2202      	movs	r2, #2
 80062c8:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	e0a4      	b.n	800641a <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	2100      	movs	r1, #0
 80062d6:	4618      	mov	r0, r3
 80062d8:	f001 ff38 	bl	800814c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80062dc:	2300      	movs	r3, #0
 80062de:	73fb      	strb	r3, [r7, #15]
 80062e0:	e035      	b.n	800634e <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80062e2:	7bfb      	ldrb	r3, [r7, #15]
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	015b      	lsls	r3, r3, #5
 80062e8:	4413      	add	r3, r2
 80062ea:	3329      	adds	r3, #41	; 0x29
 80062ec:	2201      	movs	r2, #1
 80062ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80062f0:	7bfb      	ldrb	r3, [r7, #15]
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	015b      	lsls	r3, r3, #5
 80062f6:	4413      	add	r3, r2
 80062f8:	3328      	adds	r3, #40	; 0x28
 80062fa:	7bfa      	ldrb	r2, [r7, #15]
 80062fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80062fe:	7bfb      	ldrb	r3, [r7, #15]
 8006300:	7bfa      	ldrb	r2, [r7, #15]
 8006302:	b291      	uxth	r1, r2
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	015b      	lsls	r3, r3, #5
 8006308:	4413      	add	r3, r2
 800630a:	3336      	adds	r3, #54	; 0x36
 800630c:	460a      	mov	r2, r1
 800630e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006310:	7bfb      	ldrb	r3, [r7, #15]
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	015b      	lsls	r3, r3, #5
 8006316:	4413      	add	r3, r2
 8006318:	332b      	adds	r3, #43	; 0x2b
 800631a:	2200      	movs	r2, #0
 800631c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800631e:	7bfb      	ldrb	r3, [r7, #15]
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	015b      	lsls	r3, r3, #5
 8006324:	4413      	add	r3, r2
 8006326:	3338      	adds	r3, #56	; 0x38
 8006328:	2200      	movs	r2, #0
 800632a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800632c:	7bfb      	ldrb	r3, [r7, #15]
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	015b      	lsls	r3, r3, #5
 8006332:	4413      	add	r3, r2
 8006334:	333c      	adds	r3, #60	; 0x3c
 8006336:	2200      	movs	r2, #0
 8006338:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800633a:	7bfb      	ldrb	r3, [r7, #15]
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	3302      	adds	r3, #2
 8006340:	015b      	lsls	r3, r3, #5
 8006342:	4413      	add	r3, r2
 8006344:	2200      	movs	r2, #0
 8006346:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006348:	7bfb      	ldrb	r3, [r7, #15]
 800634a:	3301      	adds	r3, #1
 800634c:	73fb      	strb	r3, [r7, #15]
 800634e:	7bfa      	ldrb	r2, [r7, #15]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	429a      	cmp	r2, r3
 8006356:	d3c4      	bcc.n	80062e2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006358:	2300      	movs	r3, #0
 800635a:	73fb      	strb	r3, [r7, #15]
 800635c:	e031      	b.n	80063c2 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800635e:	7bfb      	ldrb	r3, [r7, #15]
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	015b      	lsls	r3, r3, #5
 8006364:	4413      	add	r3, r2
 8006366:	f203 1329 	addw	r3, r3, #297	; 0x129
 800636a:	2200      	movs	r2, #0
 800636c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800636e:	7bfb      	ldrb	r3, [r7, #15]
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	015b      	lsls	r3, r3, #5
 8006374:	4413      	add	r3, r2
 8006376:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800637a:	7bfa      	ldrb	r2, [r7, #15]
 800637c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800637e:	7bfb      	ldrb	r3, [r7, #15]
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	015b      	lsls	r3, r3, #5
 8006384:	4413      	add	r3, r2
 8006386:	f203 132b 	addw	r3, r3, #299	; 0x12b
 800638a:	2200      	movs	r2, #0
 800638c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800638e:	7bfb      	ldrb	r3, [r7, #15]
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	015b      	lsls	r3, r3, #5
 8006394:	4413      	add	r3, r2
 8006396:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800639a:	2200      	movs	r2, #0
 800639c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800639e:	7bfb      	ldrb	r3, [r7, #15]
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	015b      	lsls	r3, r3, #5
 80063a4:	4413      	add	r3, r2
 80063a6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80063aa:	2200      	movs	r2, #0
 80063ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80063ae:	7bfb      	ldrb	r3, [r7, #15]
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	330a      	adds	r3, #10
 80063b4:	015b      	lsls	r3, r3, #5
 80063b6:	4413      	add	r3, r2
 80063b8:	2200      	movs	r2, #0
 80063ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80063bc:	7bfb      	ldrb	r3, [r7, #15]
 80063be:	3301      	adds	r3, #1
 80063c0:	73fb      	strb	r3, [r7, #15]
 80063c2:	7bfa      	ldrb	r2, [r7, #15]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d3c8      	bcc.n	800635e <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	603b      	str	r3, [r7, #0]
 80063d2:	687e      	ldr	r6, [r7, #4]
 80063d4:	466d      	mov	r5, sp
 80063d6:	f106 0410 	add.w	r4, r6, #16
 80063da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80063dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80063de:	6823      	ldr	r3, [r4, #0]
 80063e0:	602b      	str	r3, [r5, #0]
 80063e2:	1d33      	adds	r3, r6, #4
 80063e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80063e6:	6838      	ldr	r0, [r7, #0]
 80063e8:	f001 febc 	bl	8008164 <USB_DevInit>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d005      	beq.n	80063fe <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2202      	movs	r2, #2
 80063f6:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e00d      	b.n	800641a <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2201      	movs	r2, #1
 800640a:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4618      	mov	r0, r3
 8006414:	f002 fef9 	bl	800920a <USB_DevDisconnect>

  return HAL_OK;
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	3714      	adds	r7, #20
 800641e:	46bd      	mov	sp, r7
 8006420:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006422 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006422:	b580      	push	{r7, lr}
 8006424:	b082      	sub	sp, #8
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8006430:	2b01      	cmp	r3, #1
 8006432:	d101      	bne.n	8006438 <HAL_PCD_Start+0x16>
 8006434:	2302      	movs	r3, #2
 8006436:	e016      	b.n	8006466 <HAL_PCD_Start+0x44>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8006440:	2101      	movs	r1, #1
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f004 ff55 	bl	800b2f2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4618      	mov	r0, r3
 800644e:	f002 fed2 	bl	80091f6 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4618      	mov	r0, r3
 8006458:	f001 fe45 	bl	80080e6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3708      	adds	r7, #8
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}

0800646e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800646e:	b580      	push	{r7, lr}
 8006470:	b082      	sub	sp, #8
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4618      	mov	r0, r3
 800647c:	f002 fecf 	bl	800921e <USB_ReadInterrupts>
 8006480:	4603      	mov	r3, r0
 8006482:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006486:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800648a:	d102      	bne.n	8006492 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 faf3 	bl	8006a78 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4618      	mov	r0, r3
 8006498:	f002 fec1 	bl	800921e <USB_ReadInterrupts>
 800649c:	4603      	mov	r3, r0
 800649e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064a6:	d112      	bne.n	80064ce <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80064b0:	b29a      	uxth	r2, r3
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064ba:	b292      	uxth	r2, r2
 80064bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f004 fd24 	bl	800af0e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80064c6:	2100      	movs	r1, #0
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 f8de 	bl	800668a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4618      	mov	r0, r3
 80064d4:	f002 fea3 	bl	800921e <USB_ReadInterrupts>
 80064d8:	4603      	mov	r3, r0
 80064da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064e2:	d10b      	bne.n	80064fc <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80064ec:	b29a      	uxth	r2, r3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80064f6:	b292      	uxth	r2, r2
 80064f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4618      	mov	r0, r3
 8006502:	f002 fe8c 	bl	800921e <USB_ReadInterrupts>
 8006506:	4603      	mov	r3, r0
 8006508:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800650c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006510:	d10b      	bne.n	800652a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800651a:	b29a      	uxth	r2, r3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006524:	b292      	uxth	r2, r2
 8006526:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4618      	mov	r0, r3
 8006530:	f002 fe75 	bl	800921e <USB_ReadInterrupts>
 8006534:	4603      	mov	r3, r0
 8006536:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800653a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800653e:	d126      	bne.n	800658e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006548:	b29a      	uxth	r2, r3
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f022 0204 	bic.w	r2, r2, #4
 8006552:	b292      	uxth	r2, r2
 8006554:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006560:	b29a      	uxth	r2, r3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f022 0208 	bic.w	r2, r2, #8
 800656a:	b292      	uxth	r2, r2
 800656c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f004 fd05 	bl	800af80 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800657e:	b29a      	uxth	r2, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006588:	b292      	uxth	r2, r2
 800658a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4618      	mov	r0, r3
 8006594:	f002 fe43 	bl	800921e <USB_ReadInterrupts>
 8006598:	4603      	mov	r3, r0
 800659a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800659e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065a2:	d13d      	bne.n	8006620 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80065ac:	b29a      	uxth	r2, r3
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f042 0208 	orr.w	r2, r2, #8
 80065b6:	b292      	uxth	r2, r2
 80065b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065ce:	b292      	uxth	r2, r2
 80065d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80065dc:	b29a      	uxth	r2, r3
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f042 0204 	orr.w	r2, r2, #4
 80065e6:	b292      	uxth	r2, r2
 80065e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4618      	mov	r0, r3
 80065f2:	f002 fe14 	bl	800921e <USB_ReadInterrupts>
 80065f6:	4603      	mov	r3, r0
 80065f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006600:	d10b      	bne.n	800661a <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800660a:	b29a      	uxth	r2, r3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006614:	b292      	uxth	r2, r2
 8006616:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f004 fc96 	bl	800af4c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4618      	mov	r0, r3
 8006626:	f002 fdfa 	bl	800921e <USB_ReadInterrupts>
 800662a:	4603      	mov	r3, r0
 800662c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006630:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006634:	d10e      	bne.n	8006654 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800663e:	b29a      	uxth	r2, r3
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006648:	b292      	uxth	r2, r2
 800664a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f004 fc4f 	bl	800aef2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4618      	mov	r0, r3
 800665a:	f002 fde0 	bl	800921e <USB_ReadInterrupts>
 800665e:	4603      	mov	r3, r0
 8006660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006664:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006668:	d10b      	bne.n	8006682 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006672:	b29a      	uxth	r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800667c:	b292      	uxth	r2, r2
 800667e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8006682:	bf00      	nop
 8006684:	3708      	adds	r7, #8
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}

0800668a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800668a:	b580      	push	{r7, lr}
 800668c:	b082      	sub	sp, #8
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
 8006692:	460b      	mov	r3, r1
 8006694:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800669c:	2b01      	cmp	r3, #1
 800669e:	d101      	bne.n	80066a4 <HAL_PCD_SetAddress+0x1a>
 80066a0:	2302      	movs	r3, #2
 80066a2:	e013      	b.n	80066cc <HAL_PCD_SetAddress+0x42>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	78fa      	ldrb	r2, [r7, #3]
 80066b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	78fa      	ldrb	r2, [r7, #3]
 80066ba:	4611      	mov	r1, r2
 80066bc:	4618      	mov	r0, r3
 80066be:	f002 fd87 	bl	80091d0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80066ca:	2300      	movs	r3, #0
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3708      	adds	r7, #8
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	4608      	mov	r0, r1
 80066de:	4611      	mov	r1, r2
 80066e0:	461a      	mov	r2, r3
 80066e2:	4603      	mov	r3, r0
 80066e4:	70fb      	strb	r3, [r7, #3]
 80066e6:	460b      	mov	r3, r1
 80066e8:	803b      	strh	r3, [r7, #0]
 80066ea:	4613      	mov	r3, r2
 80066ec:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80066ee:	2300      	movs	r3, #0
 80066f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80066f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	da0b      	bge.n	8006712 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80066fa:	78fb      	ldrb	r3, [r7, #3]
 80066fc:	f003 0307 	and.w	r3, r3, #7
 8006700:	015b      	lsls	r3, r3, #5
 8006702:	3328      	adds	r3, #40	; 0x28
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	4413      	add	r3, r2
 8006708:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2201      	movs	r2, #1
 800670e:	705a      	strb	r2, [r3, #1]
 8006710:	e00b      	b.n	800672a <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006712:	78fb      	ldrb	r3, [r7, #3]
 8006714:	f003 0307 	and.w	r3, r3, #7
 8006718:	015b      	lsls	r3, r3, #5
 800671a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	4413      	add	r3, r2
 8006722:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2200      	movs	r2, #0
 8006728:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800672a:	78fb      	ldrb	r3, [r7, #3]
 800672c:	f003 0307 	and.w	r3, r3, #7
 8006730:	b2da      	uxtb	r2, r3
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006736:	883a      	ldrh	r2, [r7, #0]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	78ba      	ldrb	r2, [r7, #2]
 8006740:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	785b      	ldrb	r3, [r3, #1]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d004      	beq.n	8006754 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	b29a      	uxth	r2, r3
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006754:	78bb      	ldrb	r3, [r7, #2]
 8006756:	2b02      	cmp	r3, #2
 8006758:	d102      	bne.n	8006760 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2200      	movs	r2, #0
 800675e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8006766:	2b01      	cmp	r3, #1
 8006768:	d101      	bne.n	800676e <HAL_PCD_EP_Open+0x9a>
 800676a:	2302      	movs	r3, #2
 800676c:	e00e      	b.n	800678c <HAL_PCD_EP_Open+0xb8>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2201      	movs	r2, #1
 8006772:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68f9      	ldr	r1, [r7, #12]
 800677c:	4618      	mov	r0, r3
 800677e:	f001 fd15 	bl	80081ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 800678a:	7afb      	ldrb	r3, [r7, #11]
}
 800678c:	4618      	mov	r0, r3
 800678e:	3710      	adds	r7, #16
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	460b      	mov	r3, r1
 800679e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80067a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	da0b      	bge.n	80067c0 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80067a8:	78fb      	ldrb	r3, [r7, #3]
 80067aa:	f003 0307 	and.w	r3, r3, #7
 80067ae:	015b      	lsls	r3, r3, #5
 80067b0:	3328      	adds	r3, #40	; 0x28
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	4413      	add	r3, r2
 80067b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2201      	movs	r2, #1
 80067bc:	705a      	strb	r2, [r3, #1]
 80067be:	e00b      	b.n	80067d8 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80067c0:	78fb      	ldrb	r3, [r7, #3]
 80067c2:	f003 0307 	and.w	r3, r3, #7
 80067c6:	015b      	lsls	r3, r3, #5
 80067c8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	4413      	add	r3, r2
 80067d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2200      	movs	r2, #0
 80067d6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80067d8:	78fb      	ldrb	r3, [r7, #3]
 80067da:	f003 0307 	and.w	r3, r3, #7
 80067de:	b2da      	uxtb	r2, r3
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d101      	bne.n	80067f2 <HAL_PCD_EP_Close+0x5e>
 80067ee:	2302      	movs	r3, #2
 80067f0:	e00e      	b.n	8006810 <HAL_PCD_EP_Close+0x7c>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2201      	movs	r2, #1
 80067f6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68f9      	ldr	r1, [r7, #12]
 8006800:	4618      	mov	r0, r3
 8006802:	f001 ffc1 	bl	8008788 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800680e:	2300      	movs	r3, #0
}
 8006810:	4618      	mov	r0, r3
 8006812:	3710      	adds	r7, #16
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b086      	sub	sp, #24
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	607a      	str	r2, [r7, #4]
 8006822:	603b      	str	r3, [r7, #0]
 8006824:	460b      	mov	r3, r1
 8006826:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006828:	7afb      	ldrb	r3, [r7, #11]
 800682a:	f003 0307 	and.w	r3, r3, #7
 800682e:	015b      	lsls	r3, r3, #5
 8006830:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	4413      	add	r3, r2
 8006838:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	683a      	ldr	r2, [r7, #0]
 8006844:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	2200      	movs	r2, #0
 800684a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	2200      	movs	r2, #0
 8006850:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006852:	7afb      	ldrb	r3, [r7, #11]
 8006854:	f003 0307 	and.w	r3, r3, #7
 8006858:	b2da      	uxtb	r2, r3
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800685e:	7afb      	ldrb	r3, [r7, #11]
 8006860:	f003 0307 	and.w	r3, r3, #7
 8006864:	2b00      	cmp	r3, #0
 8006866:	d106      	bne.n	8006876 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	6979      	ldr	r1, [r7, #20]
 800686e:	4618      	mov	r0, r3
 8006870:	f002 f920 	bl	8008ab4 <USB_EPStartXfer>
 8006874:	e005      	b.n	8006882 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	6979      	ldr	r1, [r7, #20]
 800687c:	4618      	mov	r0, r3
 800687e:	f002 f919 	bl	8008ab4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	3718      	adds	r7, #24
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	460b      	mov	r3, r1
 8006896:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006898:	78fb      	ldrb	r3, [r7, #3]
 800689a:	f003 0307 	and.w	r3, r3, #7
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	330a      	adds	r3, #10
 80068a2:	015b      	lsls	r3, r3, #5
 80068a4:	4413      	add	r3, r2
 80068a6:	3304      	adds	r3, #4
 80068a8:	681b      	ldr	r3, [r3, #0]
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	370c      	adds	r7, #12
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bc80      	pop	{r7}
 80068b2:	4770      	bx	lr

080068b4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b086      	sub	sp, #24
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	607a      	str	r2, [r7, #4]
 80068be:	603b      	str	r3, [r7, #0]
 80068c0:	460b      	mov	r3, r1
 80068c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80068c4:	7afb      	ldrb	r3, [r7, #11]
 80068c6:	f003 0307 	and.w	r3, r3, #7
 80068ca:	015b      	lsls	r3, r3, #5
 80068cc:	3328      	adds	r3, #40	; 0x28
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	4413      	add	r3, r2
 80068d2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	683a      	ldr	r2, [r7, #0]
 80068de:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	2200      	movs	r2, #0
 80068e4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	2201      	movs	r2, #1
 80068ea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80068ec:	7afb      	ldrb	r3, [r7, #11]
 80068ee:	f003 0307 	and.w	r3, r3, #7
 80068f2:	b2da      	uxtb	r2, r3
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80068f8:	7afb      	ldrb	r3, [r7, #11]
 80068fa:	f003 0307 	and.w	r3, r3, #7
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d106      	bne.n	8006910 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	6979      	ldr	r1, [r7, #20]
 8006908:	4618      	mov	r0, r3
 800690a:	f002 f8d3 	bl	8008ab4 <USB_EPStartXfer>
 800690e:	e005      	b.n	800691c <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	6979      	ldr	r1, [r7, #20]
 8006916:	4618      	mov	r0, r3
 8006918:	f002 f8cc 	bl	8008ab4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	3718      	adds	r7, #24
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}

08006926 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006926:	b580      	push	{r7, lr}
 8006928:	b084      	sub	sp, #16
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
 800692e:	460b      	mov	r3, r1
 8006930:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006932:	78fb      	ldrb	r3, [r7, #3]
 8006934:	f003 0207 	and.w	r2, r3, #7
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	429a      	cmp	r2, r3
 800693e:	d901      	bls.n	8006944 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	e046      	b.n	80069d2 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006944:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006948:	2b00      	cmp	r3, #0
 800694a:	da0b      	bge.n	8006964 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800694c:	78fb      	ldrb	r3, [r7, #3]
 800694e:	f003 0307 	and.w	r3, r3, #7
 8006952:	015b      	lsls	r3, r3, #5
 8006954:	3328      	adds	r3, #40	; 0x28
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	4413      	add	r3, r2
 800695a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2201      	movs	r2, #1
 8006960:	705a      	strb	r2, [r3, #1]
 8006962:	e009      	b.n	8006978 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006964:	78fb      	ldrb	r3, [r7, #3]
 8006966:	015b      	lsls	r3, r3, #5
 8006968:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	4413      	add	r3, r2
 8006970:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2200      	movs	r2, #0
 8006976:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2201      	movs	r2, #1
 800697c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800697e:	78fb      	ldrb	r3, [r7, #3]
 8006980:	f003 0307 	and.w	r3, r3, #7
 8006984:	b2da      	uxtb	r2, r3
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8006990:	2b01      	cmp	r3, #1
 8006992:	d101      	bne.n	8006998 <HAL_PCD_EP_SetStall+0x72>
 8006994:	2302      	movs	r3, #2
 8006996:	e01c      	b.n	80069d2 <HAL_PCD_EP_SetStall+0xac>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2201      	movs	r2, #1
 800699c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	68f9      	ldr	r1, [r7, #12]
 80069a6:	4618      	mov	r0, r3
 80069a8:	f002 fb3c 	bl	8009024 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80069ac:	78fb      	ldrb	r3, [r7, #3]
 80069ae:	f003 0307 	and.w	r3, r3, #7
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d108      	bne.n	80069c8 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80069c0:	4619      	mov	r1, r3
 80069c2:	4610      	mov	r0, r2
 80069c4:	f002 fc3a 	bl	800923c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80069da:	b580      	push	{r7, lr}
 80069dc:	b084      	sub	sp, #16
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
 80069e2:	460b      	mov	r3, r1
 80069e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80069e6:	78fb      	ldrb	r3, [r7, #3]
 80069e8:	f003 020f 	and.w	r2, r3, #15
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d901      	bls.n	80069f8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	e03a      	b.n	8006a6e <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80069f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	da0b      	bge.n	8006a18 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a00:	78fb      	ldrb	r3, [r7, #3]
 8006a02:	f003 0307 	and.w	r3, r3, #7
 8006a06:	015b      	lsls	r3, r3, #5
 8006a08:	3328      	adds	r3, #40	; 0x28
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2201      	movs	r2, #1
 8006a14:	705a      	strb	r2, [r3, #1]
 8006a16:	e00b      	b.n	8006a30 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a18:	78fb      	ldrb	r3, [r7, #3]
 8006a1a:	f003 0307 	and.w	r3, r3, #7
 8006a1e:	015b      	lsls	r3, r3, #5
 8006a20:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	4413      	add	r3, r2
 8006a28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2200      	movs	r2, #0
 8006a34:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006a36:	78fb      	ldrb	r3, [r7, #3]
 8006a38:	f003 0307 	and.w	r3, r3, #7
 8006a3c:	b2da      	uxtb	r2, r3
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d101      	bne.n	8006a50 <HAL_PCD_EP_ClrStall+0x76>
 8006a4c:	2302      	movs	r3, #2
 8006a4e:	e00e      	b.n	8006a6e <HAL_PCD_EP_ClrStall+0x94>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68f9      	ldr	r1, [r7, #12]
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f002 fb22 	bl	80090a8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3710      	adds	r7, #16
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
	...

08006a78 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006a78:	b590      	push	{r4, r7, lr}
 8006a7a:	b089      	sub	sp, #36	; 0x24
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006a80:	e282      	b.n	8006f88 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006a8a:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8006a8c:	8afb      	ldrh	r3, [r7, #22]
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	f003 030f 	and.w	r3, r3, #15
 8006a94:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8006a96:	7d7b      	ldrb	r3, [r7, #21]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	f040 8142 	bne.w	8006d22 <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006a9e:	8afb      	ldrh	r3, [r7, #22]
 8006aa0:	f003 0310 	and.w	r3, r3, #16
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d151      	bne.n	8006b4c <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	881b      	ldrh	r3, [r3, #0]
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ab8:	b29c      	uxth	r4, r3
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8006ac2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	3328      	adds	r3, #40	; 0x28
 8006ace:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	461a      	mov	r2, r3
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	00db      	lsls	r3, r3, #3
 8006ae2:	4413      	add	r3, r2
 8006ae4:	3302      	adds	r3, #2
 8006ae6:	005b      	lsls	r3, r3, #1
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	6812      	ldr	r2, [r2, #0]
 8006aec:	4413      	add	r3, r2
 8006aee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006af2:	881b      	ldrh	r3, [r3, #0]
 8006af4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	695a      	ldr	r2, [r3, #20]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	69db      	ldr	r3, [r3, #28]
 8006b04:	441a      	add	r2, r3
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006b0a:	2100      	movs	r1, #0
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f004 f9d9 	bl	800aec4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	f000 8234 	beq.w	8006f88 <PCD_EP_ISR_Handler+0x510>
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	699b      	ldr	r3, [r3, #24]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	f040 822f 	bne.w	8006f88 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006b36:	b2da      	uxtb	r2, r3
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	b292      	uxth	r2, r2
 8006b3e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006b4a:	e21d      	b.n	8006f88 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8006b52:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	881b      	ldrh	r3, [r3, #0]
 8006b5a:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006b5c:	8a7b      	ldrh	r3, [r7, #18]
 8006b5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d033      	beq.n	8006bce <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	461a      	mov	r2, r3
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	00db      	lsls	r3, r3, #3
 8006b78:	4413      	add	r3, r2
 8006b7a:	3306      	adds	r3, #6
 8006b7c:	005b      	lsls	r3, r3, #1
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	6812      	ldr	r2, [r2, #0]
 8006b82:	4413      	add	r3, r2
 8006b84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b88:	881b      	ldrh	r3, [r3, #0]
 8006b8a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6818      	ldr	r0, [r3, #0]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	f002 fb98 	bl	80092da <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	881b      	ldrh	r3, [r3, #0]
 8006bb0:	b29a      	uxth	r2, r3
 8006bb2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006bb6:	4013      	ands	r3, r2
 8006bb8:	b29c      	uxth	r4, r3
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8006bc2:	b292      	uxth	r2, r2
 8006bc4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f004 f952 	bl	800ae70 <HAL_PCD_SetupStageCallback>
 8006bcc:	e1dc      	b.n	8006f88 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006bce:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	f280 81d8 	bge.w	8006f88 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	881b      	ldrh	r3, [r3, #0]
 8006bde:	b29a      	uxth	r2, r3
 8006be0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006be4:	4013      	ands	r3, r2
 8006be6:	b29c      	uxth	r4, r3
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8006bf0:	b292      	uxth	r2, r2
 8006bf2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	461a      	mov	r2, r3
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	00db      	lsls	r3, r3, #3
 8006c06:	4413      	add	r3, r2
 8006c08:	3306      	adds	r3, #6
 8006c0a:	005b      	lsls	r3, r3, #1
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	6812      	ldr	r2, [r2, #0]
 8006c10:	4413      	add	r3, r2
 8006c12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c16:	881b      	ldrh	r3, [r3, #0]
 8006c18:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	69db      	ldr	r3, [r3, #28]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d019      	beq.n	8006c5c <PCD_EP_ISR_Handler+0x1e4>
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	695b      	ldr	r3, [r3, #20]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d015      	beq.n	8006c5c <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6818      	ldr	r0, [r3, #0]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6959      	ldr	r1, [r3, #20]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	f002 fb4a 	bl	80092da <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	695a      	ldr	r2, [r3, #20]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	69db      	ldr	r3, [r3, #28]
 8006c4e:	441a      	add	r2, r3
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006c54:	2100      	movs	r1, #0
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f004 f91c 	bl	800ae94 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	461c      	mov	r4, r3
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	441c      	add	r4, r3
 8006c6e:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8006c72:	461c      	mov	r4, r3
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d10e      	bne.n	8006c9a <PCD_EP_ISR_Handler+0x222>
 8006c7c:	8823      	ldrh	r3, [r4, #0]
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	8023      	strh	r3, [r4, #0]
 8006c88:	8823      	ldrh	r3, [r4, #0]
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	8023      	strh	r3, [r4, #0]
 8006c98:	e02d      	b.n	8006cf6 <PCD_EP_ISR_Handler+0x27e>
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	2b3e      	cmp	r3, #62	; 0x3e
 8006ca0:	d812      	bhi.n	8006cc8 <PCD_EP_ISR_Handler+0x250>
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	691b      	ldr	r3, [r3, #16]
 8006ca6:	085b      	lsrs	r3, r3, #1
 8006ca8:	61bb      	str	r3, [r7, #24]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	f003 0301 	and.w	r3, r3, #1
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d002      	beq.n	8006cbc <PCD_EP_ISR_Handler+0x244>
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	3301      	adds	r3, #1
 8006cba:	61bb      	str	r3, [r7, #24]
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	029b      	lsls	r3, r3, #10
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	8023      	strh	r3, [r4, #0]
 8006cc6:	e016      	b.n	8006cf6 <PCD_EP_ISR_Handler+0x27e>
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	095b      	lsrs	r3, r3, #5
 8006cce:	61bb      	str	r3, [r7, #24]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	f003 031f 	and.w	r3, r3, #31
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d102      	bne.n	8006ce2 <PCD_EP_ISR_Handler+0x26a>
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	3b01      	subs	r3, #1
 8006ce0:	61bb      	str	r3, [r7, #24]
 8006ce2:	69bb      	ldr	r3, [r7, #24]
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	029b      	lsls	r3, r3, #10
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	881b      	ldrh	r3, [r3, #0]
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d06:	b29c      	uxth	r4, r3
 8006d08:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006d0c:	b29c      	uxth	r4, r3
 8006d0e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006d12:	b29c      	uxth	r4, r3
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	4ba2      	ldr	r3, [pc, #648]	; (8006fa4 <PCD_EP_ISR_Handler+0x52c>)
 8006d1a:	4323      	orrs	r3, r4
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	8013      	strh	r3, [r2, #0]
 8006d20:	e132      	b.n	8006f88 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	461a      	mov	r2, r3
 8006d28:	7d7b      	ldrb	r3, [r7, #21]
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	4413      	add	r3, r2
 8006d2e:	881b      	ldrh	r3, [r3, #0]
 8006d30:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006d32:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	f280 80d1 	bge.w	8006ede <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	461a      	mov	r2, r3
 8006d42:	7d7b      	ldrb	r3, [r7, #21]
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	4413      	add	r3, r2
 8006d48:	881b      	ldrh	r3, [r3, #0]
 8006d4a:	b29a      	uxth	r2, r3
 8006d4c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006d50:	4013      	ands	r3, r2
 8006d52:	b29c      	uxth	r4, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	461a      	mov	r2, r3
 8006d5a:	7d7b      	ldrb	r3, [r7, #21]
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	4413      	add	r3, r2
 8006d60:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8006d64:	b292      	uxth	r2, r2
 8006d66:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006d68:	7d7b      	ldrb	r3, [r7, #21]
 8006d6a:	015b      	lsls	r3, r3, #5
 8006d6c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	4413      	add	r3, r2
 8006d74:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	7b1b      	ldrb	r3, [r3, #12]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d121      	bne.n	8006dc2 <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	461a      	mov	r2, r3
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	00db      	lsls	r3, r3, #3
 8006d90:	4413      	add	r3, r2
 8006d92:	3306      	adds	r3, #6
 8006d94:	005b      	lsls	r3, r3, #1
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	6812      	ldr	r2, [r2, #0]
 8006d9a:	4413      	add	r3, r2
 8006d9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006da0:	881b      	ldrh	r3, [r3, #0]
 8006da2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006da6:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8006da8:	8bfb      	ldrh	r3, [r7, #30]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d072      	beq.n	8006e94 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6818      	ldr	r0, [r3, #0]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	6959      	ldr	r1, [r3, #20]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	88da      	ldrh	r2, [r3, #6]
 8006dba:	8bfb      	ldrh	r3, [r7, #30]
 8006dbc:	f002 fa8d 	bl	80092da <USB_ReadPMA>
 8006dc0:	e068      	b.n	8006e94 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	4413      	add	r3, r2
 8006dd0:	881b      	ldrh	r3, [r3, #0]
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d021      	beq.n	8006e20 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	461a      	mov	r2, r3
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	00db      	lsls	r3, r3, #3
 8006dee:	4413      	add	r3, r2
 8006df0:	3302      	adds	r3, #2
 8006df2:	005b      	lsls	r3, r3, #1
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	6812      	ldr	r2, [r2, #0]
 8006df8:	4413      	add	r3, r2
 8006dfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dfe:	881b      	ldrh	r3, [r3, #0]
 8006e00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e04:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8006e06:	8bfb      	ldrh	r3, [r7, #30]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d02a      	beq.n	8006e62 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6818      	ldr	r0, [r3, #0]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6959      	ldr	r1, [r3, #20]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	891a      	ldrh	r2, [r3, #8]
 8006e18:	8bfb      	ldrh	r3, [r7, #30]
 8006e1a:	f002 fa5e 	bl	80092da <USB_ReadPMA>
 8006e1e:	e020      	b.n	8006e62 <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	00db      	lsls	r3, r3, #3
 8006e32:	4413      	add	r3, r2
 8006e34:	3306      	adds	r3, #6
 8006e36:	005b      	lsls	r3, r3, #1
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	6812      	ldr	r2, [r2, #0]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e42:	881b      	ldrh	r3, [r3, #0]
 8006e44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e48:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8006e4a:	8bfb      	ldrh	r3, [r7, #30]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d008      	beq.n	8006e62 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6818      	ldr	r0, [r3, #0]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6959      	ldr	r1, [r3, #20]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	895a      	ldrh	r2, [r3, #10]
 8006e5c:	8bfb      	ldrh	r3, [r7, #30]
 8006e5e:	f002 fa3c 	bl	80092da <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	461a      	mov	r2, r3
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	4413      	add	r3, r2
 8006e70:	881b      	ldrh	r3, [r3, #0]
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e7c:	b29c      	uxth	r4, r3
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	461a      	mov	r2, r3
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	441a      	add	r2, r3
 8006e8c:	4b46      	ldr	r3, [pc, #280]	; (8006fa8 <PCD_EP_ISR_Handler+0x530>)
 8006e8e:	4323      	orrs	r3, r4
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	69da      	ldr	r2, [r3, #28]
 8006e98:	8bfb      	ldrh	r3, [r7, #30]
 8006e9a:	441a      	add	r2, r3
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	695a      	ldr	r2, [r3, #20]
 8006ea4:	8bfb      	ldrh	r3, [r7, #30]
 8006ea6:	441a      	add	r2, r3
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	699b      	ldr	r3, [r3, #24]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d004      	beq.n	8006ebe <PCD_EP_ISR_Handler+0x446>
 8006eb4:	8bfa      	ldrh	r2, [r7, #30]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d206      	bcs.n	8006ecc <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f003 ffe5 	bl	800ae94 <HAL_PCD_DataOutStageCallback>
 8006eca:	e008      	b.n	8006ede <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	7819      	ldrb	r1, [r3, #0]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	695a      	ldr	r2, [r3, #20]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	699b      	ldr	r3, [r3, #24]
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f7ff fc9d 	bl	8006818 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006ede:	8a7b      	ldrh	r3, [r7, #18]
 8006ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d04f      	beq.n	8006f88 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8006ee8:	7d7b      	ldrb	r3, [r7, #21]
 8006eea:	015b      	lsls	r3, r3, #5
 8006eec:	3328      	adds	r3, #40	; 0x28
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	461a      	mov	r2, r3
 8006efa:	7d7b      	ldrb	r3, [r7, #21]
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	4413      	add	r3, r2
 8006f00:	881b      	ldrh	r3, [r3, #0]
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f0c:	b29c      	uxth	r4, r3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	461a      	mov	r2, r3
 8006f14:	7d7b      	ldrb	r3, [r7, #21]
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	441a      	add	r2, r3
 8006f1a:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8006f1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	461a      	mov	r2, r3
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	00db      	lsls	r3, r3, #3
 8006f38:	4413      	add	r3, r2
 8006f3a:	3302      	adds	r3, #2
 8006f3c:	005b      	lsls	r3, r3, #1
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	6812      	ldr	r2, [r2, #0]
 8006f42:	4413      	add	r3, r2
 8006f44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f48:	881b      	ldrh	r3, [r3, #0]
 8006f4a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	695a      	ldr	r2, [r3, #20]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	69db      	ldr	r3, [r3, #28]
 8006f5a:	441a      	add	r2, r3
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	699b      	ldr	r3, [r3, #24]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d106      	bne.n	8006f76 <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f003 ffa8 	bl	800aec4 <HAL_PCD_DataInStageCallback>
 8006f74:	e008      	b.n	8006f88 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	7819      	ldrb	r1, [r3, #0]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	695a      	ldr	r2, [r3, #20]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	699b      	ldr	r3, [r3, #24]
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f7ff fc96 	bl	80068b4 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	b21b      	sxth	r3, r3
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	f6ff ad74 	blt.w	8006a82 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3724      	adds	r7, #36	; 0x24
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd90      	pop	{r4, r7, pc}
 8006fa4:	ffff8080 	.word	0xffff8080
 8006fa8:	ffff80c0 	.word	0xffff80c0

08006fac <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b087      	sub	sp, #28
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	607b      	str	r3, [r7, #4]
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	817b      	strh	r3, [r7, #10]
 8006fba:	4613      	mov	r3, r2
 8006fbc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006fbe:	897b      	ldrh	r3, [r7, #10]
 8006fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d008      	beq.n	8006fdc <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006fca:	897b      	ldrh	r3, [r7, #10]
 8006fcc:	f003 0307 	and.w	r3, r3, #7
 8006fd0:	015b      	lsls	r3, r3, #5
 8006fd2:	3328      	adds	r3, #40	; 0x28
 8006fd4:	68fa      	ldr	r2, [r7, #12]
 8006fd6:	4413      	add	r3, r2
 8006fd8:	617b      	str	r3, [r7, #20]
 8006fda:	e006      	b.n	8006fea <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006fdc:	897b      	ldrh	r3, [r7, #10]
 8006fde:	015b      	lsls	r3, r3, #5
 8006fe0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	4413      	add	r3, r2
 8006fe8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006fea:	893b      	ldrh	r3, [r7, #8]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d107      	bne.n	8007000 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	b29a      	uxth	r2, r3
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	80da      	strh	r2, [r3, #6]
 8006ffe:	e00b      	b.n	8007018 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	2201      	movs	r2, #1
 8007004:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	b29a      	uxth	r2, r3
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	0c1b      	lsrs	r3, r3, #16
 8007012:	b29a      	uxth	r2, r3
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	371c      	adds	r7, #28
 800701e:	46bd      	mov	sp, r7
 8007020:	bc80      	pop	{r7}
 8007022:	4770      	bx	lr

08007024 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b086      	sub	sp, #24
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d101      	bne.n	8007036 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	e26c      	b.n	8007510 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 0301 	and.w	r3, r3, #1
 800703e:	2b00      	cmp	r3, #0
 8007040:	f000 8087 	beq.w	8007152 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007044:	4b92      	ldr	r3, [pc, #584]	; (8007290 <HAL_RCC_OscConfig+0x26c>)
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	f003 030c 	and.w	r3, r3, #12
 800704c:	2b04      	cmp	r3, #4
 800704e:	d00c      	beq.n	800706a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007050:	4b8f      	ldr	r3, [pc, #572]	; (8007290 <HAL_RCC_OscConfig+0x26c>)
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	f003 030c 	and.w	r3, r3, #12
 8007058:	2b08      	cmp	r3, #8
 800705a:	d112      	bne.n	8007082 <HAL_RCC_OscConfig+0x5e>
 800705c:	4b8c      	ldr	r3, [pc, #560]	; (8007290 <HAL_RCC_OscConfig+0x26c>)
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007068:	d10b      	bne.n	8007082 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800706a:	4b89      	ldr	r3, [pc, #548]	; (8007290 <HAL_RCC_OscConfig+0x26c>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007072:	2b00      	cmp	r3, #0
 8007074:	d06c      	beq.n	8007150 <HAL_RCC_OscConfig+0x12c>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d168      	bne.n	8007150 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e246      	b.n	8007510 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800708a:	d106      	bne.n	800709a <HAL_RCC_OscConfig+0x76>
 800708c:	4b80      	ldr	r3, [pc, #512]	; (8007290 <HAL_RCC_OscConfig+0x26c>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a7f      	ldr	r2, [pc, #508]	; (8007290 <HAL_RCC_OscConfig+0x26c>)
 8007092:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007096:	6013      	str	r3, [r2, #0]
 8007098:	e02e      	b.n	80070f8 <HAL_RCC_OscConfig+0xd4>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d10c      	bne.n	80070bc <HAL_RCC_OscConfig+0x98>
 80070a2:	4b7b      	ldr	r3, [pc, #492]	; (8007290 <HAL_RCC_OscConfig+0x26c>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a7a      	ldr	r2, [pc, #488]	; (8007290 <HAL_RCC_OscConfig+0x26c>)
 80070a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070ac:	6013      	str	r3, [r2, #0]
 80070ae:	4b78      	ldr	r3, [pc, #480]	; (8007290 <HAL_RCC_OscConfig+0x26c>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a77      	ldr	r2, [pc, #476]	; (8007290 <HAL_RCC_OscConfig+0x26c>)
 80070b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070b8:	6013      	str	r3, [r2, #0]
 80070ba:	e01d      	b.n	80070f8 <HAL_RCC_OscConfig+0xd4>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80070c4:	d10c      	bne.n	80070e0 <HAL_RCC_OscConfig+0xbc>
 80070c6:	4b72      	ldr	r3, [pc, #456]	; (8007290 <HAL_RCC_OscConfig+0x26c>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a71      	ldr	r2, [pc, #452]	; (8007290 <HAL_RCC_OscConfig+0x26c>)
 80070cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80070d0:	6013      	str	r3, [r2, #0]
 80070d2:	4b6f      	ldr	r3, [pc, #444]	; (8007290 <HAL_RCC_OscConfig+0x26c>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a6e      	ldr	r2, [pc, #440]	; (8007290 <HAL_RCC_OscConfig+0x26c>)
 80070d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070dc:	6013      	str	r3, [r2, #0]
 80070de:	e00b      	b.n	80070f8 <HAL_RCC_OscConfig+0xd4>
 80070e0:	4b6b      	ldr	r3, [pc, #428]	; (8007290 <HAL_RCC_OscConfig+0x26c>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a6a      	ldr	r2, [pc, #424]	; (8007290 <HAL_RCC_OscConfig+0x26c>)
 80070e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070ea:	6013      	str	r3, [r2, #0]
 80070ec:	4b68      	ldr	r3, [pc, #416]	; (8007290 <HAL_RCC_OscConfig+0x26c>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a67      	ldr	r2, [pc, #412]	; (8007290 <HAL_RCC_OscConfig+0x26c>)
 80070f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d013      	beq.n	8007128 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007100:	f7fd fa64 	bl	80045cc <HAL_GetTick>
 8007104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007106:	e008      	b.n	800711a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007108:	f7fd fa60 	bl	80045cc <HAL_GetTick>
 800710c:	4602      	mov	r2, r0
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	1ad3      	subs	r3, r2, r3
 8007112:	2b64      	cmp	r3, #100	; 0x64
 8007114:	d901      	bls.n	800711a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007116:	2303      	movs	r3, #3
 8007118:	e1fa      	b.n	8007510 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800711a:	4b5d      	ldr	r3, [pc, #372]	; (8007290 <HAL_RCC_OscConfig+0x26c>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007122:	2b00      	cmp	r3, #0
 8007124:	d0f0      	beq.n	8007108 <HAL_RCC_OscConfig+0xe4>
 8007126:	e014      	b.n	8007152 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007128:	f7fd fa50 	bl	80045cc <HAL_GetTick>
 800712c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800712e:	e008      	b.n	8007142 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007130:	f7fd fa4c 	bl	80045cc <HAL_GetTick>
 8007134:	4602      	mov	r2, r0
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	1ad3      	subs	r3, r2, r3
 800713a:	2b64      	cmp	r3, #100	; 0x64
 800713c:	d901      	bls.n	8007142 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800713e:	2303      	movs	r3, #3
 8007140:	e1e6      	b.n	8007510 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007142:	4b53      	ldr	r3, [pc, #332]	; (8007290 <HAL_RCC_OscConfig+0x26c>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800714a:	2b00      	cmp	r3, #0
 800714c:	d1f0      	bne.n	8007130 <HAL_RCC_OscConfig+0x10c>
 800714e:	e000      	b.n	8007152 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007150:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f003 0302 	and.w	r3, r3, #2
 800715a:	2b00      	cmp	r3, #0
 800715c:	d063      	beq.n	8007226 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800715e:	4b4c      	ldr	r3, [pc, #304]	; (8007290 <HAL_RCC_OscConfig+0x26c>)
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	f003 030c 	and.w	r3, r3, #12
 8007166:	2b00      	cmp	r3, #0
 8007168:	d00b      	beq.n	8007182 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800716a:	4b49      	ldr	r3, [pc, #292]	; (8007290 <HAL_RCC_OscConfig+0x26c>)
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	f003 030c 	and.w	r3, r3, #12
 8007172:	2b08      	cmp	r3, #8
 8007174:	d11c      	bne.n	80071b0 <HAL_RCC_OscConfig+0x18c>
 8007176:	4b46      	ldr	r3, [pc, #280]	; (8007290 <HAL_RCC_OscConfig+0x26c>)
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800717e:	2b00      	cmp	r3, #0
 8007180:	d116      	bne.n	80071b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007182:	4b43      	ldr	r3, [pc, #268]	; (8007290 <HAL_RCC_OscConfig+0x26c>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f003 0302 	and.w	r3, r3, #2
 800718a:	2b00      	cmp	r3, #0
 800718c:	d005      	beq.n	800719a <HAL_RCC_OscConfig+0x176>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	691b      	ldr	r3, [r3, #16]
 8007192:	2b01      	cmp	r3, #1
 8007194:	d001      	beq.n	800719a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	e1ba      	b.n	8007510 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800719a:	4b3d      	ldr	r3, [pc, #244]	; (8007290 <HAL_RCC_OscConfig+0x26c>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	695b      	ldr	r3, [r3, #20]
 80071a6:	00db      	lsls	r3, r3, #3
 80071a8:	4939      	ldr	r1, [pc, #228]	; (8007290 <HAL_RCC_OscConfig+0x26c>)
 80071aa:	4313      	orrs	r3, r2
 80071ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071ae:	e03a      	b.n	8007226 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	691b      	ldr	r3, [r3, #16]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d020      	beq.n	80071fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80071b8:	4b36      	ldr	r3, [pc, #216]	; (8007294 <HAL_RCC_OscConfig+0x270>)
 80071ba:	2201      	movs	r2, #1
 80071bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071be:	f7fd fa05 	bl	80045cc <HAL_GetTick>
 80071c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071c4:	e008      	b.n	80071d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071c6:	f7fd fa01 	bl	80045cc <HAL_GetTick>
 80071ca:	4602      	mov	r2, r0
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	1ad3      	subs	r3, r2, r3
 80071d0:	2b02      	cmp	r3, #2
 80071d2:	d901      	bls.n	80071d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80071d4:	2303      	movs	r3, #3
 80071d6:	e19b      	b.n	8007510 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071d8:	4b2d      	ldr	r3, [pc, #180]	; (8007290 <HAL_RCC_OscConfig+0x26c>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 0302 	and.w	r3, r3, #2
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d0f0      	beq.n	80071c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071e4:	4b2a      	ldr	r3, [pc, #168]	; (8007290 <HAL_RCC_OscConfig+0x26c>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	695b      	ldr	r3, [r3, #20]
 80071f0:	00db      	lsls	r3, r3, #3
 80071f2:	4927      	ldr	r1, [pc, #156]	; (8007290 <HAL_RCC_OscConfig+0x26c>)
 80071f4:	4313      	orrs	r3, r2
 80071f6:	600b      	str	r3, [r1, #0]
 80071f8:	e015      	b.n	8007226 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80071fa:	4b26      	ldr	r3, [pc, #152]	; (8007294 <HAL_RCC_OscConfig+0x270>)
 80071fc:	2200      	movs	r2, #0
 80071fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007200:	f7fd f9e4 	bl	80045cc <HAL_GetTick>
 8007204:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007206:	e008      	b.n	800721a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007208:	f7fd f9e0 	bl	80045cc <HAL_GetTick>
 800720c:	4602      	mov	r2, r0
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	1ad3      	subs	r3, r2, r3
 8007212:	2b02      	cmp	r3, #2
 8007214:	d901      	bls.n	800721a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007216:	2303      	movs	r3, #3
 8007218:	e17a      	b.n	8007510 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800721a:	4b1d      	ldr	r3, [pc, #116]	; (8007290 <HAL_RCC_OscConfig+0x26c>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 0302 	and.w	r3, r3, #2
 8007222:	2b00      	cmp	r3, #0
 8007224:	d1f0      	bne.n	8007208 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f003 0308 	and.w	r3, r3, #8
 800722e:	2b00      	cmp	r3, #0
 8007230:	d03a      	beq.n	80072a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	699b      	ldr	r3, [r3, #24]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d019      	beq.n	800726e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800723a:	4b17      	ldr	r3, [pc, #92]	; (8007298 <HAL_RCC_OscConfig+0x274>)
 800723c:	2201      	movs	r2, #1
 800723e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007240:	f7fd f9c4 	bl	80045cc <HAL_GetTick>
 8007244:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007246:	e008      	b.n	800725a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007248:	f7fd f9c0 	bl	80045cc <HAL_GetTick>
 800724c:	4602      	mov	r2, r0
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	1ad3      	subs	r3, r2, r3
 8007252:	2b02      	cmp	r3, #2
 8007254:	d901      	bls.n	800725a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007256:	2303      	movs	r3, #3
 8007258:	e15a      	b.n	8007510 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800725a:	4b0d      	ldr	r3, [pc, #52]	; (8007290 <HAL_RCC_OscConfig+0x26c>)
 800725c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725e:	f003 0302 	and.w	r3, r3, #2
 8007262:	2b00      	cmp	r3, #0
 8007264:	d0f0      	beq.n	8007248 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007266:	2001      	movs	r0, #1
 8007268:	f000 fac8 	bl	80077fc <RCC_Delay>
 800726c:	e01c      	b.n	80072a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800726e:	4b0a      	ldr	r3, [pc, #40]	; (8007298 <HAL_RCC_OscConfig+0x274>)
 8007270:	2200      	movs	r2, #0
 8007272:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007274:	f7fd f9aa 	bl	80045cc <HAL_GetTick>
 8007278:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800727a:	e00f      	b.n	800729c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800727c:	f7fd f9a6 	bl	80045cc <HAL_GetTick>
 8007280:	4602      	mov	r2, r0
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	1ad3      	subs	r3, r2, r3
 8007286:	2b02      	cmp	r3, #2
 8007288:	d908      	bls.n	800729c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800728a:	2303      	movs	r3, #3
 800728c:	e140      	b.n	8007510 <HAL_RCC_OscConfig+0x4ec>
 800728e:	bf00      	nop
 8007290:	40021000 	.word	0x40021000
 8007294:	42420000 	.word	0x42420000
 8007298:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800729c:	4b9e      	ldr	r3, [pc, #632]	; (8007518 <HAL_RCC_OscConfig+0x4f4>)
 800729e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a0:	f003 0302 	and.w	r3, r3, #2
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d1e9      	bne.n	800727c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f003 0304 	and.w	r3, r3, #4
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	f000 80a6 	beq.w	8007402 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80072b6:	2300      	movs	r3, #0
 80072b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80072ba:	4b97      	ldr	r3, [pc, #604]	; (8007518 <HAL_RCC_OscConfig+0x4f4>)
 80072bc:	69db      	ldr	r3, [r3, #28]
 80072be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d10d      	bne.n	80072e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80072c6:	4b94      	ldr	r3, [pc, #592]	; (8007518 <HAL_RCC_OscConfig+0x4f4>)
 80072c8:	69db      	ldr	r3, [r3, #28]
 80072ca:	4a93      	ldr	r2, [pc, #588]	; (8007518 <HAL_RCC_OscConfig+0x4f4>)
 80072cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072d0:	61d3      	str	r3, [r2, #28]
 80072d2:	4b91      	ldr	r3, [pc, #580]	; (8007518 <HAL_RCC_OscConfig+0x4f4>)
 80072d4:	69db      	ldr	r3, [r3, #28]
 80072d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072da:	60bb      	str	r3, [r7, #8]
 80072dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072de:	2301      	movs	r3, #1
 80072e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072e2:	4b8e      	ldr	r3, [pc, #568]	; (800751c <HAL_RCC_OscConfig+0x4f8>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d118      	bne.n	8007320 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80072ee:	4b8b      	ldr	r3, [pc, #556]	; (800751c <HAL_RCC_OscConfig+0x4f8>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a8a      	ldr	r2, [pc, #552]	; (800751c <HAL_RCC_OscConfig+0x4f8>)
 80072f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80072fa:	f7fd f967 	bl	80045cc <HAL_GetTick>
 80072fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007300:	e008      	b.n	8007314 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007302:	f7fd f963 	bl	80045cc <HAL_GetTick>
 8007306:	4602      	mov	r2, r0
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	1ad3      	subs	r3, r2, r3
 800730c:	2b64      	cmp	r3, #100	; 0x64
 800730e:	d901      	bls.n	8007314 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007310:	2303      	movs	r3, #3
 8007312:	e0fd      	b.n	8007510 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007314:	4b81      	ldr	r3, [pc, #516]	; (800751c <HAL_RCC_OscConfig+0x4f8>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800731c:	2b00      	cmp	r3, #0
 800731e:	d0f0      	beq.n	8007302 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	2b01      	cmp	r3, #1
 8007326:	d106      	bne.n	8007336 <HAL_RCC_OscConfig+0x312>
 8007328:	4b7b      	ldr	r3, [pc, #492]	; (8007518 <HAL_RCC_OscConfig+0x4f4>)
 800732a:	6a1b      	ldr	r3, [r3, #32]
 800732c:	4a7a      	ldr	r2, [pc, #488]	; (8007518 <HAL_RCC_OscConfig+0x4f4>)
 800732e:	f043 0301 	orr.w	r3, r3, #1
 8007332:	6213      	str	r3, [r2, #32]
 8007334:	e02d      	b.n	8007392 <HAL_RCC_OscConfig+0x36e>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	68db      	ldr	r3, [r3, #12]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d10c      	bne.n	8007358 <HAL_RCC_OscConfig+0x334>
 800733e:	4b76      	ldr	r3, [pc, #472]	; (8007518 <HAL_RCC_OscConfig+0x4f4>)
 8007340:	6a1b      	ldr	r3, [r3, #32]
 8007342:	4a75      	ldr	r2, [pc, #468]	; (8007518 <HAL_RCC_OscConfig+0x4f4>)
 8007344:	f023 0301 	bic.w	r3, r3, #1
 8007348:	6213      	str	r3, [r2, #32]
 800734a:	4b73      	ldr	r3, [pc, #460]	; (8007518 <HAL_RCC_OscConfig+0x4f4>)
 800734c:	6a1b      	ldr	r3, [r3, #32]
 800734e:	4a72      	ldr	r2, [pc, #456]	; (8007518 <HAL_RCC_OscConfig+0x4f4>)
 8007350:	f023 0304 	bic.w	r3, r3, #4
 8007354:	6213      	str	r3, [r2, #32]
 8007356:	e01c      	b.n	8007392 <HAL_RCC_OscConfig+0x36e>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	2b05      	cmp	r3, #5
 800735e:	d10c      	bne.n	800737a <HAL_RCC_OscConfig+0x356>
 8007360:	4b6d      	ldr	r3, [pc, #436]	; (8007518 <HAL_RCC_OscConfig+0x4f4>)
 8007362:	6a1b      	ldr	r3, [r3, #32]
 8007364:	4a6c      	ldr	r2, [pc, #432]	; (8007518 <HAL_RCC_OscConfig+0x4f4>)
 8007366:	f043 0304 	orr.w	r3, r3, #4
 800736a:	6213      	str	r3, [r2, #32]
 800736c:	4b6a      	ldr	r3, [pc, #424]	; (8007518 <HAL_RCC_OscConfig+0x4f4>)
 800736e:	6a1b      	ldr	r3, [r3, #32]
 8007370:	4a69      	ldr	r2, [pc, #420]	; (8007518 <HAL_RCC_OscConfig+0x4f4>)
 8007372:	f043 0301 	orr.w	r3, r3, #1
 8007376:	6213      	str	r3, [r2, #32]
 8007378:	e00b      	b.n	8007392 <HAL_RCC_OscConfig+0x36e>
 800737a:	4b67      	ldr	r3, [pc, #412]	; (8007518 <HAL_RCC_OscConfig+0x4f4>)
 800737c:	6a1b      	ldr	r3, [r3, #32]
 800737e:	4a66      	ldr	r2, [pc, #408]	; (8007518 <HAL_RCC_OscConfig+0x4f4>)
 8007380:	f023 0301 	bic.w	r3, r3, #1
 8007384:	6213      	str	r3, [r2, #32]
 8007386:	4b64      	ldr	r3, [pc, #400]	; (8007518 <HAL_RCC_OscConfig+0x4f4>)
 8007388:	6a1b      	ldr	r3, [r3, #32]
 800738a:	4a63      	ldr	r2, [pc, #396]	; (8007518 <HAL_RCC_OscConfig+0x4f4>)
 800738c:	f023 0304 	bic.w	r3, r3, #4
 8007390:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	68db      	ldr	r3, [r3, #12]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d015      	beq.n	80073c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800739a:	f7fd f917 	bl	80045cc <HAL_GetTick>
 800739e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073a0:	e00a      	b.n	80073b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073a2:	f7fd f913 	bl	80045cc <HAL_GetTick>
 80073a6:	4602      	mov	r2, r0
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	1ad3      	subs	r3, r2, r3
 80073ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d901      	bls.n	80073b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80073b4:	2303      	movs	r3, #3
 80073b6:	e0ab      	b.n	8007510 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073b8:	4b57      	ldr	r3, [pc, #348]	; (8007518 <HAL_RCC_OscConfig+0x4f4>)
 80073ba:	6a1b      	ldr	r3, [r3, #32]
 80073bc:	f003 0302 	and.w	r3, r3, #2
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d0ee      	beq.n	80073a2 <HAL_RCC_OscConfig+0x37e>
 80073c4:	e014      	b.n	80073f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80073c6:	f7fd f901 	bl	80045cc <HAL_GetTick>
 80073ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073cc:	e00a      	b.n	80073e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073ce:	f7fd f8fd 	bl	80045cc <HAL_GetTick>
 80073d2:	4602      	mov	r2, r0
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	1ad3      	subs	r3, r2, r3
 80073d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80073dc:	4293      	cmp	r3, r2
 80073de:	d901      	bls.n	80073e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80073e0:	2303      	movs	r3, #3
 80073e2:	e095      	b.n	8007510 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073e4:	4b4c      	ldr	r3, [pc, #304]	; (8007518 <HAL_RCC_OscConfig+0x4f4>)
 80073e6:	6a1b      	ldr	r3, [r3, #32]
 80073e8:	f003 0302 	and.w	r3, r3, #2
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d1ee      	bne.n	80073ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80073f0:	7dfb      	ldrb	r3, [r7, #23]
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d105      	bne.n	8007402 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073f6:	4b48      	ldr	r3, [pc, #288]	; (8007518 <HAL_RCC_OscConfig+0x4f4>)
 80073f8:	69db      	ldr	r3, [r3, #28]
 80073fa:	4a47      	ldr	r2, [pc, #284]	; (8007518 <HAL_RCC_OscConfig+0x4f4>)
 80073fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007400:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	69db      	ldr	r3, [r3, #28]
 8007406:	2b00      	cmp	r3, #0
 8007408:	f000 8081 	beq.w	800750e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800740c:	4b42      	ldr	r3, [pc, #264]	; (8007518 <HAL_RCC_OscConfig+0x4f4>)
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	f003 030c 	and.w	r3, r3, #12
 8007414:	2b08      	cmp	r3, #8
 8007416:	d061      	beq.n	80074dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	69db      	ldr	r3, [r3, #28]
 800741c:	2b02      	cmp	r3, #2
 800741e:	d146      	bne.n	80074ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007420:	4b3f      	ldr	r3, [pc, #252]	; (8007520 <HAL_RCC_OscConfig+0x4fc>)
 8007422:	2200      	movs	r2, #0
 8007424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007426:	f7fd f8d1 	bl	80045cc <HAL_GetTick>
 800742a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800742c:	e008      	b.n	8007440 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800742e:	f7fd f8cd 	bl	80045cc <HAL_GetTick>
 8007432:	4602      	mov	r2, r0
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	1ad3      	subs	r3, r2, r3
 8007438:	2b02      	cmp	r3, #2
 800743a:	d901      	bls.n	8007440 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800743c:	2303      	movs	r3, #3
 800743e:	e067      	b.n	8007510 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007440:	4b35      	ldr	r3, [pc, #212]	; (8007518 <HAL_RCC_OscConfig+0x4f4>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007448:	2b00      	cmp	r3, #0
 800744a:	d1f0      	bne.n	800742e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6a1b      	ldr	r3, [r3, #32]
 8007450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007454:	d108      	bne.n	8007468 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007456:	4b30      	ldr	r3, [pc, #192]	; (8007518 <HAL_RCC_OscConfig+0x4f4>)
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	492d      	ldr	r1, [pc, #180]	; (8007518 <HAL_RCC_OscConfig+0x4f4>)
 8007464:	4313      	orrs	r3, r2
 8007466:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007468:	4b2b      	ldr	r3, [pc, #172]	; (8007518 <HAL_RCC_OscConfig+0x4f4>)
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6a19      	ldr	r1, [r3, #32]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007478:	430b      	orrs	r3, r1
 800747a:	4927      	ldr	r1, [pc, #156]	; (8007518 <HAL_RCC_OscConfig+0x4f4>)
 800747c:	4313      	orrs	r3, r2
 800747e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007480:	4b27      	ldr	r3, [pc, #156]	; (8007520 <HAL_RCC_OscConfig+0x4fc>)
 8007482:	2201      	movs	r2, #1
 8007484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007486:	f7fd f8a1 	bl	80045cc <HAL_GetTick>
 800748a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800748c:	e008      	b.n	80074a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800748e:	f7fd f89d 	bl	80045cc <HAL_GetTick>
 8007492:	4602      	mov	r2, r0
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	1ad3      	subs	r3, r2, r3
 8007498:	2b02      	cmp	r3, #2
 800749a:	d901      	bls.n	80074a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800749c:	2303      	movs	r3, #3
 800749e:	e037      	b.n	8007510 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80074a0:	4b1d      	ldr	r3, [pc, #116]	; (8007518 <HAL_RCC_OscConfig+0x4f4>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d0f0      	beq.n	800748e <HAL_RCC_OscConfig+0x46a>
 80074ac:	e02f      	b.n	800750e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074ae:	4b1c      	ldr	r3, [pc, #112]	; (8007520 <HAL_RCC_OscConfig+0x4fc>)
 80074b0:	2200      	movs	r2, #0
 80074b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074b4:	f7fd f88a 	bl	80045cc <HAL_GetTick>
 80074b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80074ba:	e008      	b.n	80074ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074bc:	f7fd f886 	bl	80045cc <HAL_GetTick>
 80074c0:	4602      	mov	r2, r0
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	1ad3      	subs	r3, r2, r3
 80074c6:	2b02      	cmp	r3, #2
 80074c8:	d901      	bls.n	80074ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80074ca:	2303      	movs	r3, #3
 80074cc:	e020      	b.n	8007510 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80074ce:	4b12      	ldr	r3, [pc, #72]	; (8007518 <HAL_RCC_OscConfig+0x4f4>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d1f0      	bne.n	80074bc <HAL_RCC_OscConfig+0x498>
 80074da:	e018      	b.n	800750e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	69db      	ldr	r3, [r3, #28]
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d101      	bne.n	80074e8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	e013      	b.n	8007510 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80074e8:	4b0b      	ldr	r3, [pc, #44]	; (8007518 <HAL_RCC_OscConfig+0x4f4>)
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6a1b      	ldr	r3, [r3, #32]
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d106      	bne.n	800750a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007506:	429a      	cmp	r2, r3
 8007508:	d001      	beq.n	800750e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	e000      	b.n	8007510 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800750e:	2300      	movs	r3, #0
}
 8007510:	4618      	mov	r0, r3
 8007512:	3718      	adds	r7, #24
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}
 8007518:	40021000 	.word	0x40021000
 800751c:	40007000 	.word	0x40007000
 8007520:	42420060 	.word	0x42420060

08007524 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d101      	bne.n	8007538 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	e0d0      	b.n	80076da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007538:	4b6a      	ldr	r3, [pc, #424]	; (80076e4 <HAL_RCC_ClockConfig+0x1c0>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 0307 	and.w	r3, r3, #7
 8007540:	683a      	ldr	r2, [r7, #0]
 8007542:	429a      	cmp	r2, r3
 8007544:	d910      	bls.n	8007568 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007546:	4b67      	ldr	r3, [pc, #412]	; (80076e4 <HAL_RCC_ClockConfig+0x1c0>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f023 0207 	bic.w	r2, r3, #7
 800754e:	4965      	ldr	r1, [pc, #404]	; (80076e4 <HAL_RCC_ClockConfig+0x1c0>)
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	4313      	orrs	r3, r2
 8007554:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007556:	4b63      	ldr	r3, [pc, #396]	; (80076e4 <HAL_RCC_ClockConfig+0x1c0>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 0307 	and.w	r3, r3, #7
 800755e:	683a      	ldr	r2, [r7, #0]
 8007560:	429a      	cmp	r2, r3
 8007562:	d001      	beq.n	8007568 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	e0b8      	b.n	80076da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f003 0302 	and.w	r3, r3, #2
 8007570:	2b00      	cmp	r3, #0
 8007572:	d020      	beq.n	80075b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f003 0304 	and.w	r3, r3, #4
 800757c:	2b00      	cmp	r3, #0
 800757e:	d005      	beq.n	800758c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007580:	4b59      	ldr	r3, [pc, #356]	; (80076e8 <HAL_RCC_ClockConfig+0x1c4>)
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	4a58      	ldr	r2, [pc, #352]	; (80076e8 <HAL_RCC_ClockConfig+0x1c4>)
 8007586:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800758a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f003 0308 	and.w	r3, r3, #8
 8007594:	2b00      	cmp	r3, #0
 8007596:	d005      	beq.n	80075a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007598:	4b53      	ldr	r3, [pc, #332]	; (80076e8 <HAL_RCC_ClockConfig+0x1c4>)
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	4a52      	ldr	r2, [pc, #328]	; (80076e8 <HAL_RCC_ClockConfig+0x1c4>)
 800759e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80075a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80075a4:	4b50      	ldr	r3, [pc, #320]	; (80076e8 <HAL_RCC_ClockConfig+0x1c4>)
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	494d      	ldr	r1, [pc, #308]	; (80076e8 <HAL_RCC_ClockConfig+0x1c4>)
 80075b2:	4313      	orrs	r3, r2
 80075b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f003 0301 	and.w	r3, r3, #1
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d040      	beq.n	8007644 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d107      	bne.n	80075da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075ca:	4b47      	ldr	r3, [pc, #284]	; (80076e8 <HAL_RCC_ClockConfig+0x1c4>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d115      	bne.n	8007602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	e07f      	b.n	80076da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	2b02      	cmp	r3, #2
 80075e0:	d107      	bne.n	80075f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075e2:	4b41      	ldr	r3, [pc, #260]	; (80076e8 <HAL_RCC_ClockConfig+0x1c4>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d109      	bne.n	8007602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	e073      	b.n	80076da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075f2:	4b3d      	ldr	r3, [pc, #244]	; (80076e8 <HAL_RCC_ClockConfig+0x1c4>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f003 0302 	and.w	r3, r3, #2
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d101      	bne.n	8007602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075fe:	2301      	movs	r3, #1
 8007600:	e06b      	b.n	80076da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007602:	4b39      	ldr	r3, [pc, #228]	; (80076e8 <HAL_RCC_ClockConfig+0x1c4>)
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	f023 0203 	bic.w	r2, r3, #3
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	4936      	ldr	r1, [pc, #216]	; (80076e8 <HAL_RCC_ClockConfig+0x1c4>)
 8007610:	4313      	orrs	r3, r2
 8007612:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007614:	f7fc ffda 	bl	80045cc <HAL_GetTick>
 8007618:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800761a:	e00a      	b.n	8007632 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800761c:	f7fc ffd6 	bl	80045cc <HAL_GetTick>
 8007620:	4602      	mov	r2, r0
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	1ad3      	subs	r3, r2, r3
 8007626:	f241 3288 	movw	r2, #5000	; 0x1388
 800762a:	4293      	cmp	r3, r2
 800762c:	d901      	bls.n	8007632 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800762e:	2303      	movs	r3, #3
 8007630:	e053      	b.n	80076da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007632:	4b2d      	ldr	r3, [pc, #180]	; (80076e8 <HAL_RCC_ClockConfig+0x1c4>)
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	f003 020c 	and.w	r2, r3, #12
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	429a      	cmp	r2, r3
 8007642:	d1eb      	bne.n	800761c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007644:	4b27      	ldr	r3, [pc, #156]	; (80076e4 <HAL_RCC_ClockConfig+0x1c0>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f003 0307 	and.w	r3, r3, #7
 800764c:	683a      	ldr	r2, [r7, #0]
 800764e:	429a      	cmp	r2, r3
 8007650:	d210      	bcs.n	8007674 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007652:	4b24      	ldr	r3, [pc, #144]	; (80076e4 <HAL_RCC_ClockConfig+0x1c0>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f023 0207 	bic.w	r2, r3, #7
 800765a:	4922      	ldr	r1, [pc, #136]	; (80076e4 <HAL_RCC_ClockConfig+0x1c0>)
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	4313      	orrs	r3, r2
 8007660:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007662:	4b20      	ldr	r3, [pc, #128]	; (80076e4 <HAL_RCC_ClockConfig+0x1c0>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f003 0307 	and.w	r3, r3, #7
 800766a:	683a      	ldr	r2, [r7, #0]
 800766c:	429a      	cmp	r2, r3
 800766e:	d001      	beq.n	8007674 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	e032      	b.n	80076da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f003 0304 	and.w	r3, r3, #4
 800767c:	2b00      	cmp	r3, #0
 800767e:	d008      	beq.n	8007692 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007680:	4b19      	ldr	r3, [pc, #100]	; (80076e8 <HAL_RCC_ClockConfig+0x1c4>)
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	4916      	ldr	r1, [pc, #88]	; (80076e8 <HAL_RCC_ClockConfig+0x1c4>)
 800768e:	4313      	orrs	r3, r2
 8007690:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f003 0308 	and.w	r3, r3, #8
 800769a:	2b00      	cmp	r3, #0
 800769c:	d009      	beq.n	80076b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800769e:	4b12      	ldr	r3, [pc, #72]	; (80076e8 <HAL_RCC_ClockConfig+0x1c4>)
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	691b      	ldr	r3, [r3, #16]
 80076aa:	00db      	lsls	r3, r3, #3
 80076ac:	490e      	ldr	r1, [pc, #56]	; (80076e8 <HAL_RCC_ClockConfig+0x1c4>)
 80076ae:	4313      	orrs	r3, r2
 80076b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80076b2:	f000 f821 	bl	80076f8 <HAL_RCC_GetSysClockFreq>
 80076b6:	4601      	mov	r1, r0
 80076b8:	4b0b      	ldr	r3, [pc, #44]	; (80076e8 <HAL_RCC_ClockConfig+0x1c4>)
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	091b      	lsrs	r3, r3, #4
 80076be:	f003 030f 	and.w	r3, r3, #15
 80076c2:	4a0a      	ldr	r2, [pc, #40]	; (80076ec <HAL_RCC_ClockConfig+0x1c8>)
 80076c4:	5cd3      	ldrb	r3, [r2, r3]
 80076c6:	fa21 f303 	lsr.w	r3, r1, r3
 80076ca:	4a09      	ldr	r2, [pc, #36]	; (80076f0 <HAL_RCC_ClockConfig+0x1cc>)
 80076cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80076ce:	4b09      	ldr	r3, [pc, #36]	; (80076f4 <HAL_RCC_ClockConfig+0x1d0>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4618      	mov	r0, r3
 80076d4:	f7fc ff38 	bl	8004548 <HAL_InitTick>

  return HAL_OK;
 80076d8:	2300      	movs	r3, #0
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3710      	adds	r7, #16
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop
 80076e4:	40022000 	.word	0x40022000
 80076e8:	40021000 	.word	0x40021000
 80076ec:	0800c40c 	.word	0x0800c40c
 80076f0:	20000000 	.word	0x20000000
 80076f4:	20000004 	.word	0x20000004

080076f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076f8:	b490      	push	{r4, r7}
 80076fa:	b08a      	sub	sp, #40	; 0x28
 80076fc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80076fe:	4b2a      	ldr	r3, [pc, #168]	; (80077a8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8007700:	1d3c      	adds	r4, r7, #4
 8007702:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007704:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007708:	4b28      	ldr	r3, [pc, #160]	; (80077ac <HAL_RCC_GetSysClockFreq+0xb4>)
 800770a:	881b      	ldrh	r3, [r3, #0]
 800770c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800770e:	2300      	movs	r3, #0
 8007710:	61fb      	str	r3, [r7, #28]
 8007712:	2300      	movs	r3, #0
 8007714:	61bb      	str	r3, [r7, #24]
 8007716:	2300      	movs	r3, #0
 8007718:	627b      	str	r3, [r7, #36]	; 0x24
 800771a:	2300      	movs	r3, #0
 800771c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800771e:	2300      	movs	r3, #0
 8007720:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007722:	4b23      	ldr	r3, [pc, #140]	; (80077b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	f003 030c 	and.w	r3, r3, #12
 800772e:	2b04      	cmp	r3, #4
 8007730:	d002      	beq.n	8007738 <HAL_RCC_GetSysClockFreq+0x40>
 8007732:	2b08      	cmp	r3, #8
 8007734:	d003      	beq.n	800773e <HAL_RCC_GetSysClockFreq+0x46>
 8007736:	e02d      	b.n	8007794 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007738:	4b1e      	ldr	r3, [pc, #120]	; (80077b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800773a:	623b      	str	r3, [r7, #32]
      break;
 800773c:	e02d      	b.n	800779a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	0c9b      	lsrs	r3, r3, #18
 8007742:	f003 030f 	and.w	r3, r3, #15
 8007746:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800774a:	4413      	add	r3, r2
 800774c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007750:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007752:	69fb      	ldr	r3, [r7, #28]
 8007754:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007758:	2b00      	cmp	r3, #0
 800775a:	d013      	beq.n	8007784 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800775c:	4b14      	ldr	r3, [pc, #80]	; (80077b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	0c5b      	lsrs	r3, r3, #17
 8007762:	f003 0301 	and.w	r3, r3, #1
 8007766:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800776a:	4413      	add	r3, r2
 800776c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007770:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	4a0f      	ldr	r2, [pc, #60]	; (80077b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007776:	fb02 f203 	mul.w	r2, r2, r3
 800777a:	69bb      	ldr	r3, [r7, #24]
 800777c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007780:	627b      	str	r3, [r7, #36]	; 0x24
 8007782:	e004      	b.n	800778e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	4a0c      	ldr	r2, [pc, #48]	; (80077b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007788:	fb02 f303 	mul.w	r3, r2, r3
 800778c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800778e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007790:	623b      	str	r3, [r7, #32]
      break;
 8007792:	e002      	b.n	800779a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007794:	4b09      	ldr	r3, [pc, #36]	; (80077bc <HAL_RCC_GetSysClockFreq+0xc4>)
 8007796:	623b      	str	r3, [r7, #32]
      break;
 8007798:	bf00      	nop
    }
  }
  return sysclockfreq;
 800779a:	6a3b      	ldr	r3, [r7, #32]
}
 800779c:	4618      	mov	r0, r3
 800779e:	3728      	adds	r7, #40	; 0x28
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bc90      	pop	{r4, r7}
 80077a4:	4770      	bx	lr
 80077a6:	bf00      	nop
 80077a8:	0800c3b4 	.word	0x0800c3b4
 80077ac:	0800c3c4 	.word	0x0800c3c4
 80077b0:	40021000 	.word	0x40021000
 80077b4:	00f42400 	.word	0x00f42400
 80077b8:	003d0900 	.word	0x003d0900
 80077bc:	007a1200 	.word	0x007a1200

080077c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80077c0:	b480      	push	{r7}
 80077c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80077c4:	4b02      	ldr	r3, [pc, #8]	; (80077d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80077c6:	681b      	ldr	r3, [r3, #0]
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bc80      	pop	{r7}
 80077ce:	4770      	bx	lr
 80077d0:	20000000 	.word	0x20000000

080077d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80077d8:	f7ff fff2 	bl	80077c0 <HAL_RCC_GetHCLKFreq>
 80077dc:	4601      	mov	r1, r0
 80077de:	4b05      	ldr	r3, [pc, #20]	; (80077f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	0a1b      	lsrs	r3, r3, #8
 80077e4:	f003 0307 	and.w	r3, r3, #7
 80077e8:	4a03      	ldr	r2, [pc, #12]	; (80077f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80077ea:	5cd3      	ldrb	r3, [r2, r3]
 80077ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	bd80      	pop	{r7, pc}
 80077f4:	40021000 	.word	0x40021000
 80077f8:	0800c41c 	.word	0x0800c41c

080077fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b085      	sub	sp, #20
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007804:	4b0a      	ldr	r3, [pc, #40]	; (8007830 <RCC_Delay+0x34>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a0a      	ldr	r2, [pc, #40]	; (8007834 <RCC_Delay+0x38>)
 800780a:	fba2 2303 	umull	r2, r3, r2, r3
 800780e:	0a5b      	lsrs	r3, r3, #9
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	fb02 f303 	mul.w	r3, r2, r3
 8007816:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007818:	bf00      	nop
  }
  while (Delay --);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	1e5a      	subs	r2, r3, #1
 800781e:	60fa      	str	r2, [r7, #12]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d1f9      	bne.n	8007818 <RCC_Delay+0x1c>
}
 8007824:	bf00      	nop
 8007826:	3714      	adds	r7, #20
 8007828:	46bd      	mov	sp, r7
 800782a:	bc80      	pop	{r7}
 800782c:	4770      	bx	lr
 800782e:	bf00      	nop
 8007830:	20000000 	.word	0x20000000
 8007834:	10624dd3 	.word	0x10624dd3

08007838 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b086      	sub	sp, #24
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007840:	2300      	movs	r3, #0
 8007842:	613b      	str	r3, [r7, #16]
 8007844:	2300      	movs	r3, #0
 8007846:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f003 0301 	and.w	r3, r3, #1
 8007850:	2b00      	cmp	r3, #0
 8007852:	d07d      	beq.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8007854:	2300      	movs	r3, #0
 8007856:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007858:	4b4f      	ldr	r3, [pc, #316]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800785a:	69db      	ldr	r3, [r3, #28]
 800785c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007860:	2b00      	cmp	r3, #0
 8007862:	d10d      	bne.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007864:	4b4c      	ldr	r3, [pc, #304]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007866:	69db      	ldr	r3, [r3, #28]
 8007868:	4a4b      	ldr	r2, [pc, #300]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800786a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800786e:	61d3      	str	r3, [r2, #28]
 8007870:	4b49      	ldr	r3, [pc, #292]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007872:	69db      	ldr	r3, [r3, #28]
 8007874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007878:	60bb      	str	r3, [r7, #8]
 800787a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800787c:	2301      	movs	r3, #1
 800787e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007880:	4b46      	ldr	r3, [pc, #280]	; (800799c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007888:	2b00      	cmp	r3, #0
 800788a:	d118      	bne.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800788c:	4b43      	ldr	r3, [pc, #268]	; (800799c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a42      	ldr	r2, [pc, #264]	; (800799c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007892:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007896:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007898:	f7fc fe98 	bl	80045cc <HAL_GetTick>
 800789c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800789e:	e008      	b.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078a0:	f7fc fe94 	bl	80045cc <HAL_GetTick>
 80078a4:	4602      	mov	r2, r0
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	1ad3      	subs	r3, r2, r3
 80078aa:	2b64      	cmp	r3, #100	; 0x64
 80078ac:	d901      	bls.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80078ae:	2303      	movs	r3, #3
 80078b0:	e06d      	b.n	800798e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078b2:	4b3a      	ldr	r3, [pc, #232]	; (800799c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d0f0      	beq.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80078be:	4b36      	ldr	r3, [pc, #216]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80078c0:	6a1b      	ldr	r3, [r3, #32]
 80078c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078c6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d02e      	beq.n	800792c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078d6:	68fa      	ldr	r2, [r7, #12]
 80078d8:	429a      	cmp	r2, r3
 80078da:	d027      	beq.n	800792c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80078dc:	4b2e      	ldr	r3, [pc, #184]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80078de:	6a1b      	ldr	r3, [r3, #32]
 80078e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078e4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80078e6:	4b2e      	ldr	r3, [pc, #184]	; (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80078e8:	2201      	movs	r2, #1
 80078ea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80078ec:	4b2c      	ldr	r3, [pc, #176]	; (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80078ee:	2200      	movs	r2, #0
 80078f0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80078f2:	4a29      	ldr	r2, [pc, #164]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f003 0301 	and.w	r3, r3, #1
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d014      	beq.n	800792c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007902:	f7fc fe63 	bl	80045cc <HAL_GetTick>
 8007906:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007908:	e00a      	b.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800790a:	f7fc fe5f 	bl	80045cc <HAL_GetTick>
 800790e:	4602      	mov	r2, r0
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	1ad3      	subs	r3, r2, r3
 8007914:	f241 3288 	movw	r2, #5000	; 0x1388
 8007918:	4293      	cmp	r3, r2
 800791a:	d901      	bls.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800791c:	2303      	movs	r3, #3
 800791e:	e036      	b.n	800798e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007920:	4b1d      	ldr	r3, [pc, #116]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007922:	6a1b      	ldr	r3, [r3, #32]
 8007924:	f003 0302 	and.w	r3, r3, #2
 8007928:	2b00      	cmp	r3, #0
 800792a:	d0ee      	beq.n	800790a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800792c:	4b1a      	ldr	r3, [pc, #104]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800792e:	6a1b      	ldr	r3, [r3, #32]
 8007930:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	4917      	ldr	r1, [pc, #92]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800793a:	4313      	orrs	r3, r2
 800793c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800793e:	7dfb      	ldrb	r3, [r7, #23]
 8007940:	2b01      	cmp	r3, #1
 8007942:	d105      	bne.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007944:	4b14      	ldr	r3, [pc, #80]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007946:	69db      	ldr	r3, [r3, #28]
 8007948:	4a13      	ldr	r2, [pc, #76]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800794a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800794e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f003 0302 	and.w	r3, r3, #2
 8007958:	2b00      	cmp	r3, #0
 800795a:	d008      	beq.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800795c:	4b0e      	ldr	r3, [pc, #56]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	490b      	ldr	r1, [pc, #44]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800796a:	4313      	orrs	r3, r2
 800796c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f003 0310 	and.w	r3, r3, #16
 8007976:	2b00      	cmp	r3, #0
 8007978:	d008      	beq.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800797a:	4b07      	ldr	r3, [pc, #28]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	68db      	ldr	r3, [r3, #12]
 8007986:	4904      	ldr	r1, [pc, #16]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007988:	4313      	orrs	r3, r2
 800798a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800798c:	2300      	movs	r3, #0
}
 800798e:	4618      	mov	r0, r3
 8007990:	3718      	adds	r7, #24
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
 8007996:	bf00      	nop
 8007998:	40021000 	.word	0x40021000
 800799c:	40007000 	.word	0x40007000
 80079a0:	42420440 	.word	0x42420440

080079a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d101      	bne.n	80079b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	e053      	b.n	8007a5e <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d106      	bne.n	80079d6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f7fc fc51 	bl	8004278 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2202      	movs	r2, #2
 80079da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079ec:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	685a      	ldr	r2, [r3, #4]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	431a      	orrs	r2, r3
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	431a      	orrs	r2, r3
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	691b      	ldr	r3, [r3, #16]
 8007a02:	431a      	orrs	r2, r3
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	695b      	ldr	r3, [r3, #20]
 8007a08:	431a      	orrs	r2, r3
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	699b      	ldr	r3, [r3, #24]
 8007a0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a12:	431a      	orrs	r2, r3
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	69db      	ldr	r3, [r3, #28]
 8007a18:	431a      	orrs	r2, r3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6a1b      	ldr	r3, [r3, #32]
 8007a1e:	ea42 0103 	orr.w	r1, r2, r3
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	430a      	orrs	r2, r1
 8007a2c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	699b      	ldr	r3, [r3, #24]
 8007a32:	0c1a      	lsrs	r2, r3, #16
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f002 0204 	and.w	r2, r2, #4
 8007a3c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	69da      	ldr	r2, [r3, #28]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a4c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2201      	movs	r2, #1
 8007a58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007a5c:	2300      	movs	r3, #0
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3708      	adds	r7, #8
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}

08007a66 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007a66:	b580      	push	{r7, lr}
 8007a68:	b08c      	sub	sp, #48	; 0x30
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	60f8      	str	r0, [r7, #12]
 8007a6e:	60b9      	str	r1, [r7, #8]
 8007a70:	607a      	str	r2, [r7, #4]
 8007a72:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007a74:	2301      	movs	r3, #1
 8007a76:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d101      	bne.n	8007a8c <HAL_SPI_TransmitReceive+0x26>
 8007a88:	2302      	movs	r3, #2
 8007a8a:	e18a      	b.n	8007da2 <HAL_SPI_TransmitReceive+0x33c>
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a94:	f7fc fd9a 	bl	80045cc <HAL_GetTick>
 8007a98:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007aa0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007aaa:	887b      	ldrh	r3, [r7, #2]
 8007aac:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007aae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d00f      	beq.n	8007ad6 <HAL_SPI_TransmitReceive+0x70>
 8007ab6:	69fb      	ldr	r3, [r7, #28]
 8007ab8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007abc:	d107      	bne.n	8007ace <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d103      	bne.n	8007ace <HAL_SPI_TransmitReceive+0x68>
 8007ac6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007aca:	2b04      	cmp	r3, #4
 8007acc:	d003      	beq.n	8007ad6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007ace:	2302      	movs	r3, #2
 8007ad0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007ad4:	e15b      	b.n	8007d8e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d005      	beq.n	8007ae8 <HAL_SPI_TransmitReceive+0x82>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d002      	beq.n	8007ae8 <HAL_SPI_TransmitReceive+0x82>
 8007ae2:	887b      	ldrh	r3, [r7, #2]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d103      	bne.n	8007af0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007aee:	e14e      	b.n	8007d8e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	2b04      	cmp	r3, #4
 8007afa:	d003      	beq.n	8007b04 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2205      	movs	r2, #5
 8007b00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2200      	movs	r2, #0
 8007b08:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	687a      	ldr	r2, [r7, #4]
 8007b0e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	887a      	ldrh	r2, [r7, #2]
 8007b14:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	887a      	ldrh	r2, [r7, #2]
 8007b1a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	68ba      	ldr	r2, [r7, #8]
 8007b20:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	887a      	ldrh	r2, [r7, #2]
 8007b26:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	887a      	ldrh	r2, [r7, #2]
 8007b2c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2200      	movs	r2, #0
 8007b32:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2200      	movs	r2, #0
 8007b38:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b44:	2b40      	cmp	r3, #64	; 0x40
 8007b46:	d007      	beq.n	8007b58 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b60:	d178      	bne.n	8007c54 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d002      	beq.n	8007b70 <HAL_SPI_TransmitReceive+0x10a>
 8007b6a:	8b7b      	ldrh	r3, [r7, #26]
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d166      	bne.n	8007c3e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b74:	881a      	ldrh	r2, [r3, #0]
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b80:	1c9a      	adds	r2, r3, #2
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	3b01      	subs	r3, #1
 8007b8e:	b29a      	uxth	r2, r3
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b94:	e053      	b.n	8007c3e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	f003 0302 	and.w	r3, r3, #2
 8007ba0:	2b02      	cmp	r3, #2
 8007ba2:	d11b      	bne.n	8007bdc <HAL_SPI_TransmitReceive+0x176>
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d016      	beq.n	8007bdc <HAL_SPI_TransmitReceive+0x176>
 8007bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	d113      	bne.n	8007bdc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bb8:	881a      	ldrh	r2, [r3, #0]
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bc4:	1c9a      	adds	r2, r3, #2
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bce:	b29b      	uxth	r3, r3
 8007bd0:	3b01      	subs	r3, #1
 8007bd2:	b29a      	uxth	r2, r3
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	f003 0301 	and.w	r3, r3, #1
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d119      	bne.n	8007c1e <HAL_SPI_TransmitReceive+0x1b8>
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d014      	beq.n	8007c1e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	68da      	ldr	r2, [r3, #12]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bfe:	b292      	uxth	r2, r2
 8007c00:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c06:	1c9a      	adds	r2, r3, #2
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	3b01      	subs	r3, #1
 8007c14:	b29a      	uxth	r2, r3
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007c1e:	f7fc fcd5 	bl	80045cc <HAL_GetTick>
 8007c22:	4602      	mov	r2, r0
 8007c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c26:	1ad3      	subs	r3, r2, r3
 8007c28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d807      	bhi.n	8007c3e <HAL_SPI_TransmitReceive+0x1d8>
 8007c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c34:	d003      	beq.n	8007c3e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007c36:	2303      	movs	r3, #3
 8007c38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007c3c:	e0a7      	b.n	8007d8e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d1a6      	bne.n	8007b96 <HAL_SPI_TransmitReceive+0x130>
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d1a1      	bne.n	8007b96 <HAL_SPI_TransmitReceive+0x130>
 8007c52:	e07c      	b.n	8007d4e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d002      	beq.n	8007c62 <HAL_SPI_TransmitReceive+0x1fc>
 8007c5c:	8b7b      	ldrh	r3, [r7, #26]
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d16b      	bne.n	8007d3a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	330c      	adds	r3, #12
 8007c6c:	7812      	ldrb	r2, [r2, #0]
 8007c6e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c74:	1c5a      	adds	r2, r3, #1
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	3b01      	subs	r3, #1
 8007c82:	b29a      	uxth	r2, r3
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c88:	e057      	b.n	8007d3a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	f003 0302 	and.w	r3, r3, #2
 8007c94:	2b02      	cmp	r3, #2
 8007c96:	d11c      	bne.n	8007cd2 <HAL_SPI_TransmitReceive+0x26c>
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d017      	beq.n	8007cd2 <HAL_SPI_TransmitReceive+0x26c>
 8007ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d114      	bne.n	8007cd2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	330c      	adds	r3, #12
 8007cb2:	7812      	ldrb	r2, [r2, #0]
 8007cb4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cba:	1c5a      	adds	r2, r3, #1
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	3b01      	subs	r3, #1
 8007cc8:	b29a      	uxth	r2, r3
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	f003 0301 	and.w	r3, r3, #1
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d119      	bne.n	8007d14 <HAL_SPI_TransmitReceive+0x2ae>
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d014      	beq.n	8007d14 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	68da      	ldr	r2, [r3, #12]
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf4:	b2d2      	uxtb	r2, r2
 8007cf6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cfc:	1c5a      	adds	r2, r3, #1
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	3b01      	subs	r3, #1
 8007d0a:	b29a      	uxth	r2, r3
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007d10:	2301      	movs	r3, #1
 8007d12:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007d14:	f7fc fc5a 	bl	80045cc <HAL_GetTick>
 8007d18:	4602      	mov	r2, r0
 8007d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1c:	1ad3      	subs	r3, r2, r3
 8007d1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d803      	bhi.n	8007d2c <HAL_SPI_TransmitReceive+0x2c6>
 8007d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d2a:	d102      	bne.n	8007d32 <HAL_SPI_TransmitReceive+0x2cc>
 8007d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d103      	bne.n	8007d3a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007d32:	2303      	movs	r3, #3
 8007d34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007d38:	e029      	b.n	8007d8e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d1a2      	bne.n	8007c8a <HAL_SPI_TransmitReceive+0x224>
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d19d      	bne.n	8007c8a <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d50:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007d52:	68f8      	ldr	r0, [r7, #12]
 8007d54:	f000 f999 	bl	800808a <SPI_EndRxTxTransaction>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d006      	beq.n	8007d6c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2220      	movs	r2, #32
 8007d68:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007d6a:	e010      	b.n	8007d8e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d10b      	bne.n	8007d8c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d74:	2300      	movs	r3, #0
 8007d76:	617b      	str	r3, [r7, #20]
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	68db      	ldr	r3, [r3, #12]
 8007d7e:	617b      	str	r3, [r7, #20]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	617b      	str	r3, [r7, #20]
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	e000      	b.n	8007d8e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007d8c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2201      	movs	r2, #1
 8007d92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007d9e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3730      	adds	r7, #48	; 0x30
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
	...

08007dac <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b088      	sub	sp, #32
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007dc4:	69bb      	ldr	r3, [r7, #24]
 8007dc6:	099b      	lsrs	r3, r3, #6
 8007dc8:	f003 0301 	and.w	r3, r3, #1
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d10f      	bne.n	8007df0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007dd0:	69bb      	ldr	r3, [r7, #24]
 8007dd2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d00a      	beq.n	8007df0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007dda:	69fb      	ldr	r3, [r7, #28]
 8007ddc:	099b      	lsrs	r3, r3, #6
 8007dde:	f003 0301 	and.w	r3, r3, #1
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d004      	beq.n	8007df0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	4798      	blx	r3
    return;
 8007dee:	e0bf      	b.n	8007f70 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007df0:	69bb      	ldr	r3, [r7, #24]
 8007df2:	085b      	lsrs	r3, r3, #1
 8007df4:	f003 0301 	and.w	r3, r3, #1
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d00a      	beq.n	8007e12 <HAL_SPI_IRQHandler+0x66>
 8007dfc:	69fb      	ldr	r3, [r7, #28]
 8007dfe:	09db      	lsrs	r3, r3, #7
 8007e00:	f003 0301 	and.w	r3, r3, #1
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d004      	beq.n	8007e12 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	4798      	blx	r3
    return;
 8007e10:	e0ae      	b.n	8007f70 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8007e12:	69bb      	ldr	r3, [r7, #24]
 8007e14:	095b      	lsrs	r3, r3, #5
 8007e16:	f003 0301 	and.w	r3, r3, #1
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d106      	bne.n	8007e2c <HAL_SPI_IRQHandler+0x80>
 8007e1e:	69bb      	ldr	r3, [r7, #24]
 8007e20:	099b      	lsrs	r3, r3, #6
 8007e22:	f003 0301 	and.w	r3, r3, #1
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	f000 80a2 	beq.w	8007f70 <HAL_SPI_IRQHandler+0x1c4>
       && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007e2c:	69fb      	ldr	r3, [r7, #28]
 8007e2e:	095b      	lsrs	r3, r3, #5
 8007e30:	f003 0301 	and.w	r3, r3, #1
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	f000 809b 	beq.w	8007f70 <HAL_SPI_IRQHandler+0x1c4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007e3a:	69bb      	ldr	r3, [r7, #24]
 8007e3c:	099b      	lsrs	r3, r3, #6
 8007e3e:	f003 0301 	and.w	r3, r3, #1
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d023      	beq.n	8007e8e <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	2b03      	cmp	r3, #3
 8007e50:	d011      	beq.n	8007e76 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e56:	f043 0204 	orr.w	r2, r3, #4
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e5e:	2300      	movs	r3, #0
 8007e60:	617b      	str	r3, [r7, #20]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	617b      	str	r3, [r7, #20]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	617b      	str	r3, [r7, #20]
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	e00b      	b.n	8007e8e <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e76:	2300      	movs	r3, #0
 8007e78:	613b      	str	r3, [r7, #16]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	68db      	ldr	r3, [r3, #12]
 8007e80:	613b      	str	r3, [r7, #16]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	613b      	str	r3, [r7, #16]
 8007e8a:	693b      	ldr	r3, [r7, #16]
        return;
 8007e8c:	e070      	b.n	8007f70 <HAL_SPI_IRQHandler+0x1c4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007e8e:	69bb      	ldr	r3, [r7, #24]
 8007e90:	095b      	lsrs	r3, r3, #5
 8007e92:	f003 0301 	and.w	r3, r3, #1
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d014      	beq.n	8007ec4 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e9e:	f043 0201 	orr.w	r2, r3, #1
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	60fb      	str	r3, [r7, #12]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	689b      	ldr	r3, [r3, #8]
 8007eb0:	60fb      	str	r3, [r7, #12]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ec0:	601a      	str	r2, [r3, #0]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d050      	beq.n	8007f6e <HAL_SPI_IRQHandler+0x1c2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	685a      	ldr	r2, [r3, #4]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007eda:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	f003 0302 	and.w	r3, r3, #2
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d104      	bne.n	8007ef8 <HAL_SPI_IRQHandler+0x14c>
 8007eee:	69fb      	ldr	r3, [r7, #28]
 8007ef0:	f003 0301 	and.w	r3, r3, #1
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d034      	beq.n	8007f62 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	685a      	ldr	r2, [r3, #4]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f022 0203 	bic.w	r2, r2, #3
 8007f06:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d011      	beq.n	8007f34 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f14:	4a18      	ldr	r2, [pc, #96]	; (8007f78 <HAL_SPI_IRQHandler+0x1cc>)
 8007f16:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f7fd fcfb 	bl	8005918 <HAL_DMA_Abort_IT>
 8007f22:	4603      	mov	r3, r0
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d005      	beq.n	8007f34 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f2c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d016      	beq.n	8007f6a <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f40:	4a0d      	ldr	r2, [pc, #52]	; (8007f78 <HAL_SPI_IRQHandler+0x1cc>)
 8007f42:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f7fd fce5 	bl	8005918 <HAL_DMA_Abort_IT>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d00a      	beq.n	8007f6a <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f58:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8007f60:	e003      	b.n	8007f6a <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 f80a 	bl	8007f7c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007f68:	e000      	b.n	8007f6c <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8007f6a:	bf00      	nop
    return;
 8007f6c:	bf00      	nop
 8007f6e:	bf00      	nop
  }
}
 8007f70:	3720      	adds	r7, #32
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	08007f8f 	.word	0x08007f8f

08007f7c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007f84:	bf00      	nop
 8007f86:	370c      	adds	r7, #12
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bc80      	pop	{r7}
 8007f8c:	4770      	bx	lr

08007f8e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f8e:	b580      	push	{r7, lr}
 8007f90:	b084      	sub	sp, #16
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f9a:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007fa8:	68f8      	ldr	r0, [r7, #12]
 8007faa:	f7ff ffe7 	bl	8007f7c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007fae:	bf00      	nop
 8007fb0:	3710      	adds	r7, #16
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}

08007fb6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007fb6:	b580      	push	{r7, lr}
 8007fb8:	b084      	sub	sp, #16
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	60f8      	str	r0, [r7, #12]
 8007fbe:	60b9      	str	r1, [r7, #8]
 8007fc0:	603b      	str	r3, [r7, #0]
 8007fc2:	4613      	mov	r3, r2
 8007fc4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007fc6:	e04c      	b.n	8008062 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fce:	d048      	beq.n	8008062 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007fd0:	f7fc fafc 	bl	80045cc <HAL_GetTick>
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	69bb      	ldr	r3, [r7, #24]
 8007fd8:	1ad3      	subs	r3, r2, r3
 8007fda:	683a      	ldr	r2, [r7, #0]
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d902      	bls.n	8007fe6 <SPI_WaitFlagStateUntilTimeout+0x30>
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d13d      	bne.n	8008062 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	685a      	ldr	r2, [r3, #4]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007ff4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ffe:	d111      	bne.n	8008024 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008008:	d004      	beq.n	8008014 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008012:	d107      	bne.n	8008024 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008022:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008028:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800802c:	d10f      	bne.n	800804e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	681a      	ldr	r2, [r3, #0]
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800803c:	601a      	str	r2, [r3, #0]
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800804c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2201      	movs	r2, #1
 8008052:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2200      	movs	r2, #0
 800805a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800805e:	2303      	movs	r3, #3
 8008060:	e00f      	b.n	8008082 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	689a      	ldr	r2, [r3, #8]
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	4013      	ands	r3, r2
 800806c:	68ba      	ldr	r2, [r7, #8]
 800806e:	429a      	cmp	r2, r3
 8008070:	bf0c      	ite	eq
 8008072:	2301      	moveq	r3, #1
 8008074:	2300      	movne	r3, #0
 8008076:	b2db      	uxtb	r3, r3
 8008078:	461a      	mov	r2, r3
 800807a:	79fb      	ldrb	r3, [r7, #7]
 800807c:	429a      	cmp	r2, r3
 800807e:	d1a3      	bne.n	8007fc8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8008080:	2300      	movs	r3, #0
}
 8008082:	4618      	mov	r0, r3
 8008084:	3710      	adds	r7, #16
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}

0800808a <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800808a:	b580      	push	{r7, lr}
 800808c:	b086      	sub	sp, #24
 800808e:	af02      	add	r7, sp, #8
 8008090:	60f8      	str	r0, [r7, #12]
 8008092:	60b9      	str	r1, [r7, #8]
 8008094:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	9300      	str	r3, [sp, #0]
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	2200      	movs	r2, #0
 800809e:	2180      	movs	r1, #128	; 0x80
 80080a0:	68f8      	ldr	r0, [r7, #12]
 80080a2:	f7ff ff88 	bl	8007fb6 <SPI_WaitFlagStateUntilTimeout>
 80080a6:	4603      	mov	r3, r0
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d007      	beq.n	80080bc <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080b0:	f043 0220 	orr.w	r2, r3, #32
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80080b8:	2303      	movs	r3, #3
 80080ba:	e000      	b.n	80080be <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80080bc:	2300      	movs	r3, #0
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3710      	adds	r7, #16
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}

080080c6 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80080c6:	b084      	sub	sp, #16
 80080c8:	b480      	push	{r7}
 80080ca:	b083      	sub	sp, #12
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	f107 0014 	add.w	r0, r7, #20
 80080d4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80080d8:	2300      	movs	r3, #0
}
 80080da:	4618      	mov	r0, r3
 80080dc:	370c      	adds	r7, #12
 80080de:	46bd      	mov	sp, r7
 80080e0:	bc80      	pop	{r7}
 80080e2:	b004      	add	sp, #16
 80080e4:	4770      	bx	lr

080080e6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80080e6:	b480      	push	{r7}
 80080e8:	b085      	sub	sp, #20
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80080ee:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80080f2:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80080fa:	b29a      	uxth	r2, r3
 80080fc:	89fb      	ldrh	r3, [r7, #14]
 80080fe:	4313      	orrs	r3, r2
 8008100:	b29a      	uxth	r2, r3
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008108:	2300      	movs	r3, #0
}
 800810a:	4618      	mov	r0, r3
 800810c:	3714      	adds	r7, #20
 800810e:	46bd      	mov	sp, r7
 8008110:	bc80      	pop	{r7}
 8008112:	4770      	bx	lr

08008114 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008114:	b480      	push	{r7}
 8008116:	b085      	sub	sp, #20
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800811c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8008120:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008128:	b29b      	uxth	r3, r3
 800812a:	b21a      	sxth	r2, r3
 800812c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008130:	43db      	mvns	r3, r3
 8008132:	b21b      	sxth	r3, r3
 8008134:	4013      	ands	r3, r2
 8008136:	b21b      	sxth	r3, r3
 8008138:	b29a      	uxth	r2, r3
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008140:	2300      	movs	r3, #0
}
 8008142:	4618      	mov	r0, r3
 8008144:	3714      	adds	r7, #20
 8008146:	46bd      	mov	sp, r7
 8008148:	bc80      	pop	{r7}
 800814a:	4770      	bx	lr

0800814c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800814c:	b480      	push	{r7}
 800814e:	b083      	sub	sp, #12
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	460b      	mov	r3, r1
 8008156:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008158:	2300      	movs	r3, #0
}
 800815a:	4618      	mov	r0, r3
 800815c:	370c      	adds	r7, #12
 800815e:	46bd      	mov	sp, r7
 8008160:	bc80      	pop	{r7}
 8008162:	4770      	bx	lr

08008164 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008164:	b084      	sub	sp, #16
 8008166:	b580      	push	{r7, lr}
 8008168:	b082      	sub	sp, #8
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
 800816e:	f107 0014 	add.w	r0, r7, #20
 8008172:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2201      	movs	r2, #1
 800817a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2200      	movs	r2, #0
 800818a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2200      	movs	r2, #0
 8008192:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f7ff ffa5 	bl	80080e6 <USB_EnableGlobalInt>

  return HAL_OK;
 800819c:	2300      	movs	r3, #0
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3708      	adds	r7, #8
 80081a2:	46bd      	mov	sp, r7
 80081a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80081a8:	b004      	add	sp, #16
 80081aa:	4770      	bx	lr

080081ac <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80081ac:	b490      	push	{r4, r7}
 80081ae:	b084      	sub	sp, #16
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80081b6:	2300      	movs	r3, #0
 80081b8:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	4413      	add	r3, r2
 80081c4:	881b      	ldrh	r3, [r3, #0]
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80081cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081d0:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	78db      	ldrb	r3, [r3, #3]
 80081d6:	2b03      	cmp	r3, #3
 80081d8:	d819      	bhi.n	800820e <USB_ActivateEndpoint+0x62>
 80081da:	a201      	add	r2, pc, #4	; (adr r2, 80081e0 <USB_ActivateEndpoint+0x34>)
 80081dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081e0:	080081f1 	.word	0x080081f1
 80081e4:	08008205 	.word	0x08008205
 80081e8:	08008215 	.word	0x08008215
 80081ec:	080081fb 	.word	0x080081fb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80081f0:	89bb      	ldrh	r3, [r7, #12]
 80081f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80081f6:	81bb      	strh	r3, [r7, #12]
      break;
 80081f8:	e00d      	b.n	8008216 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80081fa:	89bb      	ldrh	r3, [r7, #12]
 80081fc:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8008200:	81bb      	strh	r3, [r7, #12]
      break;
 8008202:	e008      	b.n	8008216 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008204:	89bb      	ldrh	r3, [r7, #12]
 8008206:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800820a:	81bb      	strh	r3, [r7, #12]
      break;
 800820c:	e003      	b.n	8008216 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 800820e:	2301      	movs	r3, #1
 8008210:	73fb      	strb	r3, [r7, #15]
      break;
 8008212:	e000      	b.n	8008216 <USB_ActivateEndpoint+0x6a>
      break;
 8008214:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	009b      	lsls	r3, r3, #2
 800821e:	441a      	add	r2, r3
 8008220:	89bb      	ldrh	r3, [r7, #12]
 8008222:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008226:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800822a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800822e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008232:	b29b      	uxth	r3, r3
 8008234:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	4413      	add	r3, r2
 8008240:	881b      	ldrh	r3, [r3, #0]
 8008242:	b29b      	uxth	r3, r3
 8008244:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008248:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800824c:	b29a      	uxth	r2, r3
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	b29b      	uxth	r3, r3
 8008254:	4313      	orrs	r3, r2
 8008256:	b29c      	uxth	r4, r3
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	441a      	add	r2, r3
 8008262:	4b8a      	ldr	r3, [pc, #552]	; (800848c <USB_ActivateEndpoint+0x2e0>)
 8008264:	4323      	orrs	r3, r4
 8008266:	b29b      	uxth	r3, r3
 8008268:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	7b1b      	ldrb	r3, [r3, #12]
 800826e:	2b00      	cmp	r3, #0
 8008270:	f040 8112 	bne.w	8008498 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	785b      	ldrb	r3, [r3, #1]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d067      	beq.n	800834c <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800827c:	687c      	ldr	r4, [r7, #4]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008284:	b29b      	uxth	r3, r3
 8008286:	441c      	add	r4, r3
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	011b      	lsls	r3, r3, #4
 800828e:	4423      	add	r3, r4
 8008290:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008294:	461c      	mov	r4, r3
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	88db      	ldrh	r3, [r3, #6]
 800829a:	085b      	lsrs	r3, r3, #1
 800829c:	b29b      	uxth	r3, r3
 800829e:	005b      	lsls	r3, r3, #1
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	009b      	lsls	r3, r3, #2
 80082ac:	4413      	add	r3, r2
 80082ae:	881b      	ldrh	r3, [r3, #0]
 80082b0:	b29c      	uxth	r4, r3
 80082b2:	4623      	mov	r3, r4
 80082b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d014      	beq.n	80082e6 <USB_ActivateEndpoint+0x13a>
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	009b      	lsls	r3, r3, #2
 80082c4:	4413      	add	r3, r2
 80082c6:	881b      	ldrh	r3, [r3, #0]
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082d2:	b29c      	uxth	r4, r3
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	009b      	lsls	r3, r3, #2
 80082dc:	441a      	add	r2, r3
 80082de:	4b6c      	ldr	r3, [pc, #432]	; (8008490 <USB_ActivateEndpoint+0x2e4>)
 80082e0:	4323      	orrs	r3, r4
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	78db      	ldrb	r3, [r3, #3]
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d018      	beq.n	8008320 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	009b      	lsls	r3, r3, #2
 80082f6:	4413      	add	r3, r2
 80082f8:	881b      	ldrh	r3, [r3, #0]
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008300:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008304:	b29c      	uxth	r4, r3
 8008306:	f084 0320 	eor.w	r3, r4, #32
 800830a:	b29c      	uxth	r4, r3
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	009b      	lsls	r3, r3, #2
 8008314:	441a      	add	r2, r3
 8008316:	4b5d      	ldr	r3, [pc, #372]	; (800848c <USB_ActivateEndpoint+0x2e0>)
 8008318:	4323      	orrs	r3, r4
 800831a:	b29b      	uxth	r3, r3
 800831c:	8013      	strh	r3, [r2, #0]
 800831e:	e22b      	b.n	8008778 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	4413      	add	r3, r2
 800832a:	881b      	ldrh	r3, [r3, #0]
 800832c:	b29b      	uxth	r3, r3
 800832e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008332:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008336:	b29c      	uxth	r4, r3
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	441a      	add	r2, r3
 8008342:	4b52      	ldr	r3, [pc, #328]	; (800848c <USB_ActivateEndpoint+0x2e0>)
 8008344:	4323      	orrs	r3, r4
 8008346:	b29b      	uxth	r3, r3
 8008348:	8013      	strh	r3, [r2, #0]
 800834a:	e215      	b.n	8008778 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800834c:	687c      	ldr	r4, [r7, #4]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008354:	b29b      	uxth	r3, r3
 8008356:	441c      	add	r4, r3
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	011b      	lsls	r3, r3, #4
 800835e:	4423      	add	r3, r4
 8008360:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008364:	461c      	mov	r4, r3
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	88db      	ldrh	r3, [r3, #6]
 800836a:	085b      	lsrs	r3, r3, #1
 800836c:	b29b      	uxth	r3, r3
 800836e:	005b      	lsls	r3, r3, #1
 8008370:	b29b      	uxth	r3, r3
 8008372:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008374:	687c      	ldr	r4, [r7, #4]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800837c:	b29b      	uxth	r3, r3
 800837e:	441c      	add	r4, r3
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	011b      	lsls	r3, r3, #4
 8008386:	4423      	add	r3, r4
 8008388:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800838c:	461c      	mov	r4, r3
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	691b      	ldr	r3, [r3, #16]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d10e      	bne.n	80083b4 <USB_ActivateEndpoint+0x208>
 8008396:	8823      	ldrh	r3, [r4, #0]
 8008398:	b29b      	uxth	r3, r3
 800839a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800839e:	b29b      	uxth	r3, r3
 80083a0:	8023      	strh	r3, [r4, #0]
 80083a2:	8823      	ldrh	r3, [r4, #0]
 80083a4:	b29b      	uxth	r3, r3
 80083a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	8023      	strh	r3, [r4, #0]
 80083b2:	e02d      	b.n	8008410 <USB_ActivateEndpoint+0x264>
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	691b      	ldr	r3, [r3, #16]
 80083b8:	2b3e      	cmp	r3, #62	; 0x3e
 80083ba:	d812      	bhi.n	80083e2 <USB_ActivateEndpoint+0x236>
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	691b      	ldr	r3, [r3, #16]
 80083c0:	085b      	lsrs	r3, r3, #1
 80083c2:	60bb      	str	r3, [r7, #8]
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	691b      	ldr	r3, [r3, #16]
 80083c8:	f003 0301 	and.w	r3, r3, #1
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d002      	beq.n	80083d6 <USB_ActivateEndpoint+0x22a>
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	3301      	adds	r3, #1
 80083d4:	60bb      	str	r3, [r7, #8]
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	b29b      	uxth	r3, r3
 80083da:	029b      	lsls	r3, r3, #10
 80083dc:	b29b      	uxth	r3, r3
 80083de:	8023      	strh	r3, [r4, #0]
 80083e0:	e016      	b.n	8008410 <USB_ActivateEndpoint+0x264>
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	691b      	ldr	r3, [r3, #16]
 80083e6:	095b      	lsrs	r3, r3, #5
 80083e8:	60bb      	str	r3, [r7, #8]
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	691b      	ldr	r3, [r3, #16]
 80083ee:	f003 031f 	and.w	r3, r3, #31
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d102      	bne.n	80083fc <USB_ActivateEndpoint+0x250>
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	3b01      	subs	r3, #1
 80083fa:	60bb      	str	r3, [r7, #8]
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	b29b      	uxth	r3, r3
 8008400:	029b      	lsls	r3, r3, #10
 8008402:	b29b      	uxth	r3, r3
 8008404:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008408:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800840c:	b29b      	uxth	r3, r3
 800840e:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	009b      	lsls	r3, r3, #2
 8008418:	4413      	add	r3, r2
 800841a:	881b      	ldrh	r3, [r3, #0]
 800841c:	b29c      	uxth	r4, r3
 800841e:	4623      	mov	r3, r4
 8008420:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008424:	2b00      	cmp	r3, #0
 8008426:	d014      	beq.n	8008452 <USB_ActivateEndpoint+0x2a6>
 8008428:	687a      	ldr	r2, [r7, #4]
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	009b      	lsls	r3, r3, #2
 8008430:	4413      	add	r3, r2
 8008432:	881b      	ldrh	r3, [r3, #0]
 8008434:	b29b      	uxth	r3, r3
 8008436:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800843a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800843e:	b29c      	uxth	r4, r3
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	009b      	lsls	r3, r3, #2
 8008448:	441a      	add	r2, r3
 800844a:	4b12      	ldr	r3, [pc, #72]	; (8008494 <USB_ActivateEndpoint+0x2e8>)
 800844c:	4323      	orrs	r3, r4
 800844e:	b29b      	uxth	r3, r3
 8008450:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008452:	687a      	ldr	r2, [r7, #4]
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	009b      	lsls	r3, r3, #2
 800845a:	4413      	add	r3, r2
 800845c:	881b      	ldrh	r3, [r3, #0]
 800845e:	b29b      	uxth	r3, r3
 8008460:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008468:	b29c      	uxth	r4, r3
 800846a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800846e:	b29c      	uxth	r4, r3
 8008470:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8008474:	b29c      	uxth	r4, r3
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	441a      	add	r2, r3
 8008480:	4b02      	ldr	r3, [pc, #8]	; (800848c <USB_ActivateEndpoint+0x2e0>)
 8008482:	4323      	orrs	r3, r4
 8008484:	b29b      	uxth	r3, r3
 8008486:	8013      	strh	r3, [r2, #0]
 8008488:	e176      	b.n	8008778 <USB_ActivateEndpoint+0x5cc>
 800848a:	bf00      	nop
 800848c:	ffff8080 	.word	0xffff8080
 8008490:	ffff80c0 	.word	0xffff80c0
 8008494:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	009b      	lsls	r3, r3, #2
 80084a0:	4413      	add	r3, r2
 80084a2:	881b      	ldrh	r3, [r3, #0]
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084ae:	b29c      	uxth	r4, r3
 80084b0:	687a      	ldr	r2, [r7, #4]
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	009b      	lsls	r3, r3, #2
 80084b8:	441a      	add	r2, r3
 80084ba:	4b96      	ldr	r3, [pc, #600]	; (8008714 <USB_ActivateEndpoint+0x568>)
 80084bc:	4323      	orrs	r3, r4
 80084be:	b29b      	uxth	r3, r3
 80084c0:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80084c2:	687c      	ldr	r4, [r7, #4]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	441c      	add	r4, r3
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	011b      	lsls	r3, r3, #4
 80084d4:	4423      	add	r3, r4
 80084d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084da:	461c      	mov	r4, r3
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	891b      	ldrh	r3, [r3, #8]
 80084e0:	085b      	lsrs	r3, r3, #1
 80084e2:	b29b      	uxth	r3, r3
 80084e4:	005b      	lsls	r3, r3, #1
 80084e6:	b29b      	uxth	r3, r3
 80084e8:	8023      	strh	r3, [r4, #0]
 80084ea:	687c      	ldr	r4, [r7, #4]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	441c      	add	r4, r3
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	011b      	lsls	r3, r3, #4
 80084fc:	4423      	add	r3, r4
 80084fe:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008502:	461c      	mov	r4, r3
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	895b      	ldrh	r3, [r3, #10]
 8008508:	085b      	lsrs	r3, r3, #1
 800850a:	b29b      	uxth	r3, r3
 800850c:	005b      	lsls	r3, r3, #1
 800850e:	b29b      	uxth	r3, r3
 8008510:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	785b      	ldrb	r3, [r3, #1]
 8008516:	2b00      	cmp	r3, #0
 8008518:	f040 8088 	bne.w	800862c <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	009b      	lsls	r3, r3, #2
 8008524:	4413      	add	r3, r2
 8008526:	881b      	ldrh	r3, [r3, #0]
 8008528:	b29c      	uxth	r4, r3
 800852a:	4623      	mov	r3, r4
 800852c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008530:	2b00      	cmp	r3, #0
 8008532:	d014      	beq.n	800855e <USB_ActivateEndpoint+0x3b2>
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	009b      	lsls	r3, r3, #2
 800853c:	4413      	add	r3, r2
 800853e:	881b      	ldrh	r3, [r3, #0]
 8008540:	b29b      	uxth	r3, r3
 8008542:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800854a:	b29c      	uxth	r4, r3
 800854c:	687a      	ldr	r2, [r7, #4]
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	781b      	ldrb	r3, [r3, #0]
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	441a      	add	r2, r3
 8008556:	4b70      	ldr	r3, [pc, #448]	; (8008718 <USB_ActivateEndpoint+0x56c>)
 8008558:	4323      	orrs	r3, r4
 800855a:	b29b      	uxth	r3, r3
 800855c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	4413      	add	r3, r2
 8008568:	881b      	ldrh	r3, [r3, #0]
 800856a:	b29c      	uxth	r4, r3
 800856c:	4623      	mov	r3, r4
 800856e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008572:	2b00      	cmp	r3, #0
 8008574:	d014      	beq.n	80085a0 <USB_ActivateEndpoint+0x3f4>
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	4413      	add	r3, r2
 8008580:	881b      	ldrh	r3, [r3, #0]
 8008582:	b29b      	uxth	r3, r3
 8008584:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008588:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800858c:	b29c      	uxth	r4, r3
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	781b      	ldrb	r3, [r3, #0]
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	441a      	add	r2, r3
 8008598:	4b60      	ldr	r3, [pc, #384]	; (800871c <USB_ActivateEndpoint+0x570>)
 800859a:	4323      	orrs	r3, r4
 800859c:	b29b      	uxth	r3, r3
 800859e:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	009b      	lsls	r3, r3, #2
 80085a8:	4413      	add	r3, r2
 80085aa:	881b      	ldrh	r3, [r3, #0]
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085b6:	b29c      	uxth	r4, r3
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	781b      	ldrb	r3, [r3, #0]
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	441a      	add	r2, r3
 80085c2:	4b56      	ldr	r3, [pc, #344]	; (800871c <USB_ActivateEndpoint+0x570>)
 80085c4:	4323      	orrs	r3, r4
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	009b      	lsls	r3, r3, #2
 80085d2:	4413      	add	r3, r2
 80085d4:	881b      	ldrh	r3, [r3, #0]
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085e0:	b29c      	uxth	r4, r3
 80085e2:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80085e6:	b29c      	uxth	r4, r3
 80085e8:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80085ec:	b29c      	uxth	r4, r3
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	009b      	lsls	r3, r3, #2
 80085f6:	441a      	add	r2, r3
 80085f8:	4b49      	ldr	r3, [pc, #292]	; (8008720 <USB_ActivateEndpoint+0x574>)
 80085fa:	4323      	orrs	r3, r4
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	009b      	lsls	r3, r3, #2
 8008608:	4413      	add	r3, r2
 800860a:	881b      	ldrh	r3, [r3, #0]
 800860c:	b29b      	uxth	r3, r3
 800860e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008612:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008616:	b29c      	uxth	r4, r3
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	009b      	lsls	r3, r3, #2
 8008620:	441a      	add	r2, r3
 8008622:	4b3f      	ldr	r3, [pc, #252]	; (8008720 <USB_ActivateEndpoint+0x574>)
 8008624:	4323      	orrs	r3, r4
 8008626:	b29b      	uxth	r3, r3
 8008628:	8013      	strh	r3, [r2, #0]
 800862a:	e0a5      	b.n	8008778 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	781b      	ldrb	r3, [r3, #0]
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	4413      	add	r3, r2
 8008636:	881b      	ldrh	r3, [r3, #0]
 8008638:	b29c      	uxth	r4, r3
 800863a:	4623      	mov	r3, r4
 800863c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008640:	2b00      	cmp	r3, #0
 8008642:	d014      	beq.n	800866e <USB_ActivateEndpoint+0x4c2>
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	009b      	lsls	r3, r3, #2
 800864c:	4413      	add	r3, r2
 800864e:	881b      	ldrh	r3, [r3, #0]
 8008650:	b29b      	uxth	r3, r3
 8008652:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800865a:	b29c      	uxth	r4, r3
 800865c:	687a      	ldr	r2, [r7, #4]
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	009b      	lsls	r3, r3, #2
 8008664:	441a      	add	r2, r3
 8008666:	4b2c      	ldr	r3, [pc, #176]	; (8008718 <USB_ActivateEndpoint+0x56c>)
 8008668:	4323      	orrs	r3, r4
 800866a:	b29b      	uxth	r3, r3
 800866c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	4413      	add	r3, r2
 8008678:	881b      	ldrh	r3, [r3, #0]
 800867a:	b29c      	uxth	r4, r3
 800867c:	4623      	mov	r3, r4
 800867e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008682:	2b00      	cmp	r3, #0
 8008684:	d014      	beq.n	80086b0 <USB_ActivateEndpoint+0x504>
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	4413      	add	r3, r2
 8008690:	881b      	ldrh	r3, [r3, #0]
 8008692:	b29b      	uxth	r3, r3
 8008694:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008698:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800869c:	b29c      	uxth	r4, r3
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	781b      	ldrb	r3, [r3, #0]
 80086a4:	009b      	lsls	r3, r3, #2
 80086a6:	441a      	add	r2, r3
 80086a8:	4b1c      	ldr	r3, [pc, #112]	; (800871c <USB_ActivateEndpoint+0x570>)
 80086aa:	4323      	orrs	r3, r4
 80086ac:	b29b      	uxth	r3, r3
 80086ae:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80086b0:	687a      	ldr	r2, [r7, #4]
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	781b      	ldrb	r3, [r3, #0]
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	4413      	add	r3, r2
 80086ba:	881b      	ldrh	r3, [r3, #0]
 80086bc:	b29b      	uxth	r3, r3
 80086be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086c6:	b29c      	uxth	r4, r3
 80086c8:	687a      	ldr	r2, [r7, #4]
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	009b      	lsls	r3, r3, #2
 80086d0:	441a      	add	r2, r3
 80086d2:	4b11      	ldr	r3, [pc, #68]	; (8008718 <USB_ActivateEndpoint+0x56c>)
 80086d4:	4323      	orrs	r3, r4
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	78db      	ldrb	r3, [r3, #3]
 80086de:	2b01      	cmp	r3, #1
 80086e0:	d020      	beq.n	8008724 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80086e2:	687a      	ldr	r2, [r7, #4]
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	4413      	add	r3, r2
 80086ec:	881b      	ldrh	r3, [r3, #0]
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086f8:	b29c      	uxth	r4, r3
 80086fa:	f084 0320 	eor.w	r3, r4, #32
 80086fe:	b29c      	uxth	r4, r3
 8008700:	687a      	ldr	r2, [r7, #4]
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	009b      	lsls	r3, r3, #2
 8008708:	441a      	add	r2, r3
 800870a:	4b05      	ldr	r3, [pc, #20]	; (8008720 <USB_ActivateEndpoint+0x574>)
 800870c:	4323      	orrs	r3, r4
 800870e:	b29b      	uxth	r3, r3
 8008710:	8013      	strh	r3, [r2, #0]
 8008712:	e01c      	b.n	800874e <USB_ActivateEndpoint+0x5a2>
 8008714:	ffff8180 	.word	0xffff8180
 8008718:	ffffc080 	.word	0xffffc080
 800871c:	ffff80c0 	.word	0xffff80c0
 8008720:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008724:	687a      	ldr	r2, [r7, #4]
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	781b      	ldrb	r3, [r3, #0]
 800872a:	009b      	lsls	r3, r3, #2
 800872c:	4413      	add	r3, r2
 800872e:	881b      	ldrh	r3, [r3, #0]
 8008730:	b29b      	uxth	r3, r3
 8008732:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008736:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800873a:	b29c      	uxth	r4, r3
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	441a      	add	r2, r3
 8008746:	4b0f      	ldr	r3, [pc, #60]	; (8008784 <USB_ActivateEndpoint+0x5d8>)
 8008748:	4323      	orrs	r3, r4
 800874a:	b29b      	uxth	r3, r3
 800874c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800874e:	687a      	ldr	r2, [r7, #4]
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	781b      	ldrb	r3, [r3, #0]
 8008754:	009b      	lsls	r3, r3, #2
 8008756:	4413      	add	r3, r2
 8008758:	881b      	ldrh	r3, [r3, #0]
 800875a:	b29b      	uxth	r3, r3
 800875c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008760:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008764:	b29c      	uxth	r4, r3
 8008766:	687a      	ldr	r2, [r7, #4]
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	441a      	add	r2, r3
 8008770:	4b04      	ldr	r3, [pc, #16]	; (8008784 <USB_ActivateEndpoint+0x5d8>)
 8008772:	4323      	orrs	r3, r4
 8008774:	b29b      	uxth	r3, r3
 8008776:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8008778:	7bfb      	ldrb	r3, [r7, #15]
}
 800877a:	4618      	mov	r0, r3
 800877c:	3710      	adds	r7, #16
 800877e:	46bd      	mov	sp, r7
 8008780:	bc90      	pop	{r4, r7}
 8008782:	4770      	bx	lr
 8008784:	ffff8080 	.word	0xffff8080

08008788 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008788:	b490      	push	{r4, r7}
 800878a:	b082      	sub	sp, #8
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	7b1b      	ldrb	r3, [r3, #12]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d171      	bne.n	800887e <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	785b      	ldrb	r3, [r3, #1]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d036      	beq.n	8008810 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	4413      	add	r3, r2
 80087ac:	881b      	ldrh	r3, [r3, #0]
 80087ae:	b29c      	uxth	r4, r3
 80087b0:	4623      	mov	r3, r4
 80087b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d014      	beq.n	80087e4 <USB_DeactivateEndpoint+0x5c>
 80087ba:	687a      	ldr	r2, [r7, #4]
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	781b      	ldrb	r3, [r3, #0]
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	4413      	add	r3, r2
 80087c4:	881b      	ldrh	r3, [r3, #0]
 80087c6:	b29b      	uxth	r3, r3
 80087c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087d0:	b29c      	uxth	r4, r3
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	781b      	ldrb	r3, [r3, #0]
 80087d8:	009b      	lsls	r3, r3, #2
 80087da:	441a      	add	r2, r3
 80087dc:	4b6b      	ldr	r3, [pc, #428]	; (800898c <USB_DeactivateEndpoint+0x204>)
 80087de:	4323      	orrs	r3, r4
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	4413      	add	r3, r2
 80087ee:	881b      	ldrh	r3, [r3, #0]
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087fa:	b29c      	uxth	r4, r3
 80087fc:	687a      	ldr	r2, [r7, #4]
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	009b      	lsls	r3, r3, #2
 8008804:	441a      	add	r2, r3
 8008806:	4b62      	ldr	r3, [pc, #392]	; (8008990 <USB_DeactivateEndpoint+0x208>)
 8008808:	4323      	orrs	r3, r4
 800880a:	b29b      	uxth	r3, r3
 800880c:	8013      	strh	r3, [r2, #0]
 800880e:	e144      	b.n	8008a9a <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	781b      	ldrb	r3, [r3, #0]
 8008816:	009b      	lsls	r3, r3, #2
 8008818:	4413      	add	r3, r2
 800881a:	881b      	ldrh	r3, [r3, #0]
 800881c:	b29c      	uxth	r4, r3
 800881e:	4623      	mov	r3, r4
 8008820:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008824:	2b00      	cmp	r3, #0
 8008826:	d014      	beq.n	8008852 <USB_DeactivateEndpoint+0xca>
 8008828:	687a      	ldr	r2, [r7, #4]
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	009b      	lsls	r3, r3, #2
 8008830:	4413      	add	r3, r2
 8008832:	881b      	ldrh	r3, [r3, #0]
 8008834:	b29b      	uxth	r3, r3
 8008836:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800883a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800883e:	b29c      	uxth	r4, r3
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	781b      	ldrb	r3, [r3, #0]
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	441a      	add	r2, r3
 800884a:	4b52      	ldr	r3, [pc, #328]	; (8008994 <USB_DeactivateEndpoint+0x20c>)
 800884c:	4323      	orrs	r3, r4
 800884e:	b29b      	uxth	r3, r3
 8008850:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008852:	687a      	ldr	r2, [r7, #4]
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	009b      	lsls	r3, r3, #2
 800885a:	4413      	add	r3, r2
 800885c:	881b      	ldrh	r3, [r3, #0]
 800885e:	b29b      	uxth	r3, r3
 8008860:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008864:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008868:	b29c      	uxth	r4, r3
 800886a:	687a      	ldr	r2, [r7, #4]
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	781b      	ldrb	r3, [r3, #0]
 8008870:	009b      	lsls	r3, r3, #2
 8008872:	441a      	add	r2, r3
 8008874:	4b46      	ldr	r3, [pc, #280]	; (8008990 <USB_DeactivateEndpoint+0x208>)
 8008876:	4323      	orrs	r3, r4
 8008878:	b29b      	uxth	r3, r3
 800887a:	8013      	strh	r3, [r2, #0]
 800887c:	e10d      	b.n	8008a9a <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	785b      	ldrb	r3, [r3, #1]
 8008882:	2b00      	cmp	r3, #0
 8008884:	f040 8088 	bne.w	8008998 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008888:	687a      	ldr	r2, [r7, #4]
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	781b      	ldrb	r3, [r3, #0]
 800888e:	009b      	lsls	r3, r3, #2
 8008890:	4413      	add	r3, r2
 8008892:	881b      	ldrh	r3, [r3, #0]
 8008894:	b29c      	uxth	r4, r3
 8008896:	4623      	mov	r3, r4
 8008898:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800889c:	2b00      	cmp	r3, #0
 800889e:	d014      	beq.n	80088ca <USB_DeactivateEndpoint+0x142>
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	009b      	lsls	r3, r3, #2
 80088a8:	4413      	add	r3, r2
 80088aa:	881b      	ldrh	r3, [r3, #0]
 80088ac:	b29b      	uxth	r3, r3
 80088ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088b6:	b29c      	uxth	r4, r3
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	441a      	add	r2, r3
 80088c2:	4b34      	ldr	r3, [pc, #208]	; (8008994 <USB_DeactivateEndpoint+0x20c>)
 80088c4:	4323      	orrs	r3, r4
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80088ca:	687a      	ldr	r2, [r7, #4]
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	4413      	add	r3, r2
 80088d4:	881b      	ldrh	r3, [r3, #0]
 80088d6:	b29c      	uxth	r4, r3
 80088d8:	4623      	mov	r3, r4
 80088da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d014      	beq.n	800890c <USB_DeactivateEndpoint+0x184>
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	009b      	lsls	r3, r3, #2
 80088ea:	4413      	add	r3, r2
 80088ec:	881b      	ldrh	r3, [r3, #0]
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088f8:	b29c      	uxth	r4, r3
 80088fa:	687a      	ldr	r2, [r7, #4]
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	009b      	lsls	r3, r3, #2
 8008902:	441a      	add	r2, r3
 8008904:	4b21      	ldr	r3, [pc, #132]	; (800898c <USB_DeactivateEndpoint+0x204>)
 8008906:	4323      	orrs	r3, r4
 8008908:	b29b      	uxth	r3, r3
 800890a:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800890c:	687a      	ldr	r2, [r7, #4]
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	009b      	lsls	r3, r3, #2
 8008914:	4413      	add	r3, r2
 8008916:	881b      	ldrh	r3, [r3, #0]
 8008918:	b29b      	uxth	r3, r3
 800891a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800891e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008922:	b29c      	uxth	r4, r3
 8008924:	687a      	ldr	r2, [r7, #4]
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	441a      	add	r2, r3
 800892e:	4b17      	ldr	r3, [pc, #92]	; (800898c <USB_DeactivateEndpoint+0x204>)
 8008930:	4323      	orrs	r3, r4
 8008932:	b29b      	uxth	r3, r3
 8008934:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	009b      	lsls	r3, r3, #2
 800893e:	4413      	add	r3, r2
 8008940:	881b      	ldrh	r3, [r3, #0]
 8008942:	b29b      	uxth	r3, r3
 8008944:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008948:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800894c:	b29c      	uxth	r4, r3
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	781b      	ldrb	r3, [r3, #0]
 8008954:	009b      	lsls	r3, r3, #2
 8008956:	441a      	add	r2, r3
 8008958:	4b0d      	ldr	r3, [pc, #52]	; (8008990 <USB_DeactivateEndpoint+0x208>)
 800895a:	4323      	orrs	r3, r4
 800895c:	b29b      	uxth	r3, r3
 800895e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	781b      	ldrb	r3, [r3, #0]
 8008966:	009b      	lsls	r3, r3, #2
 8008968:	4413      	add	r3, r2
 800896a:	881b      	ldrh	r3, [r3, #0]
 800896c:	b29b      	uxth	r3, r3
 800896e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008972:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008976:	b29c      	uxth	r4, r3
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	781b      	ldrb	r3, [r3, #0]
 800897e:	009b      	lsls	r3, r3, #2
 8008980:	441a      	add	r2, r3
 8008982:	4b03      	ldr	r3, [pc, #12]	; (8008990 <USB_DeactivateEndpoint+0x208>)
 8008984:	4323      	orrs	r3, r4
 8008986:	b29b      	uxth	r3, r3
 8008988:	8013      	strh	r3, [r2, #0]
 800898a:	e086      	b.n	8008a9a <USB_DeactivateEndpoint+0x312>
 800898c:	ffff80c0 	.word	0xffff80c0
 8008990:	ffff8080 	.word	0xffff8080
 8008994:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	4413      	add	r3, r2
 80089a2:	881b      	ldrh	r3, [r3, #0]
 80089a4:	b29c      	uxth	r4, r3
 80089a6:	4623      	mov	r3, r4
 80089a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d014      	beq.n	80089da <USB_DeactivateEndpoint+0x252>
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	009b      	lsls	r3, r3, #2
 80089b8:	4413      	add	r3, r2
 80089ba:	881b      	ldrh	r3, [r3, #0]
 80089bc:	b29b      	uxth	r3, r3
 80089be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089c6:	b29c      	uxth	r4, r3
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	009b      	lsls	r3, r3, #2
 80089d0:	441a      	add	r2, r3
 80089d2:	4b35      	ldr	r3, [pc, #212]	; (8008aa8 <USB_DeactivateEndpoint+0x320>)
 80089d4:	4323      	orrs	r3, r4
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80089da:	687a      	ldr	r2, [r7, #4]
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	781b      	ldrb	r3, [r3, #0]
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	4413      	add	r3, r2
 80089e4:	881b      	ldrh	r3, [r3, #0]
 80089e6:	b29c      	uxth	r4, r3
 80089e8:	4623      	mov	r3, r4
 80089ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d014      	beq.n	8008a1c <USB_DeactivateEndpoint+0x294>
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	781b      	ldrb	r3, [r3, #0]
 80089f8:	009b      	lsls	r3, r3, #2
 80089fa:	4413      	add	r3, r2
 80089fc:	881b      	ldrh	r3, [r3, #0]
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a08:	b29c      	uxth	r4, r3
 8008a0a:	687a      	ldr	r2, [r7, #4]
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	781b      	ldrb	r3, [r3, #0]
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	441a      	add	r2, r3
 8008a14:	4b25      	ldr	r3, [pc, #148]	; (8008aac <USB_DeactivateEndpoint+0x324>)
 8008a16:	4323      	orrs	r3, r4
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	781b      	ldrb	r3, [r3, #0]
 8008a22:	009b      	lsls	r3, r3, #2
 8008a24:	4413      	add	r3, r2
 8008a26:	881b      	ldrh	r3, [r3, #0]
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a32:	b29c      	uxth	r4, r3
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	441a      	add	r2, r3
 8008a3e:	4b1a      	ldr	r3, [pc, #104]	; (8008aa8 <USB_DeactivateEndpoint+0x320>)
 8008a40:	4323      	orrs	r3, r4
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	4413      	add	r3, r2
 8008a50:	881b      	ldrh	r3, [r3, #0]
 8008a52:	b29b      	uxth	r3, r3
 8008a54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a5c:	b29c      	uxth	r4, r3
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	781b      	ldrb	r3, [r3, #0]
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	441a      	add	r2, r3
 8008a68:	4b11      	ldr	r3, [pc, #68]	; (8008ab0 <USB_DeactivateEndpoint+0x328>)
 8008a6a:	4323      	orrs	r3, r4
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008a70:	687a      	ldr	r2, [r7, #4]
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	781b      	ldrb	r3, [r3, #0]
 8008a76:	009b      	lsls	r3, r3, #2
 8008a78:	4413      	add	r3, r2
 8008a7a:	881b      	ldrh	r3, [r3, #0]
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a86:	b29c      	uxth	r4, r3
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	441a      	add	r2, r3
 8008a92:	4b07      	ldr	r3, [pc, #28]	; (8008ab0 <USB_DeactivateEndpoint+0x328>)
 8008a94:	4323      	orrs	r3, r4
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008a9a:	2300      	movs	r3, #0
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3708      	adds	r7, #8
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bc90      	pop	{r4, r7}
 8008aa4:	4770      	bx	lr
 8008aa6:	bf00      	nop
 8008aa8:	ffffc080 	.word	0xffffc080
 8008aac:	ffff80c0 	.word	0xffff80c0
 8008ab0:	ffff8080 	.word	0xffff8080

08008ab4 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008ab4:	b590      	push	{r4, r7, lr}
 8008ab6:	b08d      	sub	sp, #52	; 0x34
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	785b      	ldrb	r3, [r3, #1]
 8008ac2:	2b01      	cmp	r3, #1
 8008ac4:	f040 8160 	bne.w	8008d88 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	699a      	ldr	r2, [r3, #24]
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	691b      	ldr	r3, [r3, #16]
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d909      	bls.n	8008ae8 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	691b      	ldr	r3, [r3, #16]
 8008ad8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	699a      	ldr	r2, [r3, #24]
 8008ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae0:	1ad2      	subs	r2, r2, r3
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	619a      	str	r2, [r3, #24]
 8008ae6:	e005      	b.n	8008af4 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	699b      	ldr	r3, [r3, #24]
 8008aec:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	2200      	movs	r2, #0
 8008af2:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	7b1b      	ldrb	r3, [r3, #12]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d119      	bne.n	8008b30 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	6959      	ldr	r1, [r3, #20]
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	88da      	ldrh	r2, [r3, #6]
 8008b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b06:	b29b      	uxth	r3, r3
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 fba2 	bl	8009252 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008b0e:	687c      	ldr	r4, [r7, #4]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	441c      	add	r4, r3
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	011b      	lsls	r3, r3, #4
 8008b20:	4423      	add	r3, r4
 8008b22:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008b26:	461c      	mov	r4, r3
 8008b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	8023      	strh	r3, [r4, #0]
 8008b2e:	e10f      	b.n	8008d50 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008b30:	687a      	ldr	r2, [r7, #4]
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	009b      	lsls	r3, r3, #2
 8008b38:	4413      	add	r3, r2
 8008b3a:	881b      	ldrh	r3, [r3, #0]
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d065      	beq.n	8008c12 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008b46:	687c      	ldr	r4, [r7, #4]
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	785b      	ldrb	r3, [r3, #1]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d148      	bne.n	8008be2 <USB_EPStartXfer+0x12e>
 8008b50:	687c      	ldr	r4, [r7, #4]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	441c      	add	r4, r3
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	781b      	ldrb	r3, [r3, #0]
 8008b60:	011b      	lsls	r3, r3, #4
 8008b62:	4423      	add	r3, r4
 8008b64:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008b68:	461c      	mov	r4, r3
 8008b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d10e      	bne.n	8008b8e <USB_EPStartXfer+0xda>
 8008b70:	8823      	ldrh	r3, [r4, #0]
 8008b72:	b29b      	uxth	r3, r3
 8008b74:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	8023      	strh	r3, [r4, #0]
 8008b7c:	8823      	ldrh	r3, [r4, #0]
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	8023      	strh	r3, [r4, #0]
 8008b8c:	e03d      	b.n	8008c0a <USB_EPStartXfer+0x156>
 8008b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b90:	2b3e      	cmp	r3, #62	; 0x3e
 8008b92:	d810      	bhi.n	8008bb6 <USB_EPStartXfer+0x102>
 8008b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b96:	085b      	lsrs	r3, r3, #1
 8008b98:	627b      	str	r3, [r7, #36]	; 0x24
 8008b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b9c:	f003 0301 	and.w	r3, r3, #1
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d002      	beq.n	8008baa <USB_EPStartXfer+0xf6>
 8008ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba6:	3301      	adds	r3, #1
 8008ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8008baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bac:	b29b      	uxth	r3, r3
 8008bae:	029b      	lsls	r3, r3, #10
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	8023      	strh	r3, [r4, #0]
 8008bb4:	e029      	b.n	8008c0a <USB_EPStartXfer+0x156>
 8008bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb8:	095b      	lsrs	r3, r3, #5
 8008bba:	627b      	str	r3, [r7, #36]	; 0x24
 8008bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bbe:	f003 031f 	and.w	r3, r3, #31
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d102      	bne.n	8008bcc <USB_EPStartXfer+0x118>
 8008bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc8:	3b01      	subs	r3, #1
 8008bca:	627b      	str	r3, [r7, #36]	; 0x24
 8008bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	029b      	lsls	r3, r3, #10
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bdc:	b29b      	uxth	r3, r3
 8008bde:	8023      	strh	r3, [r4, #0]
 8008be0:	e013      	b.n	8008c0a <USB_EPStartXfer+0x156>
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	785b      	ldrb	r3, [r3, #1]
 8008be6:	2b01      	cmp	r3, #1
 8008be8:	d10f      	bne.n	8008c0a <USB_EPStartXfer+0x156>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bf0:	b29b      	uxth	r3, r3
 8008bf2:	441c      	add	r4, r3
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	011b      	lsls	r3, r3, #4
 8008bfa:	4423      	add	r3, r4
 8008bfc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008c00:	60fb      	str	r3, [r7, #12]
 8008c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c04:	b29a      	uxth	r2, r3
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	895b      	ldrh	r3, [r3, #10]
 8008c0e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008c10:	e063      	b.n	8008cda <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	785b      	ldrb	r3, [r3, #1]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d148      	bne.n	8008cac <USB_EPStartXfer+0x1f8>
 8008c1a:	687c      	ldr	r4, [r7, #4]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c22:	b29b      	uxth	r3, r3
 8008c24:	441c      	add	r4, r3
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	011b      	lsls	r3, r3, #4
 8008c2c:	4423      	add	r3, r4
 8008c2e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008c32:	461c      	mov	r4, r3
 8008c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d10e      	bne.n	8008c58 <USB_EPStartXfer+0x1a4>
 8008c3a:	8823      	ldrh	r3, [r4, #0]
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	8023      	strh	r3, [r4, #0]
 8008c46:	8823      	ldrh	r3, [r4, #0]
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	8023      	strh	r3, [r4, #0]
 8008c56:	e03d      	b.n	8008cd4 <USB_EPStartXfer+0x220>
 8008c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c5a:	2b3e      	cmp	r3, #62	; 0x3e
 8008c5c:	d810      	bhi.n	8008c80 <USB_EPStartXfer+0x1cc>
 8008c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c60:	085b      	lsrs	r3, r3, #1
 8008c62:	623b      	str	r3, [r7, #32]
 8008c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c66:	f003 0301 	and.w	r3, r3, #1
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d002      	beq.n	8008c74 <USB_EPStartXfer+0x1c0>
 8008c6e:	6a3b      	ldr	r3, [r7, #32]
 8008c70:	3301      	adds	r3, #1
 8008c72:	623b      	str	r3, [r7, #32]
 8008c74:	6a3b      	ldr	r3, [r7, #32]
 8008c76:	b29b      	uxth	r3, r3
 8008c78:	029b      	lsls	r3, r3, #10
 8008c7a:	b29b      	uxth	r3, r3
 8008c7c:	8023      	strh	r3, [r4, #0]
 8008c7e:	e029      	b.n	8008cd4 <USB_EPStartXfer+0x220>
 8008c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c82:	095b      	lsrs	r3, r3, #5
 8008c84:	623b      	str	r3, [r7, #32]
 8008c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c88:	f003 031f 	and.w	r3, r3, #31
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d102      	bne.n	8008c96 <USB_EPStartXfer+0x1e2>
 8008c90:	6a3b      	ldr	r3, [r7, #32]
 8008c92:	3b01      	subs	r3, #1
 8008c94:	623b      	str	r3, [r7, #32]
 8008c96:	6a3b      	ldr	r3, [r7, #32]
 8008c98:	b29b      	uxth	r3, r3
 8008c9a:	029b      	lsls	r3, r3, #10
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ca2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	8023      	strh	r3, [r4, #0]
 8008caa:	e013      	b.n	8008cd4 <USB_EPStartXfer+0x220>
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	785b      	ldrb	r3, [r3, #1]
 8008cb0:	2b01      	cmp	r3, #1
 8008cb2:	d10f      	bne.n	8008cd4 <USB_EPStartXfer+0x220>
 8008cb4:	687c      	ldr	r4, [r7, #4]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	441c      	add	r4, r3
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	011b      	lsls	r3, r3, #4
 8008cc6:	4423      	add	r3, r4
 8008cc8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008ccc:	461c      	mov	r4, r3
 8008cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd0:	b29b      	uxth	r3, r3
 8008cd2:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	891b      	ldrh	r3, [r3, #8]
 8008cd8:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	6959      	ldr	r1, [r3, #20]
 8008cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 fab4 	bl	8009252 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	785b      	ldrb	r3, [r3, #1]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d115      	bne.n	8008d1e <USB_EPStartXfer+0x26a>
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	009b      	lsls	r3, r3, #2
 8008cfa:	4413      	add	r3, r2
 8008cfc:	881b      	ldrh	r3, [r3, #0]
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d08:	b29c      	uxth	r4, r3
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	781b      	ldrb	r3, [r3, #0]
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	441a      	add	r2, r3
 8008d14:	4b9a      	ldr	r3, [pc, #616]	; (8008f80 <USB_EPStartXfer+0x4cc>)
 8008d16:	4323      	orrs	r3, r4
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	8013      	strh	r3, [r2, #0]
 8008d1c:	e018      	b.n	8008d50 <USB_EPStartXfer+0x29c>
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	785b      	ldrb	r3, [r3, #1]
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	d114      	bne.n	8008d50 <USB_EPStartXfer+0x29c>
 8008d26:	687a      	ldr	r2, [r7, #4]
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	781b      	ldrb	r3, [r3, #0]
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	4413      	add	r3, r2
 8008d30:	881b      	ldrh	r3, [r3, #0]
 8008d32:	b29b      	uxth	r3, r3
 8008d34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d3c:	b29c      	uxth	r4, r3
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	441a      	add	r2, r3
 8008d48:	4b8e      	ldr	r3, [pc, #568]	; (8008f84 <USB_EPStartXfer+0x4d0>)
 8008d4a:	4323      	orrs	r3, r4
 8008d4c:	b29b      	uxth	r3, r3
 8008d4e:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008d50:	687a      	ldr	r2, [r7, #4]
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	009b      	lsls	r3, r3, #2
 8008d58:	4413      	add	r3, r2
 8008d5a:	881b      	ldrh	r3, [r3, #0]
 8008d5c:	b29b      	uxth	r3, r3
 8008d5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d66:	b29c      	uxth	r4, r3
 8008d68:	f084 0310 	eor.w	r3, r4, #16
 8008d6c:	b29c      	uxth	r4, r3
 8008d6e:	f084 0320 	eor.w	r3, r4, #32
 8008d72:	b29c      	uxth	r4, r3
 8008d74:	687a      	ldr	r2, [r7, #4]
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	781b      	ldrb	r3, [r3, #0]
 8008d7a:	009b      	lsls	r3, r3, #2
 8008d7c:	441a      	add	r2, r3
 8008d7e:	4b82      	ldr	r3, [pc, #520]	; (8008f88 <USB_EPStartXfer+0x4d4>)
 8008d80:	4323      	orrs	r3, r4
 8008d82:	b29b      	uxth	r3, r3
 8008d84:	8013      	strh	r3, [r2, #0]
 8008d86:	e146      	b.n	8009016 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	699a      	ldr	r2, [r3, #24]
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	691b      	ldr	r3, [r3, #16]
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d909      	bls.n	8008da8 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	691b      	ldr	r3, [r3, #16]
 8008d98:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	699a      	ldr	r2, [r3, #24]
 8008d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da0:	1ad2      	subs	r2, r2, r3
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	619a      	str	r2, [r3, #24]
 8008da6:	e005      	b.n	8008db4 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	699b      	ldr	r3, [r3, #24]
 8008dac:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	2200      	movs	r2, #0
 8008db2:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	7b1b      	ldrb	r3, [r3, #12]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d148      	bne.n	8008e4e <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008dbc:	687c      	ldr	r4, [r7, #4]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	441c      	add	r4, r3
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	781b      	ldrb	r3, [r3, #0]
 8008dcc:	011b      	lsls	r3, r3, #4
 8008dce:	4423      	add	r3, r4
 8008dd0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008dd4:	461c      	mov	r4, r3
 8008dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d10e      	bne.n	8008dfa <USB_EPStartXfer+0x346>
 8008ddc:	8823      	ldrh	r3, [r4, #0]
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008de4:	b29b      	uxth	r3, r3
 8008de6:	8023      	strh	r3, [r4, #0]
 8008de8:	8823      	ldrh	r3, [r4, #0]
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008df0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008df4:	b29b      	uxth	r3, r3
 8008df6:	8023      	strh	r3, [r4, #0]
 8008df8:	e0f2      	b.n	8008fe0 <USB_EPStartXfer+0x52c>
 8008dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfc:	2b3e      	cmp	r3, #62	; 0x3e
 8008dfe:	d810      	bhi.n	8008e22 <USB_EPStartXfer+0x36e>
 8008e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e02:	085b      	lsrs	r3, r3, #1
 8008e04:	61fb      	str	r3, [r7, #28]
 8008e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e08:	f003 0301 	and.w	r3, r3, #1
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d002      	beq.n	8008e16 <USB_EPStartXfer+0x362>
 8008e10:	69fb      	ldr	r3, [r7, #28]
 8008e12:	3301      	adds	r3, #1
 8008e14:	61fb      	str	r3, [r7, #28]
 8008e16:	69fb      	ldr	r3, [r7, #28]
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	029b      	lsls	r3, r3, #10
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	8023      	strh	r3, [r4, #0]
 8008e20:	e0de      	b.n	8008fe0 <USB_EPStartXfer+0x52c>
 8008e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e24:	095b      	lsrs	r3, r3, #5
 8008e26:	61fb      	str	r3, [r7, #28]
 8008e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e2a:	f003 031f 	and.w	r3, r3, #31
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d102      	bne.n	8008e38 <USB_EPStartXfer+0x384>
 8008e32:	69fb      	ldr	r3, [r7, #28]
 8008e34:	3b01      	subs	r3, #1
 8008e36:	61fb      	str	r3, [r7, #28]
 8008e38:	69fb      	ldr	r3, [r7, #28]
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	029b      	lsls	r3, r3, #10
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e48:	b29b      	uxth	r3, r3
 8008e4a:	8023      	strh	r3, [r4, #0]
 8008e4c:	e0c8      	b.n	8008fe0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	785b      	ldrb	r3, [r3, #1]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d148      	bne.n	8008ee8 <USB_EPStartXfer+0x434>
 8008e56:	687c      	ldr	r4, [r7, #4]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	441c      	add	r4, r3
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	011b      	lsls	r3, r3, #4
 8008e68:	4423      	add	r3, r4
 8008e6a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008e6e:	461c      	mov	r4, r3
 8008e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d10e      	bne.n	8008e94 <USB_EPStartXfer+0x3e0>
 8008e76:	8823      	ldrh	r3, [r4, #0]
 8008e78:	b29b      	uxth	r3, r3
 8008e7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	8023      	strh	r3, [r4, #0]
 8008e82:	8823      	ldrh	r3, [r4, #0]
 8008e84:	b29b      	uxth	r3, r3
 8008e86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e8e:	b29b      	uxth	r3, r3
 8008e90:	8023      	strh	r3, [r4, #0]
 8008e92:	e03d      	b.n	8008f10 <USB_EPStartXfer+0x45c>
 8008e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e96:	2b3e      	cmp	r3, #62	; 0x3e
 8008e98:	d810      	bhi.n	8008ebc <USB_EPStartXfer+0x408>
 8008e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9c:	085b      	lsrs	r3, r3, #1
 8008e9e:	61bb      	str	r3, [r7, #24]
 8008ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea2:	f003 0301 	and.w	r3, r3, #1
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d002      	beq.n	8008eb0 <USB_EPStartXfer+0x3fc>
 8008eaa:	69bb      	ldr	r3, [r7, #24]
 8008eac:	3301      	adds	r3, #1
 8008eae:	61bb      	str	r3, [r7, #24]
 8008eb0:	69bb      	ldr	r3, [r7, #24]
 8008eb2:	b29b      	uxth	r3, r3
 8008eb4:	029b      	lsls	r3, r3, #10
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	8023      	strh	r3, [r4, #0]
 8008eba:	e029      	b.n	8008f10 <USB_EPStartXfer+0x45c>
 8008ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ebe:	095b      	lsrs	r3, r3, #5
 8008ec0:	61bb      	str	r3, [r7, #24]
 8008ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec4:	f003 031f 	and.w	r3, r3, #31
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d102      	bne.n	8008ed2 <USB_EPStartXfer+0x41e>
 8008ecc:	69bb      	ldr	r3, [r7, #24]
 8008ece:	3b01      	subs	r3, #1
 8008ed0:	61bb      	str	r3, [r7, #24]
 8008ed2:	69bb      	ldr	r3, [r7, #24]
 8008ed4:	b29b      	uxth	r3, r3
 8008ed6:	029b      	lsls	r3, r3, #10
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ede:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	8023      	strh	r3, [r4, #0]
 8008ee6:	e013      	b.n	8008f10 <USB_EPStartXfer+0x45c>
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	785b      	ldrb	r3, [r3, #1]
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	d10f      	bne.n	8008f10 <USB_EPStartXfer+0x45c>
 8008ef0:	687c      	ldr	r4, [r7, #4]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ef8:	b29b      	uxth	r3, r3
 8008efa:	441c      	add	r4, r3
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	011b      	lsls	r3, r3, #4
 8008f02:	4423      	add	r3, r4
 8008f04:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008f08:	461c      	mov	r4, r3
 8008f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f0c:	b29b      	uxth	r3, r3
 8008f0e:	8023      	strh	r3, [r4, #0]
 8008f10:	687c      	ldr	r4, [r7, #4]
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	785b      	ldrb	r3, [r3, #1]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d14e      	bne.n	8008fb8 <USB_EPStartXfer+0x504>
 8008f1a:	687c      	ldr	r4, [r7, #4]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	441c      	add	r4, r3
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	011b      	lsls	r3, r3, #4
 8008f2c:	4423      	add	r3, r4
 8008f2e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008f32:	461c      	mov	r4, r3
 8008f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d10e      	bne.n	8008f58 <USB_EPStartXfer+0x4a4>
 8008f3a:	8823      	ldrh	r3, [r4, #0]
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008f42:	b29b      	uxth	r3, r3
 8008f44:	8023      	strh	r3, [r4, #0]
 8008f46:	8823      	ldrh	r3, [r4, #0]
 8008f48:	b29b      	uxth	r3, r3
 8008f4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f52:	b29b      	uxth	r3, r3
 8008f54:	8023      	strh	r3, [r4, #0]
 8008f56:	e043      	b.n	8008fe0 <USB_EPStartXfer+0x52c>
 8008f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f5a:	2b3e      	cmp	r3, #62	; 0x3e
 8008f5c:	d816      	bhi.n	8008f8c <USB_EPStartXfer+0x4d8>
 8008f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f60:	085b      	lsrs	r3, r3, #1
 8008f62:	617b      	str	r3, [r7, #20]
 8008f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f66:	f003 0301 	and.w	r3, r3, #1
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d002      	beq.n	8008f74 <USB_EPStartXfer+0x4c0>
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	3301      	adds	r3, #1
 8008f72:	617b      	str	r3, [r7, #20]
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	b29b      	uxth	r3, r3
 8008f78:	029b      	lsls	r3, r3, #10
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	8023      	strh	r3, [r4, #0]
 8008f7e:	e02f      	b.n	8008fe0 <USB_EPStartXfer+0x52c>
 8008f80:	ffff80c0 	.word	0xffff80c0
 8008f84:	ffffc080 	.word	0xffffc080
 8008f88:	ffff8080 	.word	0xffff8080
 8008f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f8e:	095b      	lsrs	r3, r3, #5
 8008f90:	617b      	str	r3, [r7, #20]
 8008f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f94:	f003 031f 	and.w	r3, r3, #31
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d102      	bne.n	8008fa2 <USB_EPStartXfer+0x4ee>
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	3b01      	subs	r3, #1
 8008fa0:	617b      	str	r3, [r7, #20]
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	029b      	lsls	r3, r3, #10
 8008fa8:	b29b      	uxth	r3, r3
 8008faa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	8023      	strh	r3, [r4, #0]
 8008fb6:	e013      	b.n	8008fe0 <USB_EPStartXfer+0x52c>
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	785b      	ldrb	r3, [r3, #1]
 8008fbc:	2b01      	cmp	r3, #1
 8008fbe:	d10f      	bne.n	8008fe0 <USB_EPStartXfer+0x52c>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	441c      	add	r4, r3
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	781b      	ldrb	r3, [r3, #0]
 8008fce:	011b      	lsls	r3, r3, #4
 8008fd0:	4423      	add	r3, r4
 8008fd2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008fd6:	613b      	str	r3, [r7, #16]
 8008fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fda:	b29a      	uxth	r2, r3
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	781b      	ldrb	r3, [r3, #0]
 8008fe6:	009b      	lsls	r3, r3, #2
 8008fe8:	4413      	add	r3, r2
 8008fea:	881b      	ldrh	r3, [r3, #0]
 8008fec:	b29b      	uxth	r3, r3
 8008fee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ff6:	b29c      	uxth	r4, r3
 8008ff8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8008ffc:	b29c      	uxth	r4, r3
 8008ffe:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8009002:	b29c      	uxth	r4, r3
 8009004:	687a      	ldr	r2, [r7, #4]
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	781b      	ldrb	r3, [r3, #0]
 800900a:	009b      	lsls	r3, r3, #2
 800900c:	441a      	add	r2, r3
 800900e:	4b04      	ldr	r3, [pc, #16]	; (8009020 <USB_EPStartXfer+0x56c>)
 8009010:	4323      	orrs	r3, r4
 8009012:	b29b      	uxth	r3, r3
 8009014:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009016:	2300      	movs	r3, #0
}
 8009018:	4618      	mov	r0, r3
 800901a:	3734      	adds	r7, #52	; 0x34
 800901c:	46bd      	mov	sp, r7
 800901e:	bd90      	pop	{r4, r7, pc}
 8009020:	ffff8080 	.word	0xffff8080

08009024 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009024:	b490      	push	{r4, r7}
 8009026:	b082      	sub	sp, #8
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	785b      	ldrb	r3, [r3, #1]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d018      	beq.n	8009068 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009036:	687a      	ldr	r2, [r7, #4]
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	781b      	ldrb	r3, [r3, #0]
 800903c:	009b      	lsls	r3, r3, #2
 800903e:	4413      	add	r3, r2
 8009040:	881b      	ldrh	r3, [r3, #0]
 8009042:	b29b      	uxth	r3, r3
 8009044:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009048:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800904c:	b29c      	uxth	r4, r3
 800904e:	f084 0310 	eor.w	r3, r4, #16
 8009052:	b29c      	uxth	r4, r3
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	781b      	ldrb	r3, [r3, #0]
 800905a:	009b      	lsls	r3, r3, #2
 800905c:	441a      	add	r2, r3
 800905e:	4b11      	ldr	r3, [pc, #68]	; (80090a4 <USB_EPSetStall+0x80>)
 8009060:	4323      	orrs	r3, r4
 8009062:	b29b      	uxth	r3, r3
 8009064:	8013      	strh	r3, [r2, #0]
 8009066:	e017      	b.n	8009098 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009068:	687a      	ldr	r2, [r7, #4]
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	781b      	ldrb	r3, [r3, #0]
 800906e:	009b      	lsls	r3, r3, #2
 8009070:	4413      	add	r3, r2
 8009072:	881b      	ldrh	r3, [r3, #0]
 8009074:	b29b      	uxth	r3, r3
 8009076:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800907a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800907e:	b29c      	uxth	r4, r3
 8009080:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8009084:	b29c      	uxth	r4, r3
 8009086:	687a      	ldr	r2, [r7, #4]
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	781b      	ldrb	r3, [r3, #0]
 800908c:	009b      	lsls	r3, r3, #2
 800908e:	441a      	add	r2, r3
 8009090:	4b04      	ldr	r3, [pc, #16]	; (80090a4 <USB_EPSetStall+0x80>)
 8009092:	4323      	orrs	r3, r4
 8009094:	b29b      	uxth	r3, r3
 8009096:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009098:	2300      	movs	r3, #0
}
 800909a:	4618      	mov	r0, r3
 800909c:	3708      	adds	r7, #8
 800909e:	46bd      	mov	sp, r7
 80090a0:	bc90      	pop	{r4, r7}
 80090a2:	4770      	bx	lr
 80090a4:	ffff8080 	.word	0xffff8080

080090a8 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80090a8:	b490      	push	{r4, r7}
 80090aa:	b082      	sub	sp, #8
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	7b1b      	ldrb	r3, [r3, #12]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d17d      	bne.n	80091b6 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	785b      	ldrb	r3, [r3, #1]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d03d      	beq.n	800913e <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80090c2:	687a      	ldr	r2, [r7, #4]
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	781b      	ldrb	r3, [r3, #0]
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	4413      	add	r3, r2
 80090cc:	881b      	ldrh	r3, [r3, #0]
 80090ce:	b29c      	uxth	r4, r3
 80090d0:	4623      	mov	r3, r4
 80090d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d014      	beq.n	8009104 <USB_EPClearStall+0x5c>
 80090da:	687a      	ldr	r2, [r7, #4]
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	781b      	ldrb	r3, [r3, #0]
 80090e0:	009b      	lsls	r3, r3, #2
 80090e2:	4413      	add	r3, r2
 80090e4:	881b      	ldrh	r3, [r3, #0]
 80090e6:	b29b      	uxth	r3, r3
 80090e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090f0:	b29c      	uxth	r4, r3
 80090f2:	687a      	ldr	r2, [r7, #4]
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	781b      	ldrb	r3, [r3, #0]
 80090f8:	009b      	lsls	r3, r3, #2
 80090fa:	441a      	add	r2, r3
 80090fc:	4b31      	ldr	r3, [pc, #196]	; (80091c4 <USB_EPClearStall+0x11c>)
 80090fe:	4323      	orrs	r3, r4
 8009100:	b29b      	uxth	r3, r3
 8009102:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	78db      	ldrb	r3, [r3, #3]
 8009108:	2b01      	cmp	r3, #1
 800910a:	d054      	beq.n	80091b6 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	781b      	ldrb	r3, [r3, #0]
 8009112:	009b      	lsls	r3, r3, #2
 8009114:	4413      	add	r3, r2
 8009116:	881b      	ldrh	r3, [r3, #0]
 8009118:	b29b      	uxth	r3, r3
 800911a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800911e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009122:	b29c      	uxth	r4, r3
 8009124:	f084 0320 	eor.w	r3, r4, #32
 8009128:	b29c      	uxth	r4, r3
 800912a:	687a      	ldr	r2, [r7, #4]
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	009b      	lsls	r3, r3, #2
 8009132:	441a      	add	r2, r3
 8009134:	4b24      	ldr	r3, [pc, #144]	; (80091c8 <USB_EPClearStall+0x120>)
 8009136:	4323      	orrs	r3, r4
 8009138:	b29b      	uxth	r3, r3
 800913a:	8013      	strh	r3, [r2, #0]
 800913c:	e03b      	b.n	80091b6 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800913e:	687a      	ldr	r2, [r7, #4]
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	009b      	lsls	r3, r3, #2
 8009146:	4413      	add	r3, r2
 8009148:	881b      	ldrh	r3, [r3, #0]
 800914a:	b29c      	uxth	r4, r3
 800914c:	4623      	mov	r3, r4
 800914e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009152:	2b00      	cmp	r3, #0
 8009154:	d014      	beq.n	8009180 <USB_EPClearStall+0xd8>
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	781b      	ldrb	r3, [r3, #0]
 800915c:	009b      	lsls	r3, r3, #2
 800915e:	4413      	add	r3, r2
 8009160:	881b      	ldrh	r3, [r3, #0]
 8009162:	b29b      	uxth	r3, r3
 8009164:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009168:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800916c:	b29c      	uxth	r4, r3
 800916e:	687a      	ldr	r2, [r7, #4]
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	009b      	lsls	r3, r3, #2
 8009176:	441a      	add	r2, r3
 8009178:	4b14      	ldr	r3, [pc, #80]	; (80091cc <USB_EPClearStall+0x124>)
 800917a:	4323      	orrs	r3, r4
 800917c:	b29b      	uxth	r3, r3
 800917e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009180:	687a      	ldr	r2, [r7, #4]
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	781b      	ldrb	r3, [r3, #0]
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	4413      	add	r3, r2
 800918a:	881b      	ldrh	r3, [r3, #0]
 800918c:	b29b      	uxth	r3, r3
 800918e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009196:	b29c      	uxth	r4, r3
 8009198:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800919c:	b29c      	uxth	r4, r3
 800919e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80091a2:	b29c      	uxth	r4, r3
 80091a4:	687a      	ldr	r2, [r7, #4]
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	781b      	ldrb	r3, [r3, #0]
 80091aa:	009b      	lsls	r3, r3, #2
 80091ac:	441a      	add	r2, r3
 80091ae:	4b06      	ldr	r3, [pc, #24]	; (80091c8 <USB_EPClearStall+0x120>)
 80091b0:	4323      	orrs	r3, r4
 80091b2:	b29b      	uxth	r3, r3
 80091b4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80091b6:	2300      	movs	r3, #0
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3708      	adds	r7, #8
 80091bc:	46bd      	mov	sp, r7
 80091be:	bc90      	pop	{r4, r7}
 80091c0:	4770      	bx	lr
 80091c2:	bf00      	nop
 80091c4:	ffff80c0 	.word	0xffff80c0
 80091c8:	ffff8080 	.word	0xffff8080
 80091cc:	ffffc080 	.word	0xffffc080

080091d0 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b083      	sub	sp, #12
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	460b      	mov	r3, r1
 80091da:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80091dc:	78fb      	ldrb	r3, [r7, #3]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d103      	bne.n	80091ea <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2280      	movs	r2, #128	; 0x80
 80091e6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80091ea:	2300      	movs	r3, #0
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	370c      	adds	r7, #12
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bc80      	pop	{r7}
 80091f4:	4770      	bx	lr

080091f6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80091f6:	b480      	push	{r7}
 80091f8:	b083      	sub	sp, #12
 80091fa:	af00      	add	r7, sp, #0
 80091fc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80091fe:	2300      	movs	r3, #0
}
 8009200:	4618      	mov	r0, r3
 8009202:	370c      	adds	r7, #12
 8009204:	46bd      	mov	sp, r7
 8009206:	bc80      	pop	{r7}
 8009208:	4770      	bx	lr

0800920a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800920a:	b480      	push	{r7}
 800920c:	b083      	sub	sp, #12
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009212:	2300      	movs	r3, #0
}
 8009214:	4618      	mov	r0, r3
 8009216:	370c      	adds	r7, #12
 8009218:	46bd      	mov	sp, r7
 800921a:	bc80      	pop	{r7}
 800921c:	4770      	bx	lr

0800921e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800921e:	b480      	push	{r7}
 8009220:	b085      	sub	sp, #20
 8009222:	af00      	add	r7, sp, #0
 8009224:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800922c:	b29b      	uxth	r3, r3
 800922e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009230:	68fb      	ldr	r3, [r7, #12]
}
 8009232:	4618      	mov	r0, r3
 8009234:	3714      	adds	r7, #20
 8009236:	46bd      	mov	sp, r7
 8009238:	bc80      	pop	{r7}
 800923a:	4770      	bx	lr

0800923c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009246:	2300      	movs	r3, #0
}
 8009248:	4618      	mov	r0, r3
 800924a:	370c      	adds	r7, #12
 800924c:	46bd      	mov	sp, r7
 800924e:	bc80      	pop	{r7}
 8009250:	4770      	bx	lr

08009252 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009252:	b480      	push	{r7}
 8009254:	b08d      	sub	sp, #52	; 0x34
 8009256:	af00      	add	r7, sp, #0
 8009258:	60f8      	str	r0, [r7, #12]
 800925a:	60b9      	str	r1, [r7, #8]
 800925c:	4611      	mov	r1, r2
 800925e:	461a      	mov	r2, r3
 8009260:	460b      	mov	r3, r1
 8009262:	80fb      	strh	r3, [r7, #6]
 8009264:	4613      	mov	r3, r2
 8009266:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009268:	88bb      	ldrh	r3, [r7, #4]
 800926a:	3301      	adds	r3, #1
 800926c:	085b      	lsrs	r3, r3, #1
 800926e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009278:	88fb      	ldrh	r3, [r7, #6]
 800927a:	005a      	lsls	r2, r3, #1
 800927c:	69fb      	ldr	r3, [r7, #28]
 800927e:	4413      	add	r3, r2
 8009280:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009284:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009286:	6a3b      	ldr	r3, [r7, #32]
 8009288:	62fb      	str	r3, [r7, #44]	; 0x2c
 800928a:	e01e      	b.n	80092ca <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800928c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800928e:	781b      	ldrb	r3, [r3, #0]
 8009290:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009294:	3301      	adds	r3, #1
 8009296:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800929a:	781b      	ldrb	r3, [r3, #0]
 800929c:	b29b      	uxth	r3, r3
 800929e:	021b      	lsls	r3, r3, #8
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	461a      	mov	r2, r3
 80092a4:	69bb      	ldr	r3, [r7, #24]
 80092a6:	4313      	orrs	r3, r2
 80092a8:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	b29a      	uxth	r2, r3
 80092ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092b0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80092b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092b4:	3302      	adds	r3, #2
 80092b6:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80092b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ba:	3302      	adds	r3, #2
 80092bc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80092be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c0:	3301      	adds	r3, #1
 80092c2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80092c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c6:	3b01      	subs	r3, #1
 80092c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80092ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d1dd      	bne.n	800928c <USB_WritePMA+0x3a>
  }
}
 80092d0:	bf00      	nop
 80092d2:	3734      	adds	r7, #52	; 0x34
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bc80      	pop	{r7}
 80092d8:	4770      	bx	lr

080092da <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80092da:	b480      	push	{r7}
 80092dc:	b08b      	sub	sp, #44	; 0x2c
 80092de:	af00      	add	r7, sp, #0
 80092e0:	60f8      	str	r0, [r7, #12]
 80092e2:	60b9      	str	r1, [r7, #8]
 80092e4:	4611      	mov	r1, r2
 80092e6:	461a      	mov	r2, r3
 80092e8:	460b      	mov	r3, r1
 80092ea:	80fb      	strh	r3, [r7, #6]
 80092ec:	4613      	mov	r3, r2
 80092ee:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80092f0:	88bb      	ldrh	r3, [r7, #4]
 80092f2:	085b      	lsrs	r3, r3, #1
 80092f4:	b29b      	uxth	r3, r3
 80092f6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009300:	88fb      	ldrh	r3, [r7, #6]
 8009302:	005a      	lsls	r2, r3, #1
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	4413      	add	r3, r2
 8009308:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800930c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800930e:	69bb      	ldr	r3, [r7, #24]
 8009310:	627b      	str	r3, [r7, #36]	; 0x24
 8009312:	e01b      	b.n	800934c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009314:	6a3b      	ldr	r3, [r7, #32]
 8009316:	881b      	ldrh	r3, [r3, #0]
 8009318:	b29b      	uxth	r3, r3
 800931a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800931c:	6a3b      	ldr	r3, [r7, #32]
 800931e:	3302      	adds	r3, #2
 8009320:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	b2da      	uxtb	r2, r3
 8009326:	69fb      	ldr	r3, [r7, #28]
 8009328:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800932a:	69fb      	ldr	r3, [r7, #28]
 800932c:	3301      	adds	r3, #1
 800932e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	0a1b      	lsrs	r3, r3, #8
 8009334:	b2da      	uxtb	r2, r3
 8009336:	69fb      	ldr	r3, [r7, #28]
 8009338:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800933a:	69fb      	ldr	r3, [r7, #28]
 800933c:	3301      	adds	r3, #1
 800933e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009340:	6a3b      	ldr	r3, [r7, #32]
 8009342:	3302      	adds	r3, #2
 8009344:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8009346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009348:	3b01      	subs	r3, #1
 800934a:	627b      	str	r3, [r7, #36]	; 0x24
 800934c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800934e:	2b00      	cmp	r3, #0
 8009350:	d1e0      	bne.n	8009314 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8009352:	88bb      	ldrh	r3, [r7, #4]
 8009354:	f003 0301 	and.w	r3, r3, #1
 8009358:	b29b      	uxth	r3, r3
 800935a:	2b00      	cmp	r3, #0
 800935c:	d007      	beq.n	800936e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800935e:	6a3b      	ldr	r3, [r7, #32]
 8009360:	881b      	ldrh	r3, [r3, #0]
 8009362:	b29b      	uxth	r3, r3
 8009364:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	b2da      	uxtb	r2, r3
 800936a:	69fb      	ldr	r3, [r7, #28]
 800936c:	701a      	strb	r2, [r3, #0]
  }
}
 800936e:	bf00      	nop
 8009370:	372c      	adds	r7, #44	; 0x2c
 8009372:	46bd      	mov	sp, r7
 8009374:	bc80      	pop	{r7}
 8009376:	4770      	bx	lr

08009378 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	460b      	mov	r3, r1
 8009382:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009384:	2300      	movs	r3, #0
 8009386:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	7c1b      	ldrb	r3, [r3, #16]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d115      	bne.n	80093bc <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009390:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009394:	2202      	movs	r2, #2
 8009396:	2181      	movs	r1, #129	; 0x81
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f001 fe74 	bl	800b086 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2201      	movs	r2, #1
 80093a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80093a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80093a8:	2202      	movs	r2, #2
 80093aa:	2101      	movs	r1, #1
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f001 fe6a 	bl	800b086 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2201      	movs	r2, #1
 80093b6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80093ba:	e012      	b.n	80093e2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80093bc:	2340      	movs	r3, #64	; 0x40
 80093be:	2202      	movs	r2, #2
 80093c0:	2181      	movs	r1, #129	; 0x81
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f001 fe5f 	bl	800b086 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2201      	movs	r2, #1
 80093cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80093ce:	2340      	movs	r3, #64	; 0x40
 80093d0:	2202      	movs	r2, #2
 80093d2:	2101      	movs	r1, #1
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f001 fe56 	bl	800b086 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2201      	movs	r2, #1
 80093de:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80093e2:	2308      	movs	r3, #8
 80093e4:	2203      	movs	r2, #3
 80093e6:	2182      	movs	r1, #130	; 0x82
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f001 fe4c 	bl	800b086 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2201      	movs	r2, #1
 80093f2:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80093f4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80093f8:	f001 ff66 	bl	800b2c8 <USBD_static_malloc>
 80093fc:	4602      	mov	r2, r0
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800940a:	2b00      	cmp	r3, #0
 800940c:	d102      	bne.n	8009414 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800940e:	2301      	movs	r3, #1
 8009410:	73fb      	strb	r3, [r7, #15]
 8009412:	e026      	b.n	8009462 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800941a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	2200      	movs	r2, #0
 800942a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	2200      	movs	r2, #0
 8009432:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	7c1b      	ldrb	r3, [r3, #16]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d109      	bne.n	8009452 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009444:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009448:	2101      	movs	r1, #1
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f001 ff05 	bl	800b25a <USBD_LL_PrepareReceive>
 8009450:	e007      	b.n	8009462 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009458:	2340      	movs	r3, #64	; 0x40
 800945a:	2101      	movs	r1, #1
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f001 fefc 	bl	800b25a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009462:	7bfb      	ldrb	r3, [r7, #15]
}
 8009464:	4618      	mov	r0, r3
 8009466:	3710      	adds	r7, #16
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b084      	sub	sp, #16
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	460b      	mov	r3, r1
 8009476:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009478:	2300      	movs	r3, #0
 800947a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800947c:	2181      	movs	r1, #129	; 0x81
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f001 fe27 	bl	800b0d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2200      	movs	r2, #0
 8009488:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800948a:	2101      	movs	r1, #1
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f001 fe20 	bl	800b0d2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2200      	movs	r2, #0
 8009496:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800949a:	2182      	movs	r1, #130	; 0x82
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f001 fe18 	bl	800b0d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2200      	movs	r2, #0
 80094a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d00e      	beq.n	80094d0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094c2:	4618      	mov	r0, r3
 80094c4:	f001 ff0c 	bl	800b2e0 <USBD_static_free>
    pdev->pClassData = NULL;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2200      	movs	r2, #0
 80094cc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80094d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3710      	adds	r7, #16
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}

080094da <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80094da:	b580      	push	{r7, lr}
 80094dc:	b086      	sub	sp, #24
 80094de:	af00      	add	r7, sp, #0
 80094e0:	6078      	str	r0, [r7, #4]
 80094e2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094ea:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80094ec:	2300      	movs	r3, #0
 80094ee:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80094f0:	2300      	movs	r3, #0
 80094f2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80094f4:	2300      	movs	r3, #0
 80094f6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	781b      	ldrb	r3, [r3, #0]
 80094fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009500:	2b00      	cmp	r3, #0
 8009502:	d039      	beq.n	8009578 <USBD_CDC_Setup+0x9e>
 8009504:	2b20      	cmp	r3, #32
 8009506:	d17c      	bne.n	8009602 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	88db      	ldrh	r3, [r3, #6]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d029      	beq.n	8009564 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	781b      	ldrb	r3, [r3, #0]
 8009514:	b25b      	sxtb	r3, r3
 8009516:	2b00      	cmp	r3, #0
 8009518:	da11      	bge.n	800953e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009520:	689b      	ldr	r3, [r3, #8]
 8009522:	683a      	ldr	r2, [r7, #0]
 8009524:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009526:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009528:	683a      	ldr	r2, [r7, #0]
 800952a:	88d2      	ldrh	r2, [r2, #6]
 800952c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800952e:	6939      	ldr	r1, [r7, #16]
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	88db      	ldrh	r3, [r3, #6]
 8009534:	461a      	mov	r2, r3
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f001 f9f6 	bl	800a928 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800953c:	e068      	b.n	8009610 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	785a      	ldrb	r2, [r3, #1]
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	88db      	ldrh	r3, [r3, #6]
 800954c:	b2da      	uxtb	r2, r3
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009554:	6939      	ldr	r1, [r7, #16]
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	88db      	ldrh	r3, [r3, #6]
 800955a:	461a      	mov	r2, r3
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f001 fa11 	bl	800a984 <USBD_CtlPrepareRx>
      break;
 8009562:	e055      	b.n	8009610 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800956a:	689b      	ldr	r3, [r3, #8]
 800956c:	683a      	ldr	r2, [r7, #0]
 800956e:	7850      	ldrb	r0, [r2, #1]
 8009570:	2200      	movs	r2, #0
 8009572:	6839      	ldr	r1, [r7, #0]
 8009574:	4798      	blx	r3
      break;
 8009576:	e04b      	b.n	8009610 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	785b      	ldrb	r3, [r3, #1]
 800957c:	2b0a      	cmp	r3, #10
 800957e:	d017      	beq.n	80095b0 <USBD_CDC_Setup+0xd6>
 8009580:	2b0b      	cmp	r3, #11
 8009582:	d029      	beq.n	80095d8 <USBD_CDC_Setup+0xfe>
 8009584:	2b00      	cmp	r3, #0
 8009586:	d133      	bne.n	80095f0 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800958e:	2b03      	cmp	r3, #3
 8009590:	d107      	bne.n	80095a2 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009592:	f107 030c 	add.w	r3, r7, #12
 8009596:	2202      	movs	r2, #2
 8009598:	4619      	mov	r1, r3
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f001 f9c4 	bl	800a928 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80095a0:	e02e      	b.n	8009600 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80095a2:	6839      	ldr	r1, [r7, #0]
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f001 f955 	bl	800a854 <USBD_CtlError>
            ret = USBD_FAIL;
 80095aa:	2302      	movs	r3, #2
 80095ac:	75fb      	strb	r3, [r7, #23]
          break;
 80095ae:	e027      	b.n	8009600 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095b6:	2b03      	cmp	r3, #3
 80095b8:	d107      	bne.n	80095ca <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80095ba:	f107 030f 	add.w	r3, r7, #15
 80095be:	2201      	movs	r2, #1
 80095c0:	4619      	mov	r1, r3
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f001 f9b0 	bl	800a928 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80095c8:	e01a      	b.n	8009600 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80095ca:	6839      	ldr	r1, [r7, #0]
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f001 f941 	bl	800a854 <USBD_CtlError>
            ret = USBD_FAIL;
 80095d2:	2302      	movs	r3, #2
 80095d4:	75fb      	strb	r3, [r7, #23]
          break;
 80095d6:	e013      	b.n	8009600 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095de:	2b03      	cmp	r3, #3
 80095e0:	d00d      	beq.n	80095fe <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 80095e2:	6839      	ldr	r1, [r7, #0]
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f001 f935 	bl	800a854 <USBD_CtlError>
            ret = USBD_FAIL;
 80095ea:	2302      	movs	r3, #2
 80095ec:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80095ee:	e006      	b.n	80095fe <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 80095f0:	6839      	ldr	r1, [r7, #0]
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f001 f92e 	bl	800a854 <USBD_CtlError>
          ret = USBD_FAIL;
 80095f8:	2302      	movs	r3, #2
 80095fa:	75fb      	strb	r3, [r7, #23]
          break;
 80095fc:	e000      	b.n	8009600 <USBD_CDC_Setup+0x126>
          break;
 80095fe:	bf00      	nop
      }
      break;
 8009600:	e006      	b.n	8009610 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8009602:	6839      	ldr	r1, [r7, #0]
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f001 f925 	bl	800a854 <USBD_CtlError>
      ret = USBD_FAIL;
 800960a:	2302      	movs	r3, #2
 800960c:	75fb      	strb	r3, [r7, #23]
      break;
 800960e:	bf00      	nop
  }

  return ret;
 8009610:	7dfb      	ldrb	r3, [r7, #23]
}
 8009612:	4618      	mov	r0, r3
 8009614:	3718      	adds	r7, #24
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}

0800961a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800961a:	b580      	push	{r7, lr}
 800961c:	b084      	sub	sp, #16
 800961e:	af00      	add	r7, sp, #0
 8009620:	6078      	str	r0, [r7, #4]
 8009622:	460b      	mov	r3, r1
 8009624:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800962c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009634:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800963c:	2b00      	cmp	r3, #0
 800963e:	d037      	beq.n	80096b0 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009640:	78fa      	ldrb	r2, [r7, #3]
 8009642:	6879      	ldr	r1, [r7, #4]
 8009644:	4613      	mov	r3, r2
 8009646:	009b      	lsls	r3, r3, #2
 8009648:	4413      	add	r3, r2
 800964a:	009b      	lsls	r3, r3, #2
 800964c:	440b      	add	r3, r1
 800964e:	331c      	adds	r3, #28
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d026      	beq.n	80096a4 <USBD_CDC_DataIn+0x8a>
 8009656:	78fa      	ldrb	r2, [r7, #3]
 8009658:	6879      	ldr	r1, [r7, #4]
 800965a:	4613      	mov	r3, r2
 800965c:	009b      	lsls	r3, r3, #2
 800965e:	4413      	add	r3, r2
 8009660:	009b      	lsls	r3, r3, #2
 8009662:	440b      	add	r3, r1
 8009664:	331c      	adds	r3, #28
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	78fa      	ldrb	r2, [r7, #3]
 800966a:	68b9      	ldr	r1, [r7, #8]
 800966c:	0152      	lsls	r2, r2, #5
 800966e:	440a      	add	r2, r1
 8009670:	3238      	adds	r2, #56	; 0x38
 8009672:	6812      	ldr	r2, [r2, #0]
 8009674:	fbb3 f1f2 	udiv	r1, r3, r2
 8009678:	fb02 f201 	mul.w	r2, r2, r1
 800967c:	1a9b      	subs	r3, r3, r2
 800967e:	2b00      	cmp	r3, #0
 8009680:	d110      	bne.n	80096a4 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009682:	78fa      	ldrb	r2, [r7, #3]
 8009684:	6879      	ldr	r1, [r7, #4]
 8009686:	4613      	mov	r3, r2
 8009688:	009b      	lsls	r3, r3, #2
 800968a:	4413      	add	r3, r2
 800968c:	009b      	lsls	r3, r3, #2
 800968e:	440b      	add	r3, r1
 8009690:	331c      	adds	r3, #28
 8009692:	2200      	movs	r2, #0
 8009694:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009696:	78f9      	ldrb	r1, [r7, #3]
 8009698:	2300      	movs	r3, #0
 800969a:	2200      	movs	r2, #0
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f001 fdb9 	bl	800b214 <USBD_LL_Transmit>
 80096a2:	e003      	b.n	80096ac <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2200      	movs	r2, #0
 80096a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80096ac:	2300      	movs	r3, #0
 80096ae:	e000      	b.n	80096b2 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 80096b0:	2302      	movs	r3, #2
  }
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3710      	adds	r7, #16
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}

080096ba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80096ba:	b580      	push	{r7, lr}
 80096bc:	b084      	sub	sp, #16
 80096be:	af00      	add	r7, sp, #0
 80096c0:	6078      	str	r0, [r7, #4]
 80096c2:	460b      	mov	r3, r1
 80096c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096cc:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80096ce:	78fb      	ldrb	r3, [r7, #3]
 80096d0:	4619      	mov	r1, r3
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f001 fde4 	bl	800b2a0 <USBD_LL_GetRxDataSize>
 80096d8:	4602      	mov	r2, r0
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d00d      	beq.n	8009706 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80096f0:	68db      	ldr	r3, [r3, #12]
 80096f2:	68fa      	ldr	r2, [r7, #12]
 80096f4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80096f8:	68fa      	ldr	r2, [r7, #12]
 80096fa:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80096fe:	4611      	mov	r1, r2
 8009700:	4798      	blx	r3

    return USBD_OK;
 8009702:	2300      	movs	r3, #0
 8009704:	e000      	b.n	8009708 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009706:	2302      	movs	r3, #2
  }
}
 8009708:	4618      	mov	r0, r3
 800970a:	3710      	adds	r7, #16
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}

08009710 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b084      	sub	sp, #16
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800971e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009726:	2b00      	cmp	r3, #0
 8009728:	d015      	beq.n	8009756 <USBD_CDC_EP0_RxReady+0x46>
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009730:	2bff      	cmp	r3, #255	; 0xff
 8009732:	d010      	beq.n	8009756 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800973a:	689b      	ldr	r3, [r3, #8]
 800973c:	68fa      	ldr	r2, [r7, #12]
 800973e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009742:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009744:	68fa      	ldr	r2, [r7, #12]
 8009746:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800974a:	b292      	uxth	r2, r2
 800974c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	22ff      	movs	r2, #255	; 0xff
 8009752:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8009756:	2300      	movs	r3, #0
}
 8009758:	4618      	mov	r0, r3
 800975a:	3710      	adds	r7, #16
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}

08009760 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009760:	b480      	push	{r7}
 8009762:	b083      	sub	sp, #12
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2243      	movs	r2, #67	; 0x43
 800976c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800976e:	4b03      	ldr	r3, [pc, #12]	; (800977c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009770:	4618      	mov	r0, r3
 8009772:	370c      	adds	r7, #12
 8009774:	46bd      	mov	sp, r7
 8009776:	bc80      	pop	{r7}
 8009778:	4770      	bx	lr
 800977a:	bf00      	nop
 800977c:	20000094 	.word	0x20000094

08009780 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009780:	b480      	push	{r7}
 8009782:	b083      	sub	sp, #12
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2243      	movs	r2, #67	; 0x43
 800978c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800978e:	4b03      	ldr	r3, [pc, #12]	; (800979c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009790:	4618      	mov	r0, r3
 8009792:	370c      	adds	r7, #12
 8009794:	46bd      	mov	sp, r7
 8009796:	bc80      	pop	{r7}
 8009798:	4770      	bx	lr
 800979a:	bf00      	nop
 800979c:	20000050 	.word	0x20000050

080097a0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80097a0:	b480      	push	{r7}
 80097a2:	b083      	sub	sp, #12
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2243      	movs	r2, #67	; 0x43
 80097ac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80097ae:	4b03      	ldr	r3, [pc, #12]	; (80097bc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	370c      	adds	r7, #12
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bc80      	pop	{r7}
 80097b8:	4770      	bx	lr
 80097ba:	bf00      	nop
 80097bc:	200000d8 	.word	0x200000d8

080097c0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b083      	sub	sp, #12
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	220a      	movs	r2, #10
 80097cc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80097ce:	4b03      	ldr	r3, [pc, #12]	; (80097dc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	370c      	adds	r7, #12
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bc80      	pop	{r7}
 80097d8:	4770      	bx	lr
 80097da:	bf00      	nop
 80097dc:	2000000c 	.word	0x2000000c

080097e0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b085      	sub	sp, #20
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80097ea:	2302      	movs	r3, #2
 80097ec:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d005      	beq.n	8009800 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	683a      	ldr	r2, [r7, #0]
 80097f8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80097fc:	2300      	movs	r3, #0
 80097fe:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009800:	7bfb      	ldrb	r3, [r7, #15]
}
 8009802:	4618      	mov	r0, r3
 8009804:	3714      	adds	r7, #20
 8009806:	46bd      	mov	sp, r7
 8009808:	bc80      	pop	{r7}
 800980a:	4770      	bx	lr

0800980c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800980c:	b480      	push	{r7}
 800980e:	b087      	sub	sp, #28
 8009810:	af00      	add	r7, sp, #0
 8009812:	60f8      	str	r0, [r7, #12]
 8009814:	60b9      	str	r1, [r7, #8]
 8009816:	4613      	mov	r3, r2
 8009818:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009820:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	68ba      	ldr	r2, [r7, #8]
 8009826:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800982a:	88fa      	ldrh	r2, [r7, #6]
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8009832:	2300      	movs	r3, #0
}
 8009834:	4618      	mov	r0, r3
 8009836:	371c      	adds	r7, #28
 8009838:	46bd      	mov	sp, r7
 800983a:	bc80      	pop	{r7}
 800983c:	4770      	bx	lr

0800983e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800983e:	b480      	push	{r7}
 8009840:	b085      	sub	sp, #20
 8009842:	af00      	add	r7, sp, #0
 8009844:	6078      	str	r0, [r7, #4]
 8009846:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800984e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	683a      	ldr	r2, [r7, #0]
 8009854:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8009858:	2300      	movs	r3, #0
}
 800985a:	4618      	mov	r0, r3
 800985c:	3714      	adds	r7, #20
 800985e:	46bd      	mov	sp, r7
 8009860:	bc80      	pop	{r7}
 8009862:	4770      	bx	lr

08009864 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b084      	sub	sp, #16
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009872:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800987a:	2b00      	cmp	r3, #0
 800987c:	d01c      	beq.n	80098b8 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009884:	2b00      	cmp	r3, #0
 8009886:	d115      	bne.n	80098b4 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	2201      	movs	r2, #1
 800988c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	2181      	movs	r1, #129	; 0x81
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f001 fcb2 	bl	800b214 <USBD_LL_Transmit>

      return USBD_OK;
 80098b0:	2300      	movs	r3, #0
 80098b2:	e002      	b.n	80098ba <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80098b4:	2301      	movs	r3, #1
 80098b6:	e000      	b.n	80098ba <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80098b8:	2302      	movs	r3, #2
  }
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	3710      	adds	r7, #16
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}

080098c2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80098c2:	b580      	push	{r7, lr}
 80098c4:	b084      	sub	sp, #16
 80098c6:	af00      	add	r7, sp, #0
 80098c8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098d0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d017      	beq.n	800990c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	7c1b      	ldrb	r3, [r3, #16]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d109      	bne.n	80098f8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80098ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80098ee:	2101      	movs	r1, #1
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f001 fcb2 	bl	800b25a <USBD_LL_PrepareReceive>
 80098f6:	e007      	b.n	8009908 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80098fe:	2340      	movs	r3, #64	; 0x40
 8009900:	2101      	movs	r1, #1
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f001 fca9 	bl	800b25a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009908:	2300      	movs	r3, #0
 800990a:	e000      	b.n	800990e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800990c:	2302      	movs	r3, #2
  }
}
 800990e:	4618      	mov	r0, r3
 8009910:	3710      	adds	r7, #16
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}

08009916 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009916:	b580      	push	{r7, lr}
 8009918:	b084      	sub	sp, #16
 800991a:	af00      	add	r7, sp, #0
 800991c:	60f8      	str	r0, [r7, #12]
 800991e:	60b9      	str	r1, [r7, #8]
 8009920:	4613      	mov	r3, r2
 8009922:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d101      	bne.n	800992e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800992a:	2302      	movs	r3, #2
 800992c:	e01a      	b.n	8009964 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009934:	2b00      	cmp	r3, #0
 8009936:	d003      	beq.n	8009940 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	2200      	movs	r2, #0
 800993c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d003      	beq.n	800994e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	68ba      	ldr	r2, [r7, #8]
 800994a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2201      	movs	r2, #1
 8009952:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	79fa      	ldrb	r2, [r7, #7]
 800995a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800995c:	68f8      	ldr	r0, [r7, #12]
 800995e:	f001 fb1d 	bl	800af9c <USBD_LL_Init>

  return USBD_OK;
 8009962:	2300      	movs	r3, #0
}
 8009964:	4618      	mov	r0, r3
 8009966:	3710      	adds	r7, #16
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}

0800996c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800996c:	b480      	push	{r7}
 800996e:	b085      	sub	sp, #20
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009976:	2300      	movs	r3, #0
 8009978:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d006      	beq.n	800998e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	683a      	ldr	r2, [r7, #0]
 8009984:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8009988:	2300      	movs	r3, #0
 800998a:	73fb      	strb	r3, [r7, #15]
 800998c:	e001      	b.n	8009992 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800998e:	2302      	movs	r3, #2
 8009990:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009992:	7bfb      	ldrb	r3, [r7, #15]
}
 8009994:	4618      	mov	r0, r3
 8009996:	3714      	adds	r7, #20
 8009998:	46bd      	mov	sp, r7
 800999a:	bc80      	pop	{r7}
 800999c:	4770      	bx	lr

0800999e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800999e:	b580      	push	{r7, lr}
 80099a0:	b082      	sub	sp, #8
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f001 fb52 	bl	800b050 <USBD_LL_Start>

  return USBD_OK;
 80099ac:	2300      	movs	r3, #0
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3708      	adds	r7, #8
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}

080099b6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80099b6:	b480      	push	{r7}
 80099b8:	b083      	sub	sp, #12
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80099be:	2300      	movs	r3, #0
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	370c      	adds	r7, #12
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bc80      	pop	{r7}
 80099c8:	4770      	bx	lr

080099ca <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80099ca:	b580      	push	{r7, lr}
 80099cc:	b084      	sub	sp, #16
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	6078      	str	r0, [r7, #4]
 80099d2:	460b      	mov	r3, r1
 80099d4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80099d6:	2302      	movs	r3, #2
 80099d8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d00c      	beq.n	80099fe <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	78fa      	ldrb	r2, [r7, #3]
 80099ee:	4611      	mov	r1, r2
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	4798      	blx	r3
 80099f4:	4603      	mov	r3, r0
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d101      	bne.n	80099fe <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80099fa:	2300      	movs	r3, #0
 80099fc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80099fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3710      	adds	r7, #16
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b082      	sub	sp, #8
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	460b      	mov	r3, r1
 8009a12:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	78fa      	ldrb	r2, [r7, #3]
 8009a1e:	4611      	mov	r1, r2
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	4798      	blx	r3

  return USBD_OK;
 8009a24:	2300      	movs	r3, #0
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3708      	adds	r7, #8
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}

08009a2e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009a2e:	b580      	push	{r7, lr}
 8009a30:	b082      	sub	sp, #8
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	6078      	str	r0, [r7, #4]
 8009a36:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009a3e:	6839      	ldr	r1, [r7, #0]
 8009a40:	4618      	mov	r0, r3
 8009a42:	f000 fecb 	bl	800a7dc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2201      	movs	r2, #1
 8009a4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009a54:	461a      	mov	r2, r3
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009a62:	f003 031f 	and.w	r3, r3, #31
 8009a66:	2b01      	cmp	r3, #1
 8009a68:	d00c      	beq.n	8009a84 <USBD_LL_SetupStage+0x56>
 8009a6a:	2b01      	cmp	r3, #1
 8009a6c:	d302      	bcc.n	8009a74 <USBD_LL_SetupStage+0x46>
 8009a6e:	2b02      	cmp	r3, #2
 8009a70:	d010      	beq.n	8009a94 <USBD_LL_SetupStage+0x66>
 8009a72:	e017      	b.n	8009aa4 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009a7a:	4619      	mov	r1, r3
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f000 f9cb 	bl	8009e18 <USBD_StdDevReq>
      break;
 8009a82:	e01a      	b.n	8009aba <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009a8a:	4619      	mov	r1, r3
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f000 fa2d 	bl	8009eec <USBD_StdItfReq>
      break;
 8009a92:	e012      	b.n	8009aba <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009a9a:	4619      	mov	r1, r3
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f000 fa6b 	bl	8009f78 <USBD_StdEPReq>
      break;
 8009aa2:	e00a      	b.n	8009aba <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009aaa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009aae:	b2db      	uxtb	r3, r3
 8009ab0:	4619      	mov	r1, r3
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f001 fb2c 	bl	800b110 <USBD_LL_StallEP>
      break;
 8009ab8:	bf00      	nop
  }

  return USBD_OK;
 8009aba:	2300      	movs	r3, #0
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3708      	adds	r7, #8
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}

08009ac4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b086      	sub	sp, #24
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	60f8      	str	r0, [r7, #12]
 8009acc:	460b      	mov	r3, r1
 8009ace:	607a      	str	r2, [r7, #4]
 8009ad0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009ad2:	7afb      	ldrb	r3, [r7, #11]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d14b      	bne.n	8009b70 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009ade:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009ae6:	2b03      	cmp	r3, #3
 8009ae8:	d134      	bne.n	8009b54 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	68da      	ldr	r2, [r3, #12]
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	691b      	ldr	r3, [r3, #16]
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d919      	bls.n	8009b2a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	68da      	ldr	r2, [r3, #12]
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	691b      	ldr	r3, [r3, #16]
 8009afe:	1ad2      	subs	r2, r2, r3
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	68da      	ldr	r2, [r3, #12]
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	d203      	bcs.n	8009b18 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009b14:	b29b      	uxth	r3, r3
 8009b16:	e002      	b.n	8009b1e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009b1c:	b29b      	uxth	r3, r3
 8009b1e:	461a      	mov	r2, r3
 8009b20:	6879      	ldr	r1, [r7, #4]
 8009b22:	68f8      	ldr	r0, [r7, #12]
 8009b24:	f000 ff4c 	bl	800a9c0 <USBD_CtlContinueRx>
 8009b28:	e038      	b.n	8009b9c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b30:	691b      	ldr	r3, [r3, #16]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d00a      	beq.n	8009b4c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009b3c:	2b03      	cmp	r3, #3
 8009b3e:	d105      	bne.n	8009b4c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b46:	691b      	ldr	r3, [r3, #16]
 8009b48:	68f8      	ldr	r0, [r7, #12]
 8009b4a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009b4c:	68f8      	ldr	r0, [r7, #12]
 8009b4e:	f000 ff49 	bl	800a9e4 <USBD_CtlSendStatus>
 8009b52:	e023      	b.n	8009b9c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009b5a:	2b05      	cmp	r3, #5
 8009b5c:	d11e      	bne.n	8009b9c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	2200      	movs	r2, #0
 8009b62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009b66:	2100      	movs	r1, #0
 8009b68:	68f8      	ldr	r0, [r7, #12]
 8009b6a:	f001 fad1 	bl	800b110 <USBD_LL_StallEP>
 8009b6e:	e015      	b.n	8009b9c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b76:	699b      	ldr	r3, [r3, #24]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d00d      	beq.n	8009b98 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009b82:	2b03      	cmp	r3, #3
 8009b84:	d108      	bne.n	8009b98 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b8c:	699b      	ldr	r3, [r3, #24]
 8009b8e:	7afa      	ldrb	r2, [r7, #11]
 8009b90:	4611      	mov	r1, r2
 8009b92:	68f8      	ldr	r0, [r7, #12]
 8009b94:	4798      	blx	r3
 8009b96:	e001      	b.n	8009b9c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009b98:	2302      	movs	r3, #2
 8009b9a:	e000      	b.n	8009b9e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009b9c:	2300      	movs	r3, #0
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3718      	adds	r7, #24
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}

08009ba6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009ba6:	b580      	push	{r7, lr}
 8009ba8:	b086      	sub	sp, #24
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	60f8      	str	r0, [r7, #12]
 8009bae:	460b      	mov	r3, r1
 8009bb0:	607a      	str	r2, [r7, #4]
 8009bb2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009bb4:	7afb      	ldrb	r3, [r7, #11]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d17f      	bne.n	8009cba <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	3314      	adds	r3, #20
 8009bbe:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009bc6:	2b02      	cmp	r3, #2
 8009bc8:	d15c      	bne.n	8009c84 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	68da      	ldr	r2, [r3, #12]
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	691b      	ldr	r3, [r3, #16]
 8009bd2:	429a      	cmp	r2, r3
 8009bd4:	d915      	bls.n	8009c02 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009bd6:	697b      	ldr	r3, [r7, #20]
 8009bd8:	68da      	ldr	r2, [r3, #12]
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	691b      	ldr	r3, [r3, #16]
 8009bde:	1ad2      	subs	r2, r2, r3
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	68db      	ldr	r3, [r3, #12]
 8009be8:	b29b      	uxth	r3, r3
 8009bea:	461a      	mov	r2, r3
 8009bec:	6879      	ldr	r1, [r7, #4]
 8009bee:	68f8      	ldr	r0, [r7, #12]
 8009bf0:	f000 feb6 	bl	800a960 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	2100      	movs	r1, #0
 8009bfa:	68f8      	ldr	r0, [r7, #12]
 8009bfc:	f001 fb2d 	bl	800b25a <USBD_LL_PrepareReceive>
 8009c00:	e04e      	b.n	8009ca0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	689b      	ldr	r3, [r3, #8]
 8009c06:	697a      	ldr	r2, [r7, #20]
 8009c08:	6912      	ldr	r2, [r2, #16]
 8009c0a:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c0e:	fb02 f201 	mul.w	r2, r2, r1
 8009c12:	1a9b      	subs	r3, r3, r2
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d11c      	bne.n	8009c52 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	689a      	ldr	r2, [r3, #8]
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009c20:	429a      	cmp	r2, r3
 8009c22:	d316      	bcc.n	8009c52 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	689a      	ldr	r2, [r3, #8]
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	d20f      	bcs.n	8009c52 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009c32:	2200      	movs	r2, #0
 8009c34:	2100      	movs	r1, #0
 8009c36:	68f8      	ldr	r0, [r7, #12]
 8009c38:	f000 fe92 	bl	800a960 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009c44:	2300      	movs	r3, #0
 8009c46:	2200      	movs	r2, #0
 8009c48:	2100      	movs	r1, #0
 8009c4a:	68f8      	ldr	r0, [r7, #12]
 8009c4c:	f001 fb05 	bl	800b25a <USBD_LL_PrepareReceive>
 8009c50:	e026      	b.n	8009ca0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c58:	68db      	ldr	r3, [r3, #12]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d00a      	beq.n	8009c74 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009c64:	2b03      	cmp	r3, #3
 8009c66:	d105      	bne.n	8009c74 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c6e:	68db      	ldr	r3, [r3, #12]
 8009c70:	68f8      	ldr	r0, [r7, #12]
 8009c72:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009c74:	2180      	movs	r1, #128	; 0x80
 8009c76:	68f8      	ldr	r0, [r7, #12]
 8009c78:	f001 fa4a 	bl	800b110 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009c7c:	68f8      	ldr	r0, [r7, #12]
 8009c7e:	f000 fec4 	bl	800aa0a <USBD_CtlReceiveStatus>
 8009c82:	e00d      	b.n	8009ca0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009c8a:	2b04      	cmp	r3, #4
 8009c8c:	d004      	beq.n	8009c98 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d103      	bne.n	8009ca0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009c98:	2180      	movs	r1, #128	; 0x80
 8009c9a:	68f8      	ldr	r0, [r7, #12]
 8009c9c:	f001 fa38 	bl	800b110 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009ca6:	2b01      	cmp	r3, #1
 8009ca8:	d11d      	bne.n	8009ce6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009caa:	68f8      	ldr	r0, [r7, #12]
 8009cac:	f7ff fe83 	bl	80099b6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009cb8:	e015      	b.n	8009ce6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cc0:	695b      	ldr	r3, [r3, #20]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d00d      	beq.n	8009ce2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009ccc:	2b03      	cmp	r3, #3
 8009cce:	d108      	bne.n	8009ce2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cd6:	695b      	ldr	r3, [r3, #20]
 8009cd8:	7afa      	ldrb	r2, [r7, #11]
 8009cda:	4611      	mov	r1, r2
 8009cdc:	68f8      	ldr	r0, [r7, #12]
 8009cde:	4798      	blx	r3
 8009ce0:	e001      	b.n	8009ce6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009ce2:	2302      	movs	r3, #2
 8009ce4:	e000      	b.n	8009ce8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009ce6:	2300      	movs	r3, #0
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3718      	adds	r7, #24
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}

08009cf0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b082      	sub	sp, #8
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009cf8:	2340      	movs	r3, #64	; 0x40
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	2100      	movs	r1, #0
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f001 f9c1 	bl	800b086 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2201      	movs	r2, #1
 8009d08:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2240      	movs	r2, #64	; 0x40
 8009d10:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009d14:	2340      	movs	r3, #64	; 0x40
 8009d16:	2200      	movs	r2, #0
 8009d18:	2180      	movs	r1, #128	; 0x80
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f001 f9b3 	bl	800b086 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2201      	movs	r2, #1
 8009d24:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2240      	movs	r2, #64	; 0x40
 8009d2a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2201      	movs	r2, #1
 8009d30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2200      	movs	r2, #0
 8009d38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2200      	movs	r2, #0
 8009d46:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d009      	beq.n	8009d68 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	687a      	ldr	r2, [r7, #4]
 8009d5e:	6852      	ldr	r2, [r2, #4]
 8009d60:	b2d2      	uxtb	r2, r2
 8009d62:	4611      	mov	r1, r2
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	4798      	blx	r3
  }

  return USBD_OK;
 8009d68:	2300      	movs	r3, #0
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3708      	adds	r7, #8
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}

08009d72 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009d72:	b480      	push	{r7}
 8009d74:	b083      	sub	sp, #12
 8009d76:	af00      	add	r7, sp, #0
 8009d78:	6078      	str	r0, [r7, #4]
 8009d7a:	460b      	mov	r3, r1
 8009d7c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	78fa      	ldrb	r2, [r7, #3]
 8009d82:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009d84:	2300      	movs	r3, #0
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	370c      	adds	r7, #12
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bc80      	pop	{r7}
 8009d8e:	4770      	bx	lr

08009d90 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b083      	sub	sp, #12
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2204      	movs	r2, #4
 8009da8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009dac:	2300      	movs	r3, #0
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	370c      	adds	r7, #12
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bc80      	pop	{r7}
 8009db6:	4770      	bx	lr

08009db8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b083      	sub	sp, #12
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dc6:	2b04      	cmp	r3, #4
 8009dc8:	d105      	bne.n	8009dd6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009dd6:	2300      	movs	r3, #0
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	370c      	adds	r7, #12
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bc80      	pop	{r7}
 8009de0:	4770      	bx	lr

08009de2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009de2:	b580      	push	{r7, lr}
 8009de4:	b082      	sub	sp, #8
 8009de6:	af00      	add	r7, sp, #0
 8009de8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009df0:	2b03      	cmp	r3, #3
 8009df2:	d10b      	bne.n	8009e0c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dfa:	69db      	ldr	r3, [r3, #28]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d005      	beq.n	8009e0c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e06:	69db      	ldr	r3, [r3, #28]
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009e0c:	2300      	movs	r3, #0
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3708      	adds	r7, #8
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}
	...

08009e18 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b084      	sub	sp, #16
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
 8009e20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e22:	2300      	movs	r3, #0
 8009e24:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	781b      	ldrb	r3, [r3, #0]
 8009e2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009e2e:	2b20      	cmp	r3, #32
 8009e30:	d004      	beq.n	8009e3c <USBD_StdDevReq+0x24>
 8009e32:	2b40      	cmp	r3, #64	; 0x40
 8009e34:	d002      	beq.n	8009e3c <USBD_StdDevReq+0x24>
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d008      	beq.n	8009e4c <USBD_StdDevReq+0x34>
 8009e3a:	e04c      	b.n	8009ed6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e42:	689b      	ldr	r3, [r3, #8]
 8009e44:	6839      	ldr	r1, [r7, #0]
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	4798      	blx	r3
      break;
 8009e4a:	e049      	b.n	8009ee0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	785b      	ldrb	r3, [r3, #1]
 8009e50:	2b09      	cmp	r3, #9
 8009e52:	d83a      	bhi.n	8009eca <USBD_StdDevReq+0xb2>
 8009e54:	a201      	add	r2, pc, #4	; (adr r2, 8009e5c <USBD_StdDevReq+0x44>)
 8009e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e5a:	bf00      	nop
 8009e5c:	08009ead 	.word	0x08009ead
 8009e60:	08009ec1 	.word	0x08009ec1
 8009e64:	08009ecb 	.word	0x08009ecb
 8009e68:	08009eb7 	.word	0x08009eb7
 8009e6c:	08009ecb 	.word	0x08009ecb
 8009e70:	08009e8f 	.word	0x08009e8f
 8009e74:	08009e85 	.word	0x08009e85
 8009e78:	08009ecb 	.word	0x08009ecb
 8009e7c:	08009ea3 	.word	0x08009ea3
 8009e80:	08009e99 	.word	0x08009e99
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009e84:	6839      	ldr	r1, [r7, #0]
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 f9d4 	bl	800a234 <USBD_GetDescriptor>
          break;
 8009e8c:	e022      	b.n	8009ed4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009e8e:	6839      	ldr	r1, [r7, #0]
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f000 fb37 	bl	800a504 <USBD_SetAddress>
          break;
 8009e96:	e01d      	b.n	8009ed4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009e98:	6839      	ldr	r1, [r7, #0]
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f000 fb74 	bl	800a588 <USBD_SetConfig>
          break;
 8009ea0:	e018      	b.n	8009ed4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009ea2:	6839      	ldr	r1, [r7, #0]
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f000 fbfd 	bl	800a6a4 <USBD_GetConfig>
          break;
 8009eaa:	e013      	b.n	8009ed4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009eac:	6839      	ldr	r1, [r7, #0]
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f000 fc2c 	bl	800a70c <USBD_GetStatus>
          break;
 8009eb4:	e00e      	b.n	8009ed4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009eb6:	6839      	ldr	r1, [r7, #0]
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f000 fc5a 	bl	800a772 <USBD_SetFeature>
          break;
 8009ebe:	e009      	b.n	8009ed4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009ec0:	6839      	ldr	r1, [r7, #0]
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f000 fc69 	bl	800a79a <USBD_ClrFeature>
          break;
 8009ec8:	e004      	b.n	8009ed4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009eca:	6839      	ldr	r1, [r7, #0]
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f000 fcc1 	bl	800a854 <USBD_CtlError>
          break;
 8009ed2:	bf00      	nop
      }
      break;
 8009ed4:	e004      	b.n	8009ee0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009ed6:	6839      	ldr	r1, [r7, #0]
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f000 fcbb 	bl	800a854 <USBD_CtlError>
      break;
 8009ede:	bf00      	nop
  }

  return ret;
 8009ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3710      	adds	r7, #16
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}
 8009eea:	bf00      	nop

08009eec <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009f02:	2b20      	cmp	r3, #32
 8009f04:	d003      	beq.n	8009f0e <USBD_StdItfReq+0x22>
 8009f06:	2b40      	cmp	r3, #64	; 0x40
 8009f08:	d001      	beq.n	8009f0e <USBD_StdItfReq+0x22>
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d12a      	bne.n	8009f64 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f14:	3b01      	subs	r3, #1
 8009f16:	2b02      	cmp	r3, #2
 8009f18:	d81d      	bhi.n	8009f56 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	889b      	ldrh	r3, [r3, #4]
 8009f1e:	b2db      	uxtb	r3, r3
 8009f20:	2b01      	cmp	r3, #1
 8009f22:	d813      	bhi.n	8009f4c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f2a:	689b      	ldr	r3, [r3, #8]
 8009f2c:	6839      	ldr	r1, [r7, #0]
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	4798      	blx	r3
 8009f32:	4603      	mov	r3, r0
 8009f34:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	88db      	ldrh	r3, [r3, #6]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d110      	bne.n	8009f60 <USBD_StdItfReq+0x74>
 8009f3e:	7bfb      	ldrb	r3, [r7, #15]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d10d      	bne.n	8009f60 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f000 fd4d 	bl	800a9e4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009f4a:	e009      	b.n	8009f60 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8009f4c:	6839      	ldr	r1, [r7, #0]
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f000 fc80 	bl	800a854 <USBD_CtlError>
          break;
 8009f54:	e004      	b.n	8009f60 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8009f56:	6839      	ldr	r1, [r7, #0]
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f000 fc7b 	bl	800a854 <USBD_CtlError>
          break;
 8009f5e:	e000      	b.n	8009f62 <USBD_StdItfReq+0x76>
          break;
 8009f60:	bf00      	nop
      }
      break;
 8009f62:	e004      	b.n	8009f6e <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8009f64:	6839      	ldr	r1, [r7, #0]
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f000 fc74 	bl	800a854 <USBD_CtlError>
      break;
 8009f6c:	bf00      	nop
  }

  return USBD_OK;
 8009f6e:	2300      	movs	r3, #0
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3710      	adds	r7, #16
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}

08009f78 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b084      	sub	sp, #16
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
 8009f80:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009f82:	2300      	movs	r3, #0
 8009f84:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	889b      	ldrh	r3, [r3, #4]
 8009f8a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	781b      	ldrb	r3, [r3, #0]
 8009f90:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009f94:	2b20      	cmp	r3, #32
 8009f96:	d004      	beq.n	8009fa2 <USBD_StdEPReq+0x2a>
 8009f98:	2b40      	cmp	r3, #64	; 0x40
 8009f9a:	d002      	beq.n	8009fa2 <USBD_StdEPReq+0x2a>
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d008      	beq.n	8009fb2 <USBD_StdEPReq+0x3a>
 8009fa0:	e13d      	b.n	800a21e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fa8:	689b      	ldr	r3, [r3, #8]
 8009faa:	6839      	ldr	r1, [r7, #0]
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	4798      	blx	r3
      break;
 8009fb0:	e13a      	b.n	800a228 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	781b      	ldrb	r3, [r3, #0]
 8009fb6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009fba:	2b20      	cmp	r3, #32
 8009fbc:	d10a      	bne.n	8009fd4 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fc4:	689b      	ldr	r3, [r3, #8]
 8009fc6:	6839      	ldr	r1, [r7, #0]
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	4798      	blx	r3
 8009fcc:	4603      	mov	r3, r0
 8009fce:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009fd0:	7bfb      	ldrb	r3, [r7, #15]
 8009fd2:	e12a      	b.n	800a22a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	785b      	ldrb	r3, [r3, #1]
 8009fd8:	2b01      	cmp	r3, #1
 8009fda:	d03e      	beq.n	800a05a <USBD_StdEPReq+0xe2>
 8009fdc:	2b03      	cmp	r3, #3
 8009fde:	d002      	beq.n	8009fe6 <USBD_StdEPReq+0x6e>
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d070      	beq.n	800a0c6 <USBD_StdEPReq+0x14e>
 8009fe4:	e115      	b.n	800a212 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fec:	2b02      	cmp	r3, #2
 8009fee:	d002      	beq.n	8009ff6 <USBD_StdEPReq+0x7e>
 8009ff0:	2b03      	cmp	r3, #3
 8009ff2:	d015      	beq.n	800a020 <USBD_StdEPReq+0xa8>
 8009ff4:	e02b      	b.n	800a04e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ff6:	7bbb      	ldrb	r3, [r7, #14]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d00c      	beq.n	800a016 <USBD_StdEPReq+0x9e>
 8009ffc:	7bbb      	ldrb	r3, [r7, #14]
 8009ffe:	2b80      	cmp	r3, #128	; 0x80
 800a000:	d009      	beq.n	800a016 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a002:	7bbb      	ldrb	r3, [r7, #14]
 800a004:	4619      	mov	r1, r3
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f001 f882 	bl	800b110 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a00c:	2180      	movs	r1, #128	; 0x80
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f001 f87e 	bl	800b110 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a014:	e020      	b.n	800a058 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800a016:	6839      	ldr	r1, [r7, #0]
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f000 fc1b 	bl	800a854 <USBD_CtlError>
              break;
 800a01e:	e01b      	b.n	800a058 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	885b      	ldrh	r3, [r3, #2]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d10e      	bne.n	800a046 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 800a028:	7bbb      	ldrb	r3, [r7, #14]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d00b      	beq.n	800a046 <USBD_StdEPReq+0xce>
 800a02e:	7bbb      	ldrb	r3, [r7, #14]
 800a030:	2b80      	cmp	r3, #128	; 0x80
 800a032:	d008      	beq.n	800a046 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	88db      	ldrh	r3, [r3, #6]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d104      	bne.n	800a046 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a03c:	7bbb      	ldrb	r3, [r7, #14]
 800a03e:	4619      	mov	r1, r3
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f001 f865 	bl	800b110 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f000 fccc 	bl	800a9e4 <USBD_CtlSendStatus>

              break;
 800a04c:	e004      	b.n	800a058 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800a04e:	6839      	ldr	r1, [r7, #0]
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f000 fbff 	bl	800a854 <USBD_CtlError>
              break;
 800a056:	bf00      	nop
          }
          break;
 800a058:	e0e0      	b.n	800a21c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a060:	2b02      	cmp	r3, #2
 800a062:	d002      	beq.n	800a06a <USBD_StdEPReq+0xf2>
 800a064:	2b03      	cmp	r3, #3
 800a066:	d015      	beq.n	800a094 <USBD_StdEPReq+0x11c>
 800a068:	e026      	b.n	800a0b8 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a06a:	7bbb      	ldrb	r3, [r7, #14]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d00c      	beq.n	800a08a <USBD_StdEPReq+0x112>
 800a070:	7bbb      	ldrb	r3, [r7, #14]
 800a072:	2b80      	cmp	r3, #128	; 0x80
 800a074:	d009      	beq.n	800a08a <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a076:	7bbb      	ldrb	r3, [r7, #14]
 800a078:	4619      	mov	r1, r3
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f001 f848 	bl	800b110 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a080:	2180      	movs	r1, #128	; 0x80
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f001 f844 	bl	800b110 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a088:	e01c      	b.n	800a0c4 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800a08a:	6839      	ldr	r1, [r7, #0]
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f000 fbe1 	bl	800a854 <USBD_CtlError>
              break;
 800a092:	e017      	b.n	800a0c4 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	885b      	ldrh	r3, [r3, #2]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d112      	bne.n	800a0c2 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a09c:	7bbb      	ldrb	r3, [r7, #14]
 800a09e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d004      	beq.n	800a0b0 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a0a6:	7bbb      	ldrb	r3, [r7, #14]
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f001 f84f 	bl	800b14e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f000 fc97 	bl	800a9e4 <USBD_CtlSendStatus>
              }
              break;
 800a0b6:	e004      	b.n	800a0c2 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 800a0b8:	6839      	ldr	r1, [r7, #0]
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f000 fbca 	bl	800a854 <USBD_CtlError>
              break;
 800a0c0:	e000      	b.n	800a0c4 <USBD_StdEPReq+0x14c>
              break;
 800a0c2:	bf00      	nop
          }
          break;
 800a0c4:	e0aa      	b.n	800a21c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0cc:	2b02      	cmp	r3, #2
 800a0ce:	d002      	beq.n	800a0d6 <USBD_StdEPReq+0x15e>
 800a0d0:	2b03      	cmp	r3, #3
 800a0d2:	d032      	beq.n	800a13a <USBD_StdEPReq+0x1c2>
 800a0d4:	e097      	b.n	800a206 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a0d6:	7bbb      	ldrb	r3, [r7, #14]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d007      	beq.n	800a0ec <USBD_StdEPReq+0x174>
 800a0dc:	7bbb      	ldrb	r3, [r7, #14]
 800a0de:	2b80      	cmp	r3, #128	; 0x80
 800a0e0:	d004      	beq.n	800a0ec <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800a0e2:	6839      	ldr	r1, [r7, #0]
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	f000 fbb5 	bl	800a854 <USBD_CtlError>
                break;
 800a0ea:	e091      	b.n	800a210 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a0ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	da0b      	bge.n	800a10c <USBD_StdEPReq+0x194>
 800a0f4:	7bbb      	ldrb	r3, [r7, #14]
 800a0f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a0fa:	4613      	mov	r3, r2
 800a0fc:	009b      	lsls	r3, r3, #2
 800a0fe:	4413      	add	r3, r2
 800a100:	009b      	lsls	r3, r3, #2
 800a102:	3310      	adds	r3, #16
 800a104:	687a      	ldr	r2, [r7, #4]
 800a106:	4413      	add	r3, r2
 800a108:	3304      	adds	r3, #4
 800a10a:	e00b      	b.n	800a124 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a10c:	7bbb      	ldrb	r3, [r7, #14]
 800a10e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a112:	4613      	mov	r3, r2
 800a114:	009b      	lsls	r3, r3, #2
 800a116:	4413      	add	r3, r2
 800a118:	009b      	lsls	r3, r3, #2
 800a11a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a11e:	687a      	ldr	r2, [r7, #4]
 800a120:	4413      	add	r3, r2
 800a122:	3304      	adds	r3, #4
 800a124:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	2200      	movs	r2, #0
 800a12a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	2202      	movs	r2, #2
 800a130:	4619      	mov	r1, r3
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f000 fbf8 	bl	800a928 <USBD_CtlSendData>
              break;
 800a138:	e06a      	b.n	800a210 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a13a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	da11      	bge.n	800a166 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a142:	7bbb      	ldrb	r3, [r7, #14]
 800a144:	f003 020f 	and.w	r2, r3, #15
 800a148:	6879      	ldr	r1, [r7, #4]
 800a14a:	4613      	mov	r3, r2
 800a14c:	009b      	lsls	r3, r3, #2
 800a14e:	4413      	add	r3, r2
 800a150:	009b      	lsls	r3, r3, #2
 800a152:	440b      	add	r3, r1
 800a154:	3318      	adds	r3, #24
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d117      	bne.n	800a18c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800a15c:	6839      	ldr	r1, [r7, #0]
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f000 fb78 	bl	800a854 <USBD_CtlError>
                  break;
 800a164:	e054      	b.n	800a210 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a166:	7bbb      	ldrb	r3, [r7, #14]
 800a168:	f003 020f 	and.w	r2, r3, #15
 800a16c:	6879      	ldr	r1, [r7, #4]
 800a16e:	4613      	mov	r3, r2
 800a170:	009b      	lsls	r3, r3, #2
 800a172:	4413      	add	r3, r2
 800a174:	009b      	lsls	r3, r3, #2
 800a176:	440b      	add	r3, r1
 800a178:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d104      	bne.n	800a18c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800a182:	6839      	ldr	r1, [r7, #0]
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f000 fb65 	bl	800a854 <USBD_CtlError>
                  break;
 800a18a:	e041      	b.n	800a210 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a18c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a190:	2b00      	cmp	r3, #0
 800a192:	da0b      	bge.n	800a1ac <USBD_StdEPReq+0x234>
 800a194:	7bbb      	ldrb	r3, [r7, #14]
 800a196:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a19a:	4613      	mov	r3, r2
 800a19c:	009b      	lsls	r3, r3, #2
 800a19e:	4413      	add	r3, r2
 800a1a0:	009b      	lsls	r3, r3, #2
 800a1a2:	3310      	adds	r3, #16
 800a1a4:	687a      	ldr	r2, [r7, #4]
 800a1a6:	4413      	add	r3, r2
 800a1a8:	3304      	adds	r3, #4
 800a1aa:	e00b      	b.n	800a1c4 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a1ac:	7bbb      	ldrb	r3, [r7, #14]
 800a1ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a1b2:	4613      	mov	r3, r2
 800a1b4:	009b      	lsls	r3, r3, #2
 800a1b6:	4413      	add	r3, r2
 800a1b8:	009b      	lsls	r3, r3, #2
 800a1ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a1be:	687a      	ldr	r2, [r7, #4]
 800a1c0:	4413      	add	r3, r2
 800a1c2:	3304      	adds	r3, #4
 800a1c4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a1c6:	7bbb      	ldrb	r3, [r7, #14]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d002      	beq.n	800a1d2 <USBD_StdEPReq+0x25a>
 800a1cc:	7bbb      	ldrb	r3, [r7, #14]
 800a1ce:	2b80      	cmp	r3, #128	; 0x80
 800a1d0:	d103      	bne.n	800a1da <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	601a      	str	r2, [r3, #0]
 800a1d8:	e00e      	b.n	800a1f8 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a1da:	7bbb      	ldrb	r3, [r7, #14]
 800a1dc:	4619      	mov	r1, r3
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f000 ffd4 	bl	800b18c <USBD_LL_IsStallEP>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d003      	beq.n	800a1f2 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	2201      	movs	r2, #1
 800a1ee:	601a      	str	r2, [r3, #0]
 800a1f0:	e002      	b.n	800a1f8 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	2202      	movs	r2, #2
 800a1fc:	4619      	mov	r1, r3
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f000 fb92 	bl	800a928 <USBD_CtlSendData>
              break;
 800a204:	e004      	b.n	800a210 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800a206:	6839      	ldr	r1, [r7, #0]
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f000 fb23 	bl	800a854 <USBD_CtlError>
              break;
 800a20e:	bf00      	nop
          }
          break;
 800a210:	e004      	b.n	800a21c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800a212:	6839      	ldr	r1, [r7, #0]
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f000 fb1d 	bl	800a854 <USBD_CtlError>
          break;
 800a21a:	bf00      	nop
      }
      break;
 800a21c:	e004      	b.n	800a228 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800a21e:	6839      	ldr	r1, [r7, #0]
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f000 fb17 	bl	800a854 <USBD_CtlError>
      break;
 800a226:	bf00      	nop
  }

  return ret;
 800a228:	7bfb      	ldrb	r3, [r7, #15]
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3710      	adds	r7, #16
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}
	...

0800a234 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b084      	sub	sp, #16
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
 800a23c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a23e:	2300      	movs	r3, #0
 800a240:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a242:	2300      	movs	r3, #0
 800a244:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a246:	2300      	movs	r3, #0
 800a248:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	885b      	ldrh	r3, [r3, #2]
 800a24e:	0a1b      	lsrs	r3, r3, #8
 800a250:	b29b      	uxth	r3, r3
 800a252:	3b01      	subs	r3, #1
 800a254:	2b06      	cmp	r3, #6
 800a256:	f200 8128 	bhi.w	800a4aa <USBD_GetDescriptor+0x276>
 800a25a:	a201      	add	r2, pc, #4	; (adr r2, 800a260 <USBD_GetDescriptor+0x2c>)
 800a25c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a260:	0800a27d 	.word	0x0800a27d
 800a264:	0800a295 	.word	0x0800a295
 800a268:	0800a2d5 	.word	0x0800a2d5
 800a26c:	0800a4ab 	.word	0x0800a4ab
 800a270:	0800a4ab 	.word	0x0800a4ab
 800a274:	0800a44b 	.word	0x0800a44b
 800a278:	0800a477 	.word	0x0800a477
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	687a      	ldr	r2, [r7, #4]
 800a286:	7c12      	ldrb	r2, [r2, #16]
 800a288:	f107 0108 	add.w	r1, r7, #8
 800a28c:	4610      	mov	r0, r2
 800a28e:	4798      	blx	r3
 800a290:	60f8      	str	r0, [r7, #12]
      break;
 800a292:	e112      	b.n	800a4ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	7c1b      	ldrb	r3, [r3, #16]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d10d      	bne.n	800a2b8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2a4:	f107 0208 	add.w	r2, r7, #8
 800a2a8:	4610      	mov	r0, r2
 800a2aa:	4798      	blx	r3
 800a2ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	3301      	adds	r3, #1
 800a2b2:	2202      	movs	r2, #2
 800a2b4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a2b6:	e100      	b.n	800a4ba <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2c0:	f107 0208 	add.w	r2, r7, #8
 800a2c4:	4610      	mov	r0, r2
 800a2c6:	4798      	blx	r3
 800a2c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	3301      	adds	r3, #1
 800a2ce:	2202      	movs	r2, #2
 800a2d0:	701a      	strb	r2, [r3, #0]
      break;
 800a2d2:	e0f2      	b.n	800a4ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	885b      	ldrh	r3, [r3, #2]
 800a2d8:	b2db      	uxtb	r3, r3
 800a2da:	2b05      	cmp	r3, #5
 800a2dc:	f200 80ac 	bhi.w	800a438 <USBD_GetDescriptor+0x204>
 800a2e0:	a201      	add	r2, pc, #4	; (adr r2, 800a2e8 <USBD_GetDescriptor+0xb4>)
 800a2e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2e6:	bf00      	nop
 800a2e8:	0800a301 	.word	0x0800a301
 800a2ec:	0800a335 	.word	0x0800a335
 800a2f0:	0800a369 	.word	0x0800a369
 800a2f4:	0800a39d 	.word	0x0800a39d
 800a2f8:	0800a3d1 	.word	0x0800a3d1
 800a2fc:	0800a405 	.word	0x0800a405
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a306:	685b      	ldr	r3, [r3, #4]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d00b      	beq.n	800a324 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a312:	685b      	ldr	r3, [r3, #4]
 800a314:	687a      	ldr	r2, [r7, #4]
 800a316:	7c12      	ldrb	r2, [r2, #16]
 800a318:	f107 0108 	add.w	r1, r7, #8
 800a31c:	4610      	mov	r0, r2
 800a31e:	4798      	blx	r3
 800a320:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a322:	e091      	b.n	800a448 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a324:	6839      	ldr	r1, [r7, #0]
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f000 fa94 	bl	800a854 <USBD_CtlError>
            err++;
 800a32c:	7afb      	ldrb	r3, [r7, #11]
 800a32e:	3301      	adds	r3, #1
 800a330:	72fb      	strb	r3, [r7, #11]
          break;
 800a332:	e089      	b.n	800a448 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a33a:	689b      	ldr	r3, [r3, #8]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d00b      	beq.n	800a358 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a346:	689b      	ldr	r3, [r3, #8]
 800a348:	687a      	ldr	r2, [r7, #4]
 800a34a:	7c12      	ldrb	r2, [r2, #16]
 800a34c:	f107 0108 	add.w	r1, r7, #8
 800a350:	4610      	mov	r0, r2
 800a352:	4798      	blx	r3
 800a354:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a356:	e077      	b.n	800a448 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a358:	6839      	ldr	r1, [r7, #0]
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f000 fa7a 	bl	800a854 <USBD_CtlError>
            err++;
 800a360:	7afb      	ldrb	r3, [r7, #11]
 800a362:	3301      	adds	r3, #1
 800a364:	72fb      	strb	r3, [r7, #11]
          break;
 800a366:	e06f      	b.n	800a448 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a36e:	68db      	ldr	r3, [r3, #12]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d00b      	beq.n	800a38c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a37a:	68db      	ldr	r3, [r3, #12]
 800a37c:	687a      	ldr	r2, [r7, #4]
 800a37e:	7c12      	ldrb	r2, [r2, #16]
 800a380:	f107 0108 	add.w	r1, r7, #8
 800a384:	4610      	mov	r0, r2
 800a386:	4798      	blx	r3
 800a388:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a38a:	e05d      	b.n	800a448 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a38c:	6839      	ldr	r1, [r7, #0]
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f000 fa60 	bl	800a854 <USBD_CtlError>
            err++;
 800a394:	7afb      	ldrb	r3, [r7, #11]
 800a396:	3301      	adds	r3, #1
 800a398:	72fb      	strb	r3, [r7, #11]
          break;
 800a39a:	e055      	b.n	800a448 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a3a2:	691b      	ldr	r3, [r3, #16]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d00b      	beq.n	800a3c0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a3ae:	691b      	ldr	r3, [r3, #16]
 800a3b0:	687a      	ldr	r2, [r7, #4]
 800a3b2:	7c12      	ldrb	r2, [r2, #16]
 800a3b4:	f107 0108 	add.w	r1, r7, #8
 800a3b8:	4610      	mov	r0, r2
 800a3ba:	4798      	blx	r3
 800a3bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a3be:	e043      	b.n	800a448 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a3c0:	6839      	ldr	r1, [r7, #0]
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f000 fa46 	bl	800a854 <USBD_CtlError>
            err++;
 800a3c8:	7afb      	ldrb	r3, [r7, #11]
 800a3ca:	3301      	adds	r3, #1
 800a3cc:	72fb      	strb	r3, [r7, #11]
          break;
 800a3ce:	e03b      	b.n	800a448 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a3d6:	695b      	ldr	r3, [r3, #20]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d00b      	beq.n	800a3f4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a3e2:	695b      	ldr	r3, [r3, #20]
 800a3e4:	687a      	ldr	r2, [r7, #4]
 800a3e6:	7c12      	ldrb	r2, [r2, #16]
 800a3e8:	f107 0108 	add.w	r1, r7, #8
 800a3ec:	4610      	mov	r0, r2
 800a3ee:	4798      	blx	r3
 800a3f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a3f2:	e029      	b.n	800a448 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a3f4:	6839      	ldr	r1, [r7, #0]
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f000 fa2c 	bl	800a854 <USBD_CtlError>
            err++;
 800a3fc:	7afb      	ldrb	r3, [r7, #11]
 800a3fe:	3301      	adds	r3, #1
 800a400:	72fb      	strb	r3, [r7, #11]
          break;
 800a402:	e021      	b.n	800a448 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a40a:	699b      	ldr	r3, [r3, #24]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d00b      	beq.n	800a428 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a416:	699b      	ldr	r3, [r3, #24]
 800a418:	687a      	ldr	r2, [r7, #4]
 800a41a:	7c12      	ldrb	r2, [r2, #16]
 800a41c:	f107 0108 	add.w	r1, r7, #8
 800a420:	4610      	mov	r0, r2
 800a422:	4798      	blx	r3
 800a424:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a426:	e00f      	b.n	800a448 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a428:	6839      	ldr	r1, [r7, #0]
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f000 fa12 	bl	800a854 <USBD_CtlError>
            err++;
 800a430:	7afb      	ldrb	r3, [r7, #11]
 800a432:	3301      	adds	r3, #1
 800a434:	72fb      	strb	r3, [r7, #11]
          break;
 800a436:	e007      	b.n	800a448 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a438:	6839      	ldr	r1, [r7, #0]
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f000 fa0a 	bl	800a854 <USBD_CtlError>
          err++;
 800a440:	7afb      	ldrb	r3, [r7, #11]
 800a442:	3301      	adds	r3, #1
 800a444:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a446:	e038      	b.n	800a4ba <USBD_GetDescriptor+0x286>
 800a448:	e037      	b.n	800a4ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	7c1b      	ldrb	r3, [r3, #16]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d109      	bne.n	800a466 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a45a:	f107 0208 	add.w	r2, r7, #8
 800a45e:	4610      	mov	r0, r2
 800a460:	4798      	blx	r3
 800a462:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a464:	e029      	b.n	800a4ba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a466:	6839      	ldr	r1, [r7, #0]
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f000 f9f3 	bl	800a854 <USBD_CtlError>
        err++;
 800a46e:	7afb      	ldrb	r3, [r7, #11]
 800a470:	3301      	adds	r3, #1
 800a472:	72fb      	strb	r3, [r7, #11]
      break;
 800a474:	e021      	b.n	800a4ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	7c1b      	ldrb	r3, [r3, #16]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d10d      	bne.n	800a49a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a486:	f107 0208 	add.w	r2, r7, #8
 800a48a:	4610      	mov	r0, r2
 800a48c:	4798      	blx	r3
 800a48e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	3301      	adds	r3, #1
 800a494:	2207      	movs	r2, #7
 800a496:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a498:	e00f      	b.n	800a4ba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a49a:	6839      	ldr	r1, [r7, #0]
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f000 f9d9 	bl	800a854 <USBD_CtlError>
        err++;
 800a4a2:	7afb      	ldrb	r3, [r7, #11]
 800a4a4:	3301      	adds	r3, #1
 800a4a6:	72fb      	strb	r3, [r7, #11]
      break;
 800a4a8:	e007      	b.n	800a4ba <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a4aa:	6839      	ldr	r1, [r7, #0]
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f000 f9d1 	bl	800a854 <USBD_CtlError>
      err++;
 800a4b2:	7afb      	ldrb	r3, [r7, #11]
 800a4b4:	3301      	adds	r3, #1
 800a4b6:	72fb      	strb	r3, [r7, #11]
      break;
 800a4b8:	bf00      	nop
  }

  if (err != 0U)
 800a4ba:	7afb      	ldrb	r3, [r7, #11]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d11c      	bne.n	800a4fa <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a4c0:	893b      	ldrh	r3, [r7, #8]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d011      	beq.n	800a4ea <USBD_GetDescriptor+0x2b6>
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	88db      	ldrh	r3, [r3, #6]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d00d      	beq.n	800a4ea <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	88da      	ldrh	r2, [r3, #6]
 800a4d2:	893b      	ldrh	r3, [r7, #8]
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	bf28      	it	cs
 800a4d8:	4613      	movcs	r3, r2
 800a4da:	b29b      	uxth	r3, r3
 800a4dc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a4de:	893b      	ldrh	r3, [r7, #8]
 800a4e0:	461a      	mov	r2, r3
 800a4e2:	68f9      	ldr	r1, [r7, #12]
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f000 fa1f 	bl	800a928 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	88db      	ldrh	r3, [r3, #6]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d104      	bne.n	800a4fc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f000 fa76 	bl	800a9e4 <USBD_CtlSendStatus>
 800a4f8:	e000      	b.n	800a4fc <USBD_GetDescriptor+0x2c8>
    return;
 800a4fa:	bf00      	nop
    }
  }
}
 800a4fc:	3710      	adds	r7, #16
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}
 800a502:	bf00      	nop

0800a504 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b084      	sub	sp, #16
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	889b      	ldrh	r3, [r3, #4]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d130      	bne.n	800a578 <USBD_SetAddress+0x74>
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	88db      	ldrh	r3, [r3, #6]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d12c      	bne.n	800a578 <USBD_SetAddress+0x74>
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	885b      	ldrh	r3, [r3, #2]
 800a522:	2b7f      	cmp	r3, #127	; 0x7f
 800a524:	d828      	bhi.n	800a578 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	885b      	ldrh	r3, [r3, #2]
 800a52a:	b2db      	uxtb	r3, r3
 800a52c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a530:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a538:	2b03      	cmp	r3, #3
 800a53a:	d104      	bne.n	800a546 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a53c:	6839      	ldr	r1, [r7, #0]
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f000 f988 	bl	800a854 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a544:	e01c      	b.n	800a580 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	7bfa      	ldrb	r2, [r7, #15]
 800a54a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a54e:	7bfb      	ldrb	r3, [r7, #15]
 800a550:	4619      	mov	r1, r3
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f000 fe3f 	bl	800b1d6 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f000 fa43 	bl	800a9e4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a55e:	7bfb      	ldrb	r3, [r7, #15]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d004      	beq.n	800a56e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2202      	movs	r2, #2
 800a568:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a56c:	e008      	b.n	800a580 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2201      	movs	r2, #1
 800a572:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a576:	e003      	b.n	800a580 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a578:	6839      	ldr	r1, [r7, #0]
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f000 f96a 	bl	800a854 <USBD_CtlError>
  }
}
 800a580:	bf00      	nop
 800a582:	3710      	adds	r7, #16
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}

0800a588 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b082      	sub	sp, #8
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
 800a590:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	885b      	ldrh	r3, [r3, #2]
 800a596:	b2da      	uxtb	r2, r3
 800a598:	4b41      	ldr	r3, [pc, #260]	; (800a6a0 <USBD_SetConfig+0x118>)
 800a59a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a59c:	4b40      	ldr	r3, [pc, #256]	; (800a6a0 <USBD_SetConfig+0x118>)
 800a59e:	781b      	ldrb	r3, [r3, #0]
 800a5a0:	2b01      	cmp	r3, #1
 800a5a2:	d904      	bls.n	800a5ae <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a5a4:	6839      	ldr	r1, [r7, #0]
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f000 f954 	bl	800a854 <USBD_CtlError>
 800a5ac:	e075      	b.n	800a69a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5b4:	2b02      	cmp	r3, #2
 800a5b6:	d002      	beq.n	800a5be <USBD_SetConfig+0x36>
 800a5b8:	2b03      	cmp	r3, #3
 800a5ba:	d023      	beq.n	800a604 <USBD_SetConfig+0x7c>
 800a5bc:	e062      	b.n	800a684 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a5be:	4b38      	ldr	r3, [pc, #224]	; (800a6a0 <USBD_SetConfig+0x118>)
 800a5c0:	781b      	ldrb	r3, [r3, #0]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d01a      	beq.n	800a5fc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a5c6:	4b36      	ldr	r3, [pc, #216]	; (800a6a0 <USBD_SetConfig+0x118>)
 800a5c8:	781b      	ldrb	r3, [r3, #0]
 800a5ca:	461a      	mov	r2, r3
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2203      	movs	r2, #3
 800a5d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a5d8:	4b31      	ldr	r3, [pc, #196]	; (800a6a0 <USBD_SetConfig+0x118>)
 800a5da:	781b      	ldrb	r3, [r3, #0]
 800a5dc:	4619      	mov	r1, r3
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f7ff f9f3 	bl	80099ca <USBD_SetClassConfig>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	2b02      	cmp	r3, #2
 800a5e8:	d104      	bne.n	800a5f4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a5ea:	6839      	ldr	r1, [r7, #0]
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f000 f931 	bl	800a854 <USBD_CtlError>
            return;
 800a5f2:	e052      	b.n	800a69a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f000 f9f5 	bl	800a9e4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a5fa:	e04e      	b.n	800a69a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f000 f9f1 	bl	800a9e4 <USBD_CtlSendStatus>
        break;
 800a602:	e04a      	b.n	800a69a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a604:	4b26      	ldr	r3, [pc, #152]	; (800a6a0 <USBD_SetConfig+0x118>)
 800a606:	781b      	ldrb	r3, [r3, #0]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d112      	bne.n	800a632 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2202      	movs	r2, #2
 800a610:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a614:	4b22      	ldr	r3, [pc, #136]	; (800a6a0 <USBD_SetConfig+0x118>)
 800a616:	781b      	ldrb	r3, [r3, #0]
 800a618:	461a      	mov	r2, r3
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a61e:	4b20      	ldr	r3, [pc, #128]	; (800a6a0 <USBD_SetConfig+0x118>)
 800a620:	781b      	ldrb	r3, [r3, #0]
 800a622:	4619      	mov	r1, r3
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	f7ff f9ef 	bl	8009a08 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f000 f9da 	bl	800a9e4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a630:	e033      	b.n	800a69a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a632:	4b1b      	ldr	r3, [pc, #108]	; (800a6a0 <USBD_SetConfig+0x118>)
 800a634:	781b      	ldrb	r3, [r3, #0]
 800a636:	461a      	mov	r2, r3
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	685b      	ldr	r3, [r3, #4]
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d01d      	beq.n	800a67c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	685b      	ldr	r3, [r3, #4]
 800a644:	b2db      	uxtb	r3, r3
 800a646:	4619      	mov	r1, r3
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f7ff f9dd 	bl	8009a08 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a64e:	4b14      	ldr	r3, [pc, #80]	; (800a6a0 <USBD_SetConfig+0x118>)
 800a650:	781b      	ldrb	r3, [r3, #0]
 800a652:	461a      	mov	r2, r3
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a658:	4b11      	ldr	r3, [pc, #68]	; (800a6a0 <USBD_SetConfig+0x118>)
 800a65a:	781b      	ldrb	r3, [r3, #0]
 800a65c:	4619      	mov	r1, r3
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f7ff f9b3 	bl	80099ca <USBD_SetClassConfig>
 800a664:	4603      	mov	r3, r0
 800a666:	2b02      	cmp	r3, #2
 800a668:	d104      	bne.n	800a674 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a66a:	6839      	ldr	r1, [r7, #0]
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f000 f8f1 	bl	800a854 <USBD_CtlError>
            return;
 800a672:	e012      	b.n	800a69a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f000 f9b5 	bl	800a9e4 <USBD_CtlSendStatus>
        break;
 800a67a:	e00e      	b.n	800a69a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f000 f9b1 	bl	800a9e4 <USBD_CtlSendStatus>
        break;
 800a682:	e00a      	b.n	800a69a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a684:	6839      	ldr	r1, [r7, #0]
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f000 f8e4 	bl	800a854 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a68c:	4b04      	ldr	r3, [pc, #16]	; (800a6a0 <USBD_SetConfig+0x118>)
 800a68e:	781b      	ldrb	r3, [r3, #0]
 800a690:	4619      	mov	r1, r3
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f7ff f9b8 	bl	8009a08 <USBD_ClrClassConfig>
        break;
 800a698:	bf00      	nop
    }
  }
}
 800a69a:	3708      	adds	r7, #8
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}
 800a6a0:	2000036c 	.word	0x2000036c

0800a6a4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b082      	sub	sp, #8
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	88db      	ldrh	r3, [r3, #6]
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	d004      	beq.n	800a6c0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a6b6:	6839      	ldr	r1, [r7, #0]
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f000 f8cb 	bl	800a854 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a6be:	e021      	b.n	800a704 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6c6:	2b01      	cmp	r3, #1
 800a6c8:	db17      	blt.n	800a6fa <USBD_GetConfig+0x56>
 800a6ca:	2b02      	cmp	r3, #2
 800a6cc:	dd02      	ble.n	800a6d4 <USBD_GetConfig+0x30>
 800a6ce:	2b03      	cmp	r3, #3
 800a6d0:	d00b      	beq.n	800a6ea <USBD_GetConfig+0x46>
 800a6d2:	e012      	b.n	800a6fa <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	3308      	adds	r3, #8
 800a6de:	2201      	movs	r2, #1
 800a6e0:	4619      	mov	r1, r3
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f000 f920 	bl	800a928 <USBD_CtlSendData>
        break;
 800a6e8:	e00c      	b.n	800a704 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	3304      	adds	r3, #4
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	4619      	mov	r1, r3
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f000 f918 	bl	800a928 <USBD_CtlSendData>
        break;
 800a6f8:	e004      	b.n	800a704 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800a6fa:	6839      	ldr	r1, [r7, #0]
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f000 f8a9 	bl	800a854 <USBD_CtlError>
        break;
 800a702:	bf00      	nop
}
 800a704:	bf00      	nop
 800a706:	3708      	adds	r7, #8
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}

0800a70c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b082      	sub	sp, #8
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
 800a714:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a71c:	3b01      	subs	r3, #1
 800a71e:	2b02      	cmp	r3, #2
 800a720:	d81e      	bhi.n	800a760 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	88db      	ldrh	r3, [r3, #6]
 800a726:	2b02      	cmp	r3, #2
 800a728:	d004      	beq.n	800a734 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a72a:	6839      	ldr	r1, [r7, #0]
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f000 f891 	bl	800a854 <USBD_CtlError>
        break;
 800a732:	e01a      	b.n	800a76a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2201      	movs	r2, #1
 800a738:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a740:	2b00      	cmp	r3, #0
 800a742:	d005      	beq.n	800a750 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	68db      	ldr	r3, [r3, #12]
 800a748:	f043 0202 	orr.w	r2, r3, #2
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	330c      	adds	r3, #12
 800a754:	2202      	movs	r2, #2
 800a756:	4619      	mov	r1, r3
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f000 f8e5 	bl	800a928 <USBD_CtlSendData>
      break;
 800a75e:	e004      	b.n	800a76a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a760:	6839      	ldr	r1, [r7, #0]
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f000 f876 	bl	800a854 <USBD_CtlError>
      break;
 800a768:	bf00      	nop
  }
}
 800a76a:	bf00      	nop
 800a76c:	3708      	adds	r7, #8
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}

0800a772 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a772:	b580      	push	{r7, lr}
 800a774:	b082      	sub	sp, #8
 800a776:	af00      	add	r7, sp, #0
 800a778:	6078      	str	r0, [r7, #4]
 800a77a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	885b      	ldrh	r3, [r3, #2]
 800a780:	2b01      	cmp	r3, #1
 800a782:	d106      	bne.n	800a792 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2201      	movs	r2, #1
 800a788:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f000 f929 	bl	800a9e4 <USBD_CtlSendStatus>
  }
}
 800a792:	bf00      	nop
 800a794:	3708      	adds	r7, #8
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}

0800a79a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a79a:	b580      	push	{r7, lr}
 800a79c:	b082      	sub	sp, #8
 800a79e:	af00      	add	r7, sp, #0
 800a7a0:	6078      	str	r0, [r7, #4]
 800a7a2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7aa:	3b01      	subs	r3, #1
 800a7ac:	2b02      	cmp	r3, #2
 800a7ae:	d80b      	bhi.n	800a7c8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	885b      	ldrh	r3, [r3, #2]
 800a7b4:	2b01      	cmp	r3, #1
 800a7b6:	d10c      	bne.n	800a7d2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f000 f90f 	bl	800a9e4 <USBD_CtlSendStatus>
      }
      break;
 800a7c6:	e004      	b.n	800a7d2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a7c8:	6839      	ldr	r1, [r7, #0]
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f000 f842 	bl	800a854 <USBD_CtlError>
      break;
 800a7d0:	e000      	b.n	800a7d4 <USBD_ClrFeature+0x3a>
      break;
 800a7d2:	bf00      	nop
  }
}
 800a7d4:	bf00      	nop
 800a7d6:	3708      	adds	r7, #8
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}

0800a7dc <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b083      	sub	sp, #12
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	781a      	ldrb	r2, [r3, #0]
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	785a      	ldrb	r2, [r3, #1]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	3302      	adds	r3, #2
 800a7fa:	781b      	ldrb	r3, [r3, #0]
 800a7fc:	b29a      	uxth	r2, r3
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	3303      	adds	r3, #3
 800a802:	781b      	ldrb	r3, [r3, #0]
 800a804:	b29b      	uxth	r3, r3
 800a806:	021b      	lsls	r3, r3, #8
 800a808:	b29b      	uxth	r3, r3
 800a80a:	4413      	add	r3, r2
 800a80c:	b29a      	uxth	r2, r3
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	3304      	adds	r3, #4
 800a816:	781b      	ldrb	r3, [r3, #0]
 800a818:	b29a      	uxth	r2, r3
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	3305      	adds	r3, #5
 800a81e:	781b      	ldrb	r3, [r3, #0]
 800a820:	b29b      	uxth	r3, r3
 800a822:	021b      	lsls	r3, r3, #8
 800a824:	b29b      	uxth	r3, r3
 800a826:	4413      	add	r3, r2
 800a828:	b29a      	uxth	r2, r3
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	3306      	adds	r3, #6
 800a832:	781b      	ldrb	r3, [r3, #0]
 800a834:	b29a      	uxth	r2, r3
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	3307      	adds	r3, #7
 800a83a:	781b      	ldrb	r3, [r3, #0]
 800a83c:	b29b      	uxth	r3, r3
 800a83e:	021b      	lsls	r3, r3, #8
 800a840:	b29b      	uxth	r3, r3
 800a842:	4413      	add	r3, r2
 800a844:	b29a      	uxth	r2, r3
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	80da      	strh	r2, [r3, #6]

}
 800a84a:	bf00      	nop
 800a84c:	370c      	adds	r7, #12
 800a84e:	46bd      	mov	sp, r7
 800a850:	bc80      	pop	{r7}
 800a852:	4770      	bx	lr

0800a854 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b082      	sub	sp, #8
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
 800a85c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a85e:	2180      	movs	r1, #128	; 0x80
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f000 fc55 	bl	800b110 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a866:	2100      	movs	r1, #0
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f000 fc51 	bl	800b110 <USBD_LL_StallEP>
}
 800a86e:	bf00      	nop
 800a870:	3708      	adds	r7, #8
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}

0800a876 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a876:	b580      	push	{r7, lr}
 800a878:	b086      	sub	sp, #24
 800a87a:	af00      	add	r7, sp, #0
 800a87c:	60f8      	str	r0, [r7, #12]
 800a87e:	60b9      	str	r1, [r7, #8]
 800a880:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a882:	2300      	movs	r3, #0
 800a884:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d032      	beq.n	800a8f2 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a88c:	68f8      	ldr	r0, [r7, #12]
 800a88e:	f000 f834 	bl	800a8fa <USBD_GetLen>
 800a892:	4603      	mov	r3, r0
 800a894:	3301      	adds	r3, #1
 800a896:	b29b      	uxth	r3, r3
 800a898:	005b      	lsls	r3, r3, #1
 800a89a:	b29a      	uxth	r2, r3
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a8a0:	7dfb      	ldrb	r3, [r7, #23]
 800a8a2:	1c5a      	adds	r2, r3, #1
 800a8a4:	75fa      	strb	r2, [r7, #23]
 800a8a6:	461a      	mov	r2, r3
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	4413      	add	r3, r2
 800a8ac:	687a      	ldr	r2, [r7, #4]
 800a8ae:	7812      	ldrb	r2, [r2, #0]
 800a8b0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a8b2:	7dfb      	ldrb	r3, [r7, #23]
 800a8b4:	1c5a      	adds	r2, r3, #1
 800a8b6:	75fa      	strb	r2, [r7, #23]
 800a8b8:	461a      	mov	r2, r3
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	4413      	add	r3, r2
 800a8be:	2203      	movs	r2, #3
 800a8c0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a8c2:	e012      	b.n	800a8ea <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	1c5a      	adds	r2, r3, #1
 800a8c8:	60fa      	str	r2, [r7, #12]
 800a8ca:	7dfa      	ldrb	r2, [r7, #23]
 800a8cc:	1c51      	adds	r1, r2, #1
 800a8ce:	75f9      	strb	r1, [r7, #23]
 800a8d0:	4611      	mov	r1, r2
 800a8d2:	68ba      	ldr	r2, [r7, #8]
 800a8d4:	440a      	add	r2, r1
 800a8d6:	781b      	ldrb	r3, [r3, #0]
 800a8d8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a8da:	7dfb      	ldrb	r3, [r7, #23]
 800a8dc:	1c5a      	adds	r2, r3, #1
 800a8de:	75fa      	strb	r2, [r7, #23]
 800a8e0:	461a      	mov	r2, r3
 800a8e2:	68bb      	ldr	r3, [r7, #8]
 800a8e4:	4413      	add	r3, r2
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	781b      	ldrb	r3, [r3, #0]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d1e8      	bne.n	800a8c4 <USBD_GetString+0x4e>
    }
  }
}
 800a8f2:	bf00      	nop
 800a8f4:	3718      	adds	r7, #24
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}

0800a8fa <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a8fa:	b480      	push	{r7}
 800a8fc:	b085      	sub	sp, #20
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a902:	2300      	movs	r3, #0
 800a904:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a906:	e005      	b.n	800a914 <USBD_GetLen+0x1a>
  {
    len++;
 800a908:	7bfb      	ldrb	r3, [r7, #15]
 800a90a:	3301      	adds	r3, #1
 800a90c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	3301      	adds	r3, #1
 800a912:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	781b      	ldrb	r3, [r3, #0]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d1f5      	bne.n	800a908 <USBD_GetLen+0xe>
  }

  return len;
 800a91c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a91e:	4618      	mov	r0, r3
 800a920:	3714      	adds	r7, #20
 800a922:	46bd      	mov	sp, r7
 800a924:	bc80      	pop	{r7}
 800a926:	4770      	bx	lr

0800a928 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b084      	sub	sp, #16
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	60f8      	str	r0, [r7, #12]
 800a930:	60b9      	str	r1, [r7, #8]
 800a932:	4613      	mov	r3, r2
 800a934:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	2202      	movs	r2, #2
 800a93a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a93e:	88fa      	ldrh	r2, [r7, #6]
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a944:	88fa      	ldrh	r2, [r7, #6]
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a94a:	88fb      	ldrh	r3, [r7, #6]
 800a94c:	68ba      	ldr	r2, [r7, #8]
 800a94e:	2100      	movs	r1, #0
 800a950:	68f8      	ldr	r0, [r7, #12]
 800a952:	f000 fc5f 	bl	800b214 <USBD_LL_Transmit>

  return USBD_OK;
 800a956:	2300      	movs	r3, #0
}
 800a958:	4618      	mov	r0, r3
 800a95a:	3710      	adds	r7, #16
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}

0800a960 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b084      	sub	sp, #16
 800a964:	af00      	add	r7, sp, #0
 800a966:	60f8      	str	r0, [r7, #12]
 800a968:	60b9      	str	r1, [r7, #8]
 800a96a:	4613      	mov	r3, r2
 800a96c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a96e:	88fb      	ldrh	r3, [r7, #6]
 800a970:	68ba      	ldr	r2, [r7, #8]
 800a972:	2100      	movs	r1, #0
 800a974:	68f8      	ldr	r0, [r7, #12]
 800a976:	f000 fc4d 	bl	800b214 <USBD_LL_Transmit>

  return USBD_OK;
 800a97a:	2300      	movs	r3, #0
}
 800a97c:	4618      	mov	r0, r3
 800a97e:	3710      	adds	r7, #16
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}

0800a984 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b084      	sub	sp, #16
 800a988:	af00      	add	r7, sp, #0
 800a98a:	60f8      	str	r0, [r7, #12]
 800a98c:	60b9      	str	r1, [r7, #8]
 800a98e:	4613      	mov	r3, r2
 800a990:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	2203      	movs	r2, #3
 800a996:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a99a:	88fa      	ldrh	r2, [r7, #6]
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a9a2:	88fa      	ldrh	r2, [r7, #6]
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a9aa:	88fb      	ldrh	r3, [r7, #6]
 800a9ac:	68ba      	ldr	r2, [r7, #8]
 800a9ae:	2100      	movs	r1, #0
 800a9b0:	68f8      	ldr	r0, [r7, #12]
 800a9b2:	f000 fc52 	bl	800b25a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a9b6:	2300      	movs	r3, #0
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	3710      	adds	r7, #16
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}

0800a9c0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b084      	sub	sp, #16
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	60f8      	str	r0, [r7, #12]
 800a9c8:	60b9      	str	r1, [r7, #8]
 800a9ca:	4613      	mov	r3, r2
 800a9cc:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a9ce:	88fb      	ldrh	r3, [r7, #6]
 800a9d0:	68ba      	ldr	r2, [r7, #8]
 800a9d2:	2100      	movs	r1, #0
 800a9d4:	68f8      	ldr	r0, [r7, #12]
 800a9d6:	f000 fc40 	bl	800b25a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a9da:	2300      	movs	r3, #0
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	3710      	adds	r7, #16
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}

0800a9e4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b082      	sub	sp, #8
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2204      	movs	r2, #4
 800a9f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	2100      	movs	r1, #0
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f000 fc0a 	bl	800b214 <USBD_LL_Transmit>

  return USBD_OK;
 800aa00:	2300      	movs	r3, #0
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	3708      	adds	r7, #8
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}

0800aa0a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800aa0a:	b580      	push	{r7, lr}
 800aa0c:	b082      	sub	sp, #8
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2205      	movs	r2, #5
 800aa16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	2100      	movs	r1, #0
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f000 fc1a 	bl	800b25a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aa26:	2300      	movs	r3, #0
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3708      	adds	r7, #8
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}

0800aa30 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800aa34:	2200      	movs	r2, #0
 800aa36:	4912      	ldr	r1, [pc, #72]	; (800aa80 <MX_USB_DEVICE_Init+0x50>)
 800aa38:	4812      	ldr	r0, [pc, #72]	; (800aa84 <MX_USB_DEVICE_Init+0x54>)
 800aa3a:	f7fe ff6c 	bl	8009916 <USBD_Init>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d001      	beq.n	800aa48 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800aa44:	f7f9 fabe 	bl	8003fc4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800aa48:	490f      	ldr	r1, [pc, #60]	; (800aa88 <MX_USB_DEVICE_Init+0x58>)
 800aa4a:	480e      	ldr	r0, [pc, #56]	; (800aa84 <MX_USB_DEVICE_Init+0x54>)
 800aa4c:	f7fe ff8e 	bl	800996c <USBD_RegisterClass>
 800aa50:	4603      	mov	r3, r0
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d001      	beq.n	800aa5a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800aa56:	f7f9 fab5 	bl	8003fc4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800aa5a:	490c      	ldr	r1, [pc, #48]	; (800aa8c <MX_USB_DEVICE_Init+0x5c>)
 800aa5c:	4809      	ldr	r0, [pc, #36]	; (800aa84 <MX_USB_DEVICE_Init+0x54>)
 800aa5e:	f7fe febf 	bl	80097e0 <USBD_CDC_RegisterInterface>
 800aa62:	4603      	mov	r3, r0
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d001      	beq.n	800aa6c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800aa68:	f7f9 faac 	bl	8003fc4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800aa6c:	4805      	ldr	r0, [pc, #20]	; (800aa84 <MX_USB_DEVICE_Init+0x54>)
 800aa6e:	f7fe ff96 	bl	800999e <USBD_Start>
 800aa72:	4603      	mov	r3, r0
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d001      	beq.n	800aa7c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800aa78:	f7f9 faa4 	bl	8003fc4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800aa7c:	bf00      	nop
 800aa7e:	bd80      	pop	{r7, pc}
 800aa80:	2000012c 	.word	0x2000012c
 800aa84:	20001330 	.word	0x20001330
 800aa88:	20000018 	.word	0x20000018
 800aa8c:	2000011c 	.word	0x2000011c

0800aa90 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800aa94:	2200      	movs	r2, #0
 800aa96:	4905      	ldr	r1, [pc, #20]	; (800aaac <CDC_Init_FS+0x1c>)
 800aa98:	4805      	ldr	r0, [pc, #20]	; (800aab0 <CDC_Init_FS+0x20>)
 800aa9a:	f7fe feb7 	bl	800980c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800aa9e:	4905      	ldr	r1, [pc, #20]	; (800aab4 <CDC_Init_FS+0x24>)
 800aaa0:	4803      	ldr	r0, [pc, #12]	; (800aab0 <CDC_Init_FS+0x20>)
 800aaa2:	f7fe fecc 	bl	800983e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800aaa6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	bd80      	pop	{r7, pc}
 800aaac:	20001614 	.word	0x20001614
 800aab0:	20001330 	.word	0x20001330
 800aab4:	200015f4 	.word	0x200015f4

0800aab8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800aab8:	b480      	push	{r7}
 800aaba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800aabc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800aabe:	4618      	mov	r0, r3
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bc80      	pop	{r7}
 800aac4:	4770      	bx	lr
	...

0800aac8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800aac8:	b480      	push	{r7}
 800aaca:	b083      	sub	sp, #12
 800aacc:	af00      	add	r7, sp, #0
 800aace:	4603      	mov	r3, r0
 800aad0:	6039      	str	r1, [r7, #0]
 800aad2:	71fb      	strb	r3, [r7, #7]
 800aad4:	4613      	mov	r3, r2
 800aad6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800aad8:	79fb      	ldrb	r3, [r7, #7]
 800aada:	2b23      	cmp	r3, #35	; 0x23
 800aadc:	d84a      	bhi.n	800ab74 <CDC_Control_FS+0xac>
 800aade:	a201      	add	r2, pc, #4	; (adr r2, 800aae4 <CDC_Control_FS+0x1c>)
 800aae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aae4:	0800ab75 	.word	0x0800ab75
 800aae8:	0800ab75 	.word	0x0800ab75
 800aaec:	0800ab75 	.word	0x0800ab75
 800aaf0:	0800ab75 	.word	0x0800ab75
 800aaf4:	0800ab75 	.word	0x0800ab75
 800aaf8:	0800ab75 	.word	0x0800ab75
 800aafc:	0800ab75 	.word	0x0800ab75
 800ab00:	0800ab75 	.word	0x0800ab75
 800ab04:	0800ab75 	.word	0x0800ab75
 800ab08:	0800ab75 	.word	0x0800ab75
 800ab0c:	0800ab75 	.word	0x0800ab75
 800ab10:	0800ab75 	.word	0x0800ab75
 800ab14:	0800ab75 	.word	0x0800ab75
 800ab18:	0800ab75 	.word	0x0800ab75
 800ab1c:	0800ab75 	.word	0x0800ab75
 800ab20:	0800ab75 	.word	0x0800ab75
 800ab24:	0800ab75 	.word	0x0800ab75
 800ab28:	0800ab75 	.word	0x0800ab75
 800ab2c:	0800ab75 	.word	0x0800ab75
 800ab30:	0800ab75 	.word	0x0800ab75
 800ab34:	0800ab75 	.word	0x0800ab75
 800ab38:	0800ab75 	.word	0x0800ab75
 800ab3c:	0800ab75 	.word	0x0800ab75
 800ab40:	0800ab75 	.word	0x0800ab75
 800ab44:	0800ab75 	.word	0x0800ab75
 800ab48:	0800ab75 	.word	0x0800ab75
 800ab4c:	0800ab75 	.word	0x0800ab75
 800ab50:	0800ab75 	.word	0x0800ab75
 800ab54:	0800ab75 	.word	0x0800ab75
 800ab58:	0800ab75 	.word	0x0800ab75
 800ab5c:	0800ab75 	.word	0x0800ab75
 800ab60:	0800ab75 	.word	0x0800ab75
 800ab64:	0800ab75 	.word	0x0800ab75
 800ab68:	0800ab75 	.word	0x0800ab75
 800ab6c:	0800ab75 	.word	0x0800ab75
 800ab70:	0800ab75 	.word	0x0800ab75
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ab74:	bf00      	nop
  }

  return (USBD_OK);
 800ab76:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	370c      	adds	r7, #12
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bc80      	pop	{r7}
 800ab80:	4770      	bx	lr
 800ab82:	bf00      	nop

0800ab84 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b082      	sub	sp, #8
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
 800ab8c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ab8e:	6879      	ldr	r1, [r7, #4]
 800ab90:	4805      	ldr	r0, [pc, #20]	; (800aba8 <CDC_Receive_FS+0x24>)
 800ab92:	f7fe fe54 	bl	800983e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ab96:	4804      	ldr	r0, [pc, #16]	; (800aba8 <CDC_Receive_FS+0x24>)
 800ab98:	f7fe fe93 	bl	80098c2 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ab9c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3708      	adds	r7, #8
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}
 800aba6:	bf00      	nop
 800aba8:	20001330 	.word	0x20001330

0800abac <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b084      	sub	sp, #16
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
 800abb4:	460b      	mov	r3, r1
 800abb6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800abb8:	2300      	movs	r3, #0
 800abba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800abbc:	4b0d      	ldr	r3, [pc, #52]	; (800abf4 <CDC_Transmit_FS+0x48>)
 800abbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abc2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d001      	beq.n	800abd2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800abce:	2301      	movs	r3, #1
 800abd0:	e00b      	b.n	800abea <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800abd2:	887b      	ldrh	r3, [r7, #2]
 800abd4:	461a      	mov	r2, r3
 800abd6:	6879      	ldr	r1, [r7, #4]
 800abd8:	4806      	ldr	r0, [pc, #24]	; (800abf4 <CDC_Transmit_FS+0x48>)
 800abda:	f7fe fe17 	bl	800980c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800abde:	4805      	ldr	r0, [pc, #20]	; (800abf4 <CDC_Transmit_FS+0x48>)
 800abe0:	f7fe fe40 	bl	8009864 <USBD_CDC_TransmitPacket>
 800abe4:	4603      	mov	r3, r0
 800abe6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800abe8:	7bfb      	ldrb	r3, [r7, #15]
}
 800abea:	4618      	mov	r0, r3
 800abec:	3710      	adds	r7, #16
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}
 800abf2:	bf00      	nop
 800abf4:	20001330 	.word	0x20001330

0800abf8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abf8:	b480      	push	{r7}
 800abfa:	b083      	sub	sp, #12
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	4603      	mov	r3, r0
 800ac00:	6039      	str	r1, [r7, #0]
 800ac02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	2212      	movs	r2, #18
 800ac08:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ac0a:	4b03      	ldr	r3, [pc, #12]	; (800ac18 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	370c      	adds	r7, #12
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bc80      	pop	{r7}
 800ac14:	4770      	bx	lr
 800ac16:	bf00      	nop
 800ac18:	20000148 	.word	0x20000148

0800ac1c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	b083      	sub	sp, #12
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	4603      	mov	r3, r0
 800ac24:	6039      	str	r1, [r7, #0]
 800ac26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	2204      	movs	r2, #4
 800ac2c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ac2e:	4b03      	ldr	r3, [pc, #12]	; (800ac3c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ac30:	4618      	mov	r0, r3
 800ac32:	370c      	adds	r7, #12
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bc80      	pop	{r7}
 800ac38:	4770      	bx	lr
 800ac3a:	bf00      	nop
 800ac3c:	2000015c 	.word	0x2000015c

0800ac40 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b082      	sub	sp, #8
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	4603      	mov	r3, r0
 800ac48:	6039      	str	r1, [r7, #0]
 800ac4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ac4c:	79fb      	ldrb	r3, [r7, #7]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d105      	bne.n	800ac5e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ac52:	683a      	ldr	r2, [r7, #0]
 800ac54:	4907      	ldr	r1, [pc, #28]	; (800ac74 <USBD_FS_ProductStrDescriptor+0x34>)
 800ac56:	4808      	ldr	r0, [pc, #32]	; (800ac78 <USBD_FS_ProductStrDescriptor+0x38>)
 800ac58:	f7ff fe0d 	bl	800a876 <USBD_GetString>
 800ac5c:	e004      	b.n	800ac68 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ac5e:	683a      	ldr	r2, [r7, #0]
 800ac60:	4904      	ldr	r1, [pc, #16]	; (800ac74 <USBD_FS_ProductStrDescriptor+0x34>)
 800ac62:	4805      	ldr	r0, [pc, #20]	; (800ac78 <USBD_FS_ProductStrDescriptor+0x38>)
 800ac64:	f7ff fe07 	bl	800a876 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ac68:	4b02      	ldr	r3, [pc, #8]	; (800ac74 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	3708      	adds	r7, #8
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}
 800ac72:	bf00      	nop
 800ac74:	20001620 	.word	0x20001620
 800ac78:	0800c3c8 	.word	0x0800c3c8

0800ac7c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b082      	sub	sp, #8
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	4603      	mov	r3, r0
 800ac84:	6039      	str	r1, [r7, #0]
 800ac86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ac88:	683a      	ldr	r2, [r7, #0]
 800ac8a:	4904      	ldr	r1, [pc, #16]	; (800ac9c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ac8c:	4804      	ldr	r0, [pc, #16]	; (800aca0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ac8e:	f7ff fdf2 	bl	800a876 <USBD_GetString>
  return USBD_StrDesc;
 800ac92:	4b02      	ldr	r3, [pc, #8]	; (800ac9c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	3708      	adds	r7, #8
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}
 800ac9c:	20001620 	.word	0x20001620
 800aca0:	0800c3d8 	.word	0x0800c3d8

0800aca4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b082      	sub	sp, #8
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	4603      	mov	r3, r0
 800acac:	6039      	str	r1, [r7, #0]
 800acae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	221a      	movs	r2, #26
 800acb4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800acb6:	f000 f843 	bl	800ad40 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800acba:	4b02      	ldr	r3, [pc, #8]	; (800acc4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	3708      	adds	r7, #8
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}
 800acc4:	20000160 	.word	0x20000160

0800acc8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b082      	sub	sp, #8
 800accc:	af00      	add	r7, sp, #0
 800acce:	4603      	mov	r3, r0
 800acd0:	6039      	str	r1, [r7, #0]
 800acd2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800acd4:	79fb      	ldrb	r3, [r7, #7]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d105      	bne.n	800ace6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800acda:	683a      	ldr	r2, [r7, #0]
 800acdc:	4907      	ldr	r1, [pc, #28]	; (800acfc <USBD_FS_ConfigStrDescriptor+0x34>)
 800acde:	4808      	ldr	r0, [pc, #32]	; (800ad00 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ace0:	f7ff fdc9 	bl	800a876 <USBD_GetString>
 800ace4:	e004      	b.n	800acf0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ace6:	683a      	ldr	r2, [r7, #0]
 800ace8:	4904      	ldr	r1, [pc, #16]	; (800acfc <USBD_FS_ConfigStrDescriptor+0x34>)
 800acea:	4805      	ldr	r0, [pc, #20]	; (800ad00 <USBD_FS_ConfigStrDescriptor+0x38>)
 800acec:	f7ff fdc3 	bl	800a876 <USBD_GetString>
  }
  return USBD_StrDesc;
 800acf0:	4b02      	ldr	r3, [pc, #8]	; (800acfc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800acf2:	4618      	mov	r0, r3
 800acf4:	3708      	adds	r7, #8
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}
 800acfa:	bf00      	nop
 800acfc:	20001620 	.word	0x20001620
 800ad00:	0800c3e4 	.word	0x0800c3e4

0800ad04 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b082      	sub	sp, #8
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	6039      	str	r1, [r7, #0]
 800ad0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ad10:	79fb      	ldrb	r3, [r7, #7]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d105      	bne.n	800ad22 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ad16:	683a      	ldr	r2, [r7, #0]
 800ad18:	4907      	ldr	r1, [pc, #28]	; (800ad38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ad1a:	4808      	ldr	r0, [pc, #32]	; (800ad3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ad1c:	f7ff fdab 	bl	800a876 <USBD_GetString>
 800ad20:	e004      	b.n	800ad2c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ad22:	683a      	ldr	r2, [r7, #0]
 800ad24:	4904      	ldr	r1, [pc, #16]	; (800ad38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ad26:	4805      	ldr	r0, [pc, #20]	; (800ad3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ad28:	f7ff fda5 	bl	800a876 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ad2c:	4b02      	ldr	r3, [pc, #8]	; (800ad38 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	3708      	adds	r7, #8
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}
 800ad36:	bf00      	nop
 800ad38:	20001620 	.word	0x20001620
 800ad3c:	0800c3f0 	.word	0x0800c3f0

0800ad40 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b084      	sub	sp, #16
 800ad44:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ad46:	4b0f      	ldr	r3, [pc, #60]	; (800ad84 <Get_SerialNum+0x44>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ad4c:	4b0e      	ldr	r3, [pc, #56]	; (800ad88 <Get_SerialNum+0x48>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ad52:	4b0e      	ldr	r3, [pc, #56]	; (800ad8c <Get_SerialNum+0x4c>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ad58:	68fa      	ldr	r2, [r7, #12]
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	4413      	add	r3, r2
 800ad5e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d009      	beq.n	800ad7a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ad66:	2208      	movs	r2, #8
 800ad68:	4909      	ldr	r1, [pc, #36]	; (800ad90 <Get_SerialNum+0x50>)
 800ad6a:	68f8      	ldr	r0, [r7, #12]
 800ad6c:	f000 f814 	bl	800ad98 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ad70:	2204      	movs	r2, #4
 800ad72:	4908      	ldr	r1, [pc, #32]	; (800ad94 <Get_SerialNum+0x54>)
 800ad74:	68b8      	ldr	r0, [r7, #8]
 800ad76:	f000 f80f 	bl	800ad98 <IntToUnicode>
  }
}
 800ad7a:	bf00      	nop
 800ad7c:	3710      	adds	r7, #16
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}
 800ad82:	bf00      	nop
 800ad84:	1ffff7e8 	.word	0x1ffff7e8
 800ad88:	1ffff7ec 	.word	0x1ffff7ec
 800ad8c:	1ffff7f0 	.word	0x1ffff7f0
 800ad90:	20000162 	.word	0x20000162
 800ad94:	20000172 	.word	0x20000172

0800ad98 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ad98:	b480      	push	{r7}
 800ad9a:	b087      	sub	sp, #28
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	60f8      	str	r0, [r7, #12]
 800ada0:	60b9      	str	r1, [r7, #8]
 800ada2:	4613      	mov	r3, r2
 800ada4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ada6:	2300      	movs	r3, #0
 800ada8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800adaa:	2300      	movs	r3, #0
 800adac:	75fb      	strb	r3, [r7, #23]
 800adae:	e027      	b.n	800ae00 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	0f1b      	lsrs	r3, r3, #28
 800adb4:	2b09      	cmp	r3, #9
 800adb6:	d80b      	bhi.n	800add0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	0f1b      	lsrs	r3, r3, #28
 800adbc:	b2da      	uxtb	r2, r3
 800adbe:	7dfb      	ldrb	r3, [r7, #23]
 800adc0:	005b      	lsls	r3, r3, #1
 800adc2:	4619      	mov	r1, r3
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	440b      	add	r3, r1
 800adc8:	3230      	adds	r2, #48	; 0x30
 800adca:	b2d2      	uxtb	r2, r2
 800adcc:	701a      	strb	r2, [r3, #0]
 800adce:	e00a      	b.n	800ade6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	0f1b      	lsrs	r3, r3, #28
 800add4:	b2da      	uxtb	r2, r3
 800add6:	7dfb      	ldrb	r3, [r7, #23]
 800add8:	005b      	lsls	r3, r3, #1
 800adda:	4619      	mov	r1, r3
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	440b      	add	r3, r1
 800ade0:	3237      	adds	r2, #55	; 0x37
 800ade2:	b2d2      	uxtb	r2, r2
 800ade4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	011b      	lsls	r3, r3, #4
 800adea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800adec:	7dfb      	ldrb	r3, [r7, #23]
 800adee:	005b      	lsls	r3, r3, #1
 800adf0:	3301      	adds	r3, #1
 800adf2:	68ba      	ldr	r2, [r7, #8]
 800adf4:	4413      	add	r3, r2
 800adf6:	2200      	movs	r2, #0
 800adf8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800adfa:	7dfb      	ldrb	r3, [r7, #23]
 800adfc:	3301      	adds	r3, #1
 800adfe:	75fb      	strb	r3, [r7, #23]
 800ae00:	7dfa      	ldrb	r2, [r7, #23]
 800ae02:	79fb      	ldrb	r3, [r7, #7]
 800ae04:	429a      	cmp	r2, r3
 800ae06:	d3d3      	bcc.n	800adb0 <IntToUnicode+0x18>
  }
}
 800ae08:	bf00      	nop
 800ae0a:	371c      	adds	r7, #28
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bc80      	pop	{r7}
 800ae10:	4770      	bx	lr
	...

0800ae14 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b084      	sub	sp, #16
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	4a11      	ldr	r2, [pc, #68]	; (800ae68 <HAL_PCD_MspInit+0x54>)
 800ae22:	4293      	cmp	r3, r2
 800ae24:	d11b      	bne.n	800ae5e <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ae26:	4b11      	ldr	r3, [pc, #68]	; (800ae6c <HAL_PCD_MspInit+0x58>)
 800ae28:	69db      	ldr	r3, [r3, #28]
 800ae2a:	4a10      	ldr	r2, [pc, #64]	; (800ae6c <HAL_PCD_MspInit+0x58>)
 800ae2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ae30:	61d3      	str	r3, [r2, #28]
 800ae32:	4b0e      	ldr	r3, [pc, #56]	; (800ae6c <HAL_PCD_MspInit+0x58>)
 800ae34:	69db      	ldr	r3, [r3, #28]
 800ae36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ae3a:	60fb      	str	r3, [r7, #12]
 800ae3c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 800ae3e:	2200      	movs	r2, #0
 800ae40:	2100      	movs	r1, #0
 800ae42:	2013      	movs	r0, #19
 800ae44:	f7fa fc77 	bl	8005736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 800ae48:	2013      	movs	r0, #19
 800ae4a:	f7fa fc90 	bl	800576e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800ae4e:	2200      	movs	r2, #0
 800ae50:	2100      	movs	r1, #0
 800ae52:	2014      	movs	r0, #20
 800ae54:	f7fa fc6f 	bl	8005736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800ae58:	2014      	movs	r0, #20
 800ae5a:	f7fa fc88 	bl	800576e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ae5e:	bf00      	nop
 800ae60:	3710      	adds	r7, #16
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}
 800ae66:	bf00      	nop
 800ae68:	40005c00 	.word	0x40005c00
 800ae6c:	40021000 	.word	0x40021000

0800ae70 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b082      	sub	sp, #8
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800ae84:	4619      	mov	r1, r3
 800ae86:	4610      	mov	r0, r2
 800ae88:	f7fe fdd1 	bl	8009a2e <USBD_LL_SetupStage>
}
 800ae8c:	bf00      	nop
 800ae8e:	3708      	adds	r7, #8
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}

0800ae94 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b082      	sub	sp, #8
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
 800ae9c:	460b      	mov	r3, r1
 800ae9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800aea6:	78fb      	ldrb	r3, [r7, #3]
 800aea8:	687a      	ldr	r2, [r7, #4]
 800aeaa:	015b      	lsls	r3, r3, #5
 800aeac:	4413      	add	r3, r2
 800aeae:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800aeb2:	681a      	ldr	r2, [r3, #0]
 800aeb4:	78fb      	ldrb	r3, [r7, #3]
 800aeb6:	4619      	mov	r1, r3
 800aeb8:	f7fe fe04 	bl	8009ac4 <USBD_LL_DataOutStage>
}
 800aebc:	bf00      	nop
 800aebe:	3708      	adds	r7, #8
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd80      	pop	{r7, pc}

0800aec4 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b082      	sub	sp, #8
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
 800aecc:	460b      	mov	r3, r1
 800aece:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800aed6:	78fb      	ldrb	r3, [r7, #3]
 800aed8:	687a      	ldr	r2, [r7, #4]
 800aeda:	015b      	lsls	r3, r3, #5
 800aedc:	4413      	add	r3, r2
 800aede:	333c      	adds	r3, #60	; 0x3c
 800aee0:	681a      	ldr	r2, [r3, #0]
 800aee2:	78fb      	ldrb	r3, [r7, #3]
 800aee4:	4619      	mov	r1, r3
 800aee6:	f7fe fe5e 	bl	8009ba6 <USBD_LL_DataInStage>
}
 800aeea:	bf00      	nop
 800aeec:	3708      	adds	r7, #8
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}

0800aef2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aef2:	b580      	push	{r7, lr}
 800aef4:	b082      	sub	sp, #8
 800aef6:	af00      	add	r7, sp, #0
 800aef8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800af00:	4618      	mov	r0, r3
 800af02:	f7fe ff6e 	bl	8009de2 <USBD_LL_SOF>
}
 800af06:	bf00      	nop
 800af08:	3708      	adds	r7, #8
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}

0800af0e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af0e:	b580      	push	{r7, lr}
 800af10:	b084      	sub	sp, #16
 800af12:	af00      	add	r7, sp, #0
 800af14:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800af16:	2301      	movs	r3, #1
 800af18:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	689b      	ldr	r3, [r3, #8]
 800af1e:	2b02      	cmp	r3, #2
 800af20:	d001      	beq.n	800af26 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800af22:	f7f9 f84f 	bl	8003fc4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800af2c:	7bfa      	ldrb	r2, [r7, #15]
 800af2e:	4611      	mov	r1, r2
 800af30:	4618      	mov	r0, r3
 800af32:	f7fe ff1e 	bl	8009d72 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800af3c:	4618      	mov	r0, r3
 800af3e:	f7fe fed7 	bl	8009cf0 <USBD_LL_Reset>
}
 800af42:	bf00      	nop
 800af44:	3710      	adds	r7, #16
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}
	...

0800af4c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b082      	sub	sp, #8
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800af5a:	4618      	mov	r0, r3
 800af5c:	f7fe ff18 	bl	8009d90 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	699b      	ldr	r3, [r3, #24]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d005      	beq.n	800af74 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800af68:	4b04      	ldr	r3, [pc, #16]	; (800af7c <HAL_PCD_SuspendCallback+0x30>)
 800af6a:	691b      	ldr	r3, [r3, #16]
 800af6c:	4a03      	ldr	r2, [pc, #12]	; (800af7c <HAL_PCD_SuspendCallback+0x30>)
 800af6e:	f043 0306 	orr.w	r3, r3, #6
 800af72:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800af74:	bf00      	nop
 800af76:	3708      	adds	r7, #8
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}
 800af7c:	e000ed00 	.word	0xe000ed00

0800af80 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b082      	sub	sp, #8
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800af8e:	4618      	mov	r0, r3
 800af90:	f7fe ff12 	bl	8009db8 <USBD_LL_Resume>
}
 800af94:	bf00      	nop
 800af96:	3708      	adds	r7, #8
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}

0800af9c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b082      	sub	sp, #8
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800afa4:	4a28      	ldr	r2, [pc, #160]	; (800b048 <USBD_LL_Init+0xac>)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	4a26      	ldr	r2, [pc, #152]	; (800b048 <USBD_LL_Init+0xac>)
 800afb0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800afb4:	4b24      	ldr	r3, [pc, #144]	; (800b048 <USBD_LL_Init+0xac>)
 800afb6:	4a25      	ldr	r2, [pc, #148]	; (800b04c <USBD_LL_Init+0xb0>)
 800afb8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800afba:	4b23      	ldr	r3, [pc, #140]	; (800b048 <USBD_LL_Init+0xac>)
 800afbc:	2208      	movs	r2, #8
 800afbe:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800afc0:	4b21      	ldr	r3, [pc, #132]	; (800b048 <USBD_LL_Init+0xac>)
 800afc2:	2202      	movs	r2, #2
 800afc4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800afc6:	4b20      	ldr	r3, [pc, #128]	; (800b048 <USBD_LL_Init+0xac>)
 800afc8:	2200      	movs	r2, #0
 800afca:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800afcc:	4b1e      	ldr	r3, [pc, #120]	; (800b048 <USBD_LL_Init+0xac>)
 800afce:	2200      	movs	r2, #0
 800afd0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800afd2:	4b1d      	ldr	r3, [pc, #116]	; (800b048 <USBD_LL_Init+0xac>)
 800afd4:	2200      	movs	r2, #0
 800afd6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800afd8:	481b      	ldr	r0, [pc, #108]	; (800b048 <USBD_LL_Init+0xac>)
 800afda:	f7fb f941 	bl	8006260 <HAL_PCD_Init>
 800afde:	4603      	mov	r3, r0
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d001      	beq.n	800afe8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800afe4:	f7f8 ffee 	bl	8003fc4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800afee:	2318      	movs	r3, #24
 800aff0:	2200      	movs	r2, #0
 800aff2:	2100      	movs	r1, #0
 800aff4:	f7fb ffda 	bl	8006fac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800affe:	2358      	movs	r3, #88	; 0x58
 800b000:	2200      	movs	r2, #0
 800b002:	2180      	movs	r1, #128	; 0x80
 800b004:	f7fb ffd2 	bl	8006fac <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b00e:	23c0      	movs	r3, #192	; 0xc0
 800b010:	2200      	movs	r2, #0
 800b012:	2181      	movs	r1, #129	; 0x81
 800b014:	f7fb ffca 	bl	8006fac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b01e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b022:	2200      	movs	r2, #0
 800b024:	2101      	movs	r1, #1
 800b026:	f7fb ffc1 	bl	8006fac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b030:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b034:	2200      	movs	r2, #0
 800b036:	2182      	movs	r1, #130	; 0x82
 800b038:	f7fb ffb8 	bl	8006fac <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b03c:	2300      	movs	r3, #0
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3708      	adds	r7, #8
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
 800b046:	bf00      	nop
 800b048:	20001820 	.word	0x20001820
 800b04c:	40005c00 	.word	0x40005c00

0800b050 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b084      	sub	sp, #16
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b058:	2300      	movs	r3, #0
 800b05a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b05c:	2300      	movs	r3, #0
 800b05e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b066:	4618      	mov	r0, r3
 800b068:	f7fb f9db 	bl	8006422 <HAL_PCD_Start>
 800b06c:	4603      	mov	r3, r0
 800b06e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b070:	7bfb      	ldrb	r3, [r7, #15]
 800b072:	4618      	mov	r0, r3
 800b074:	f000 f948 	bl	800b308 <USBD_Get_USB_Status>
 800b078:	4603      	mov	r3, r0
 800b07a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b07c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b07e:	4618      	mov	r0, r3
 800b080:	3710      	adds	r7, #16
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}

0800b086 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b086:	b580      	push	{r7, lr}
 800b088:	b084      	sub	sp, #16
 800b08a:	af00      	add	r7, sp, #0
 800b08c:	6078      	str	r0, [r7, #4]
 800b08e:	4608      	mov	r0, r1
 800b090:	4611      	mov	r1, r2
 800b092:	461a      	mov	r2, r3
 800b094:	4603      	mov	r3, r0
 800b096:	70fb      	strb	r3, [r7, #3]
 800b098:	460b      	mov	r3, r1
 800b09a:	70bb      	strb	r3, [r7, #2]
 800b09c:	4613      	mov	r3, r2
 800b09e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b0ae:	78bb      	ldrb	r3, [r7, #2]
 800b0b0:	883a      	ldrh	r2, [r7, #0]
 800b0b2:	78f9      	ldrb	r1, [r7, #3]
 800b0b4:	f7fb fb0e 	bl	80066d4 <HAL_PCD_EP_Open>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0bc:	7bfb      	ldrb	r3, [r7, #15]
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f000 f922 	bl	800b308 <USBD_Get_USB_Status>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3710      	adds	r7, #16
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}

0800b0d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0d2:	b580      	push	{r7, lr}
 800b0d4:	b084      	sub	sp, #16
 800b0d6:	af00      	add	r7, sp, #0
 800b0d8:	6078      	str	r0, [r7, #4]
 800b0da:	460b      	mov	r3, r1
 800b0dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b0ec:	78fa      	ldrb	r2, [r7, #3]
 800b0ee:	4611      	mov	r1, r2
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f7fb fb4f 	bl	8006794 <HAL_PCD_EP_Close>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0fa:	7bfb      	ldrb	r3, [r7, #15]
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	f000 f903 	bl	800b308 <USBD_Get_USB_Status>
 800b102:	4603      	mov	r3, r0
 800b104:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b106:	7bbb      	ldrb	r3, [r7, #14]
}
 800b108:	4618      	mov	r0, r3
 800b10a:	3710      	adds	r7, #16
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}

0800b110 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b084      	sub	sp, #16
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
 800b118:	460b      	mov	r3, r1
 800b11a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b11c:	2300      	movs	r3, #0
 800b11e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b120:	2300      	movs	r3, #0
 800b122:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b12a:	78fa      	ldrb	r2, [r7, #3]
 800b12c:	4611      	mov	r1, r2
 800b12e:	4618      	mov	r0, r3
 800b130:	f7fb fbf9 	bl	8006926 <HAL_PCD_EP_SetStall>
 800b134:	4603      	mov	r3, r0
 800b136:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b138:	7bfb      	ldrb	r3, [r7, #15]
 800b13a:	4618      	mov	r0, r3
 800b13c:	f000 f8e4 	bl	800b308 <USBD_Get_USB_Status>
 800b140:	4603      	mov	r3, r0
 800b142:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b144:	7bbb      	ldrb	r3, [r7, #14]
}
 800b146:	4618      	mov	r0, r3
 800b148:	3710      	adds	r7, #16
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}

0800b14e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b14e:	b580      	push	{r7, lr}
 800b150:	b084      	sub	sp, #16
 800b152:	af00      	add	r7, sp, #0
 800b154:	6078      	str	r0, [r7, #4]
 800b156:	460b      	mov	r3, r1
 800b158:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b15a:	2300      	movs	r3, #0
 800b15c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b15e:	2300      	movs	r3, #0
 800b160:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b168:	78fa      	ldrb	r2, [r7, #3]
 800b16a:	4611      	mov	r1, r2
 800b16c:	4618      	mov	r0, r3
 800b16e:	f7fb fc34 	bl	80069da <HAL_PCD_EP_ClrStall>
 800b172:	4603      	mov	r3, r0
 800b174:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b176:	7bfb      	ldrb	r3, [r7, #15]
 800b178:	4618      	mov	r0, r3
 800b17a:	f000 f8c5 	bl	800b308 <USBD_Get_USB_Status>
 800b17e:	4603      	mov	r3, r0
 800b180:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b182:	7bbb      	ldrb	r3, [r7, #14]
}
 800b184:	4618      	mov	r0, r3
 800b186:	3710      	adds	r7, #16
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}

0800b18c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b18c:	b480      	push	{r7}
 800b18e:	b085      	sub	sp, #20
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
 800b194:	460b      	mov	r3, r1
 800b196:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b19e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b1a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	da08      	bge.n	800b1ba <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b1a8:	78fb      	ldrb	r3, [r7, #3]
 800b1aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1ae:	68fa      	ldr	r2, [r7, #12]
 800b1b0:	015b      	lsls	r3, r3, #5
 800b1b2:	4413      	add	r3, r2
 800b1b4:	332a      	adds	r3, #42	; 0x2a
 800b1b6:	781b      	ldrb	r3, [r3, #0]
 800b1b8:	e008      	b.n	800b1cc <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b1ba:	78fb      	ldrb	r3, [r7, #3]
 800b1bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1c0:	68fa      	ldr	r2, [r7, #12]
 800b1c2:	015b      	lsls	r3, r3, #5
 800b1c4:	4413      	add	r3, r2
 800b1c6:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800b1ca:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	3714      	adds	r7, #20
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	bc80      	pop	{r7}
 800b1d4:	4770      	bx	lr

0800b1d6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b1d6:	b580      	push	{r7, lr}
 800b1d8:	b084      	sub	sp, #16
 800b1da:	af00      	add	r7, sp, #0
 800b1dc:	6078      	str	r0, [r7, #4]
 800b1de:	460b      	mov	r3, r1
 800b1e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b1f0:	78fa      	ldrb	r2, [r7, #3]
 800b1f2:	4611      	mov	r1, r2
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	f7fb fa48 	bl	800668a <HAL_PCD_SetAddress>
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1fe:	7bfb      	ldrb	r3, [r7, #15]
 800b200:	4618      	mov	r0, r3
 800b202:	f000 f881 	bl	800b308 <USBD_Get_USB_Status>
 800b206:	4603      	mov	r3, r0
 800b208:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b20a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	3710      	adds	r7, #16
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}

0800b214 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b086      	sub	sp, #24
 800b218:	af00      	add	r7, sp, #0
 800b21a:	60f8      	str	r0, [r7, #12]
 800b21c:	607a      	str	r2, [r7, #4]
 800b21e:	461a      	mov	r2, r3
 800b220:	460b      	mov	r3, r1
 800b222:	72fb      	strb	r3, [r7, #11]
 800b224:	4613      	mov	r3, r2
 800b226:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b228:	2300      	movs	r3, #0
 800b22a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b22c:	2300      	movs	r3, #0
 800b22e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b236:	893b      	ldrh	r3, [r7, #8]
 800b238:	7af9      	ldrb	r1, [r7, #11]
 800b23a:	687a      	ldr	r2, [r7, #4]
 800b23c:	f7fb fb3a 	bl	80068b4 <HAL_PCD_EP_Transmit>
 800b240:	4603      	mov	r3, r0
 800b242:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b244:	7dfb      	ldrb	r3, [r7, #23]
 800b246:	4618      	mov	r0, r3
 800b248:	f000 f85e 	bl	800b308 <USBD_Get_USB_Status>
 800b24c:	4603      	mov	r3, r0
 800b24e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b250:	7dbb      	ldrb	r3, [r7, #22]
}
 800b252:	4618      	mov	r0, r3
 800b254:	3718      	adds	r7, #24
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}

0800b25a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b25a:	b580      	push	{r7, lr}
 800b25c:	b086      	sub	sp, #24
 800b25e:	af00      	add	r7, sp, #0
 800b260:	60f8      	str	r0, [r7, #12]
 800b262:	607a      	str	r2, [r7, #4]
 800b264:	461a      	mov	r2, r3
 800b266:	460b      	mov	r3, r1
 800b268:	72fb      	strb	r3, [r7, #11]
 800b26a:	4613      	mov	r3, r2
 800b26c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b26e:	2300      	movs	r3, #0
 800b270:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b272:	2300      	movs	r3, #0
 800b274:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b27c:	893b      	ldrh	r3, [r7, #8]
 800b27e:	7af9      	ldrb	r1, [r7, #11]
 800b280:	687a      	ldr	r2, [r7, #4]
 800b282:	f7fb fac9 	bl	8006818 <HAL_PCD_EP_Receive>
 800b286:	4603      	mov	r3, r0
 800b288:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b28a:	7dfb      	ldrb	r3, [r7, #23]
 800b28c:	4618      	mov	r0, r3
 800b28e:	f000 f83b 	bl	800b308 <USBD_Get_USB_Status>
 800b292:	4603      	mov	r3, r0
 800b294:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b296:	7dbb      	ldrb	r3, [r7, #22]
}
 800b298:	4618      	mov	r0, r3
 800b29a:	3718      	adds	r7, #24
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}

0800b2a0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b082      	sub	sp, #8
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
 800b2a8:	460b      	mov	r3, r1
 800b2aa:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b2b2:	78fa      	ldrb	r2, [r7, #3]
 800b2b4:	4611      	mov	r1, r2
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f7fb fae8 	bl	800688c <HAL_PCD_EP_GetRxCount>
 800b2bc:	4603      	mov	r3, r0
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3708      	adds	r7, #8
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}
	...

0800b2c8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b083      	sub	sp, #12
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b2d0:	4b02      	ldr	r3, [pc, #8]	; (800b2dc <USBD_static_malloc+0x14>)
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	370c      	adds	r7, #12
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bc80      	pop	{r7}
 800b2da:	4770      	bx	lr
 800b2dc:	20000370 	.word	0x20000370

0800b2e0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b2e0:	b480      	push	{r7}
 800b2e2:	b083      	sub	sp, #12
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]

}
 800b2e8:	bf00      	nop
 800b2ea:	370c      	adds	r7, #12
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bc80      	pop	{r7}
 800b2f0:	4770      	bx	lr

0800b2f2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2f2:	b480      	push	{r7}
 800b2f4:	b083      	sub	sp, #12
 800b2f6:	af00      	add	r7, sp, #0
 800b2f8:	6078      	str	r0, [r7, #4]
 800b2fa:	460b      	mov	r3, r1
 800b2fc:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800b2fe:	bf00      	nop
 800b300:	370c      	adds	r7, #12
 800b302:	46bd      	mov	sp, r7
 800b304:	bc80      	pop	{r7}
 800b306:	4770      	bx	lr

0800b308 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b308:	b480      	push	{r7}
 800b30a:	b085      	sub	sp, #20
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	4603      	mov	r3, r0
 800b310:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b312:	2300      	movs	r3, #0
 800b314:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b316:	79fb      	ldrb	r3, [r7, #7]
 800b318:	2b03      	cmp	r3, #3
 800b31a:	d817      	bhi.n	800b34c <USBD_Get_USB_Status+0x44>
 800b31c:	a201      	add	r2, pc, #4	; (adr r2, 800b324 <USBD_Get_USB_Status+0x1c>)
 800b31e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b322:	bf00      	nop
 800b324:	0800b335 	.word	0x0800b335
 800b328:	0800b33b 	.word	0x0800b33b
 800b32c:	0800b341 	.word	0x0800b341
 800b330:	0800b347 	.word	0x0800b347
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b334:	2300      	movs	r3, #0
 800b336:	73fb      	strb	r3, [r7, #15]
    break;
 800b338:	e00b      	b.n	800b352 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b33a:	2302      	movs	r3, #2
 800b33c:	73fb      	strb	r3, [r7, #15]
    break;
 800b33e:	e008      	b.n	800b352 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b340:	2301      	movs	r3, #1
 800b342:	73fb      	strb	r3, [r7, #15]
    break;
 800b344:	e005      	b.n	800b352 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b346:	2302      	movs	r3, #2
 800b348:	73fb      	strb	r3, [r7, #15]
    break;
 800b34a:	e002      	b.n	800b352 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b34c:	2302      	movs	r3, #2
 800b34e:	73fb      	strb	r3, [r7, #15]
    break;
 800b350:	bf00      	nop
  }
  return usb_status;
 800b352:	7bfb      	ldrb	r3, [r7, #15]
}
 800b354:	4618      	mov	r0, r3
 800b356:	3714      	adds	r7, #20
 800b358:	46bd      	mov	sp, r7
 800b35a:	bc80      	pop	{r7}
 800b35c:	4770      	bx	lr
 800b35e:	bf00      	nop

0800b360 <__errno>:
 800b360:	4b01      	ldr	r3, [pc, #4]	; (800b368 <__errno+0x8>)
 800b362:	6818      	ldr	r0, [r3, #0]
 800b364:	4770      	bx	lr
 800b366:	bf00      	nop
 800b368:	2000017c 	.word	0x2000017c

0800b36c <__libc_init_array>:
 800b36c:	b570      	push	{r4, r5, r6, lr}
 800b36e:	2500      	movs	r5, #0
 800b370:	4e0c      	ldr	r6, [pc, #48]	; (800b3a4 <__libc_init_array+0x38>)
 800b372:	4c0d      	ldr	r4, [pc, #52]	; (800b3a8 <__libc_init_array+0x3c>)
 800b374:	1ba4      	subs	r4, r4, r6
 800b376:	10a4      	asrs	r4, r4, #2
 800b378:	42a5      	cmp	r5, r4
 800b37a:	d109      	bne.n	800b390 <__libc_init_array+0x24>
 800b37c:	f000 fe04 	bl	800bf88 <_init>
 800b380:	2500      	movs	r5, #0
 800b382:	4e0a      	ldr	r6, [pc, #40]	; (800b3ac <__libc_init_array+0x40>)
 800b384:	4c0a      	ldr	r4, [pc, #40]	; (800b3b0 <__libc_init_array+0x44>)
 800b386:	1ba4      	subs	r4, r4, r6
 800b388:	10a4      	asrs	r4, r4, #2
 800b38a:	42a5      	cmp	r5, r4
 800b38c:	d105      	bne.n	800b39a <__libc_init_array+0x2e>
 800b38e:	bd70      	pop	{r4, r5, r6, pc}
 800b390:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b394:	4798      	blx	r3
 800b396:	3501      	adds	r5, #1
 800b398:	e7ee      	b.n	800b378 <__libc_init_array+0xc>
 800b39a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b39e:	4798      	blx	r3
 800b3a0:	3501      	adds	r5, #1
 800b3a2:	e7f2      	b.n	800b38a <__libc_init_array+0x1e>
 800b3a4:	0800c5b0 	.word	0x0800c5b0
 800b3a8:	0800c5b0 	.word	0x0800c5b0
 800b3ac:	0800c5b0 	.word	0x0800c5b0
 800b3b0:	0800c5b4 	.word	0x0800c5b4

0800b3b4 <memcpy>:
 800b3b4:	b510      	push	{r4, lr}
 800b3b6:	1e43      	subs	r3, r0, #1
 800b3b8:	440a      	add	r2, r1
 800b3ba:	4291      	cmp	r1, r2
 800b3bc:	d100      	bne.n	800b3c0 <memcpy+0xc>
 800b3be:	bd10      	pop	{r4, pc}
 800b3c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b3c8:	e7f7      	b.n	800b3ba <memcpy+0x6>

0800b3ca <memset>:
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	4402      	add	r2, r0
 800b3ce:	4293      	cmp	r3, r2
 800b3d0:	d100      	bne.n	800b3d4 <memset+0xa>
 800b3d2:	4770      	bx	lr
 800b3d4:	f803 1b01 	strb.w	r1, [r3], #1
 800b3d8:	e7f9      	b.n	800b3ce <memset+0x4>
	...

0800b3dc <siscanf>:
 800b3dc:	b40e      	push	{r1, r2, r3}
 800b3de:	f44f 7201 	mov.w	r2, #516	; 0x204
 800b3e2:	b530      	push	{r4, r5, lr}
 800b3e4:	b09c      	sub	sp, #112	; 0x70
 800b3e6:	ac1f      	add	r4, sp, #124	; 0x7c
 800b3e8:	f854 5b04 	ldr.w	r5, [r4], #4
 800b3ec:	f8ad 2014 	strh.w	r2, [sp, #20]
 800b3f0:	9002      	str	r0, [sp, #8]
 800b3f2:	9006      	str	r0, [sp, #24]
 800b3f4:	f7f4 feac 	bl	8000150 <strlen>
 800b3f8:	4b0b      	ldr	r3, [pc, #44]	; (800b428 <siscanf+0x4c>)
 800b3fa:	9003      	str	r0, [sp, #12]
 800b3fc:	930b      	str	r3, [sp, #44]	; 0x2c
 800b3fe:	2300      	movs	r3, #0
 800b400:	930f      	str	r3, [sp, #60]	; 0x3c
 800b402:	9314      	str	r3, [sp, #80]	; 0x50
 800b404:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b408:	9007      	str	r0, [sp, #28]
 800b40a:	4808      	ldr	r0, [pc, #32]	; (800b42c <siscanf+0x50>)
 800b40c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b410:	462a      	mov	r2, r5
 800b412:	4623      	mov	r3, r4
 800b414:	a902      	add	r1, sp, #8
 800b416:	6800      	ldr	r0, [r0, #0]
 800b418:	9401      	str	r4, [sp, #4]
 800b41a:	f000 f865 	bl	800b4e8 <__ssvfiscanf_r>
 800b41e:	b01c      	add	sp, #112	; 0x70
 800b420:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b424:	b003      	add	sp, #12
 800b426:	4770      	bx	lr
 800b428:	0800b431 	.word	0x0800b431
 800b42c:	2000017c 	.word	0x2000017c

0800b430 <__seofread>:
 800b430:	2000      	movs	r0, #0
 800b432:	4770      	bx	lr

0800b434 <_sungetc_r>:
 800b434:	b538      	push	{r3, r4, r5, lr}
 800b436:	1c4b      	adds	r3, r1, #1
 800b438:	4614      	mov	r4, r2
 800b43a:	d103      	bne.n	800b444 <_sungetc_r+0x10>
 800b43c:	f04f 35ff 	mov.w	r5, #4294967295
 800b440:	4628      	mov	r0, r5
 800b442:	bd38      	pop	{r3, r4, r5, pc}
 800b444:	8993      	ldrh	r3, [r2, #12]
 800b446:	b2cd      	uxtb	r5, r1
 800b448:	f023 0320 	bic.w	r3, r3, #32
 800b44c:	8193      	strh	r3, [r2, #12]
 800b44e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b450:	6852      	ldr	r2, [r2, #4]
 800b452:	b18b      	cbz	r3, 800b478 <_sungetc_r+0x44>
 800b454:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b456:	4293      	cmp	r3, r2
 800b458:	dd08      	ble.n	800b46c <_sungetc_r+0x38>
 800b45a:	6823      	ldr	r3, [r4, #0]
 800b45c:	1e5a      	subs	r2, r3, #1
 800b45e:	6022      	str	r2, [r4, #0]
 800b460:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b464:	6863      	ldr	r3, [r4, #4]
 800b466:	3301      	adds	r3, #1
 800b468:	6063      	str	r3, [r4, #4]
 800b46a:	e7e9      	b.n	800b440 <_sungetc_r+0xc>
 800b46c:	4621      	mov	r1, r4
 800b46e:	f000 fc2d 	bl	800bccc <__submore>
 800b472:	2800      	cmp	r0, #0
 800b474:	d0f1      	beq.n	800b45a <_sungetc_r+0x26>
 800b476:	e7e1      	b.n	800b43c <_sungetc_r+0x8>
 800b478:	6921      	ldr	r1, [r4, #16]
 800b47a:	6823      	ldr	r3, [r4, #0]
 800b47c:	b151      	cbz	r1, 800b494 <_sungetc_r+0x60>
 800b47e:	4299      	cmp	r1, r3
 800b480:	d208      	bcs.n	800b494 <_sungetc_r+0x60>
 800b482:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b486:	42a9      	cmp	r1, r5
 800b488:	d104      	bne.n	800b494 <_sungetc_r+0x60>
 800b48a:	3b01      	subs	r3, #1
 800b48c:	3201      	adds	r2, #1
 800b48e:	6023      	str	r3, [r4, #0]
 800b490:	6062      	str	r2, [r4, #4]
 800b492:	e7d5      	b.n	800b440 <_sungetc_r+0xc>
 800b494:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b498:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b49c:	6363      	str	r3, [r4, #52]	; 0x34
 800b49e:	2303      	movs	r3, #3
 800b4a0:	63a3      	str	r3, [r4, #56]	; 0x38
 800b4a2:	4623      	mov	r3, r4
 800b4a4:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b4a8:	6023      	str	r3, [r4, #0]
 800b4aa:	2301      	movs	r3, #1
 800b4ac:	e7dc      	b.n	800b468 <_sungetc_r+0x34>

0800b4ae <__ssrefill_r>:
 800b4ae:	b510      	push	{r4, lr}
 800b4b0:	460c      	mov	r4, r1
 800b4b2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b4b4:	b169      	cbz	r1, 800b4d2 <__ssrefill_r+0x24>
 800b4b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b4ba:	4299      	cmp	r1, r3
 800b4bc:	d001      	beq.n	800b4c2 <__ssrefill_r+0x14>
 800b4be:	f000 fc6f 	bl	800bda0 <_free_r>
 800b4c2:	2000      	movs	r0, #0
 800b4c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b4c6:	6360      	str	r0, [r4, #52]	; 0x34
 800b4c8:	6063      	str	r3, [r4, #4]
 800b4ca:	b113      	cbz	r3, 800b4d2 <__ssrefill_r+0x24>
 800b4cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b4ce:	6023      	str	r3, [r4, #0]
 800b4d0:	bd10      	pop	{r4, pc}
 800b4d2:	6923      	ldr	r3, [r4, #16]
 800b4d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b4d8:	6023      	str	r3, [r4, #0]
 800b4da:	2300      	movs	r3, #0
 800b4dc:	6063      	str	r3, [r4, #4]
 800b4de:	89a3      	ldrh	r3, [r4, #12]
 800b4e0:	f043 0320 	orr.w	r3, r3, #32
 800b4e4:	81a3      	strh	r3, [r4, #12]
 800b4e6:	e7f3      	b.n	800b4d0 <__ssrefill_r+0x22>

0800b4e8 <__ssvfiscanf_r>:
 800b4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4ec:	460c      	mov	r4, r1
 800b4ee:	2100      	movs	r1, #0
 800b4f0:	4606      	mov	r6, r0
 800b4f2:	4692      	mov	sl, r2
 800b4f4:	270a      	movs	r7, #10
 800b4f6:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800b4fa:	9144      	str	r1, [sp, #272]	; 0x110
 800b4fc:	9145      	str	r1, [sp, #276]	; 0x114
 800b4fe:	499e      	ldr	r1, [pc, #632]	; (800b778 <__ssvfiscanf_r+0x290>)
 800b500:	f10d 0804 	add.w	r8, sp, #4
 800b504:	91a0      	str	r1, [sp, #640]	; 0x280
 800b506:	499d      	ldr	r1, [pc, #628]	; (800b77c <__ssvfiscanf_r+0x294>)
 800b508:	f8df 9274 	ldr.w	r9, [pc, #628]	; 800b780 <__ssvfiscanf_r+0x298>
 800b50c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800b510:	91a1      	str	r1, [sp, #644]	; 0x284
 800b512:	9300      	str	r3, [sp, #0]
 800b514:	f89a 3000 	ldrb.w	r3, [sl]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	f000 812a 	beq.w	800b772 <__ssvfiscanf_r+0x28a>
 800b51e:	4655      	mov	r5, sl
 800b520:	f000 fc10 	bl	800bd44 <__locale_ctype_ptr>
 800b524:	f815 bb01 	ldrb.w	fp, [r5], #1
 800b528:	4458      	add	r0, fp
 800b52a:	7843      	ldrb	r3, [r0, #1]
 800b52c:	f013 0308 	ands.w	r3, r3, #8
 800b530:	d01c      	beq.n	800b56c <__ssvfiscanf_r+0x84>
 800b532:	6863      	ldr	r3, [r4, #4]
 800b534:	2b00      	cmp	r3, #0
 800b536:	dd12      	ble.n	800b55e <__ssvfiscanf_r+0x76>
 800b538:	f000 fc04 	bl	800bd44 <__locale_ctype_ptr>
 800b53c:	6823      	ldr	r3, [r4, #0]
 800b53e:	781a      	ldrb	r2, [r3, #0]
 800b540:	4410      	add	r0, r2
 800b542:	7842      	ldrb	r2, [r0, #1]
 800b544:	0712      	lsls	r2, r2, #28
 800b546:	d401      	bmi.n	800b54c <__ssvfiscanf_r+0x64>
 800b548:	46aa      	mov	sl, r5
 800b54a:	e7e3      	b.n	800b514 <__ssvfiscanf_r+0x2c>
 800b54c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b54e:	3301      	adds	r3, #1
 800b550:	3201      	adds	r2, #1
 800b552:	9245      	str	r2, [sp, #276]	; 0x114
 800b554:	6862      	ldr	r2, [r4, #4]
 800b556:	6023      	str	r3, [r4, #0]
 800b558:	3a01      	subs	r2, #1
 800b55a:	6062      	str	r2, [r4, #4]
 800b55c:	e7e9      	b.n	800b532 <__ssvfiscanf_r+0x4a>
 800b55e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b560:	4621      	mov	r1, r4
 800b562:	4630      	mov	r0, r6
 800b564:	4798      	blx	r3
 800b566:	2800      	cmp	r0, #0
 800b568:	d0e6      	beq.n	800b538 <__ssvfiscanf_r+0x50>
 800b56a:	e7ed      	b.n	800b548 <__ssvfiscanf_r+0x60>
 800b56c:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800b570:	f040 8082 	bne.w	800b678 <__ssvfiscanf_r+0x190>
 800b574:	9343      	str	r3, [sp, #268]	; 0x10c
 800b576:	9341      	str	r3, [sp, #260]	; 0x104
 800b578:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800b57c:	2b2a      	cmp	r3, #42	; 0x2a
 800b57e:	d103      	bne.n	800b588 <__ssvfiscanf_r+0xa0>
 800b580:	2310      	movs	r3, #16
 800b582:	f10a 0502 	add.w	r5, sl, #2
 800b586:	9341      	str	r3, [sp, #260]	; 0x104
 800b588:	46aa      	mov	sl, r5
 800b58a:	f815 1b01 	ldrb.w	r1, [r5], #1
 800b58e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800b592:	2a09      	cmp	r2, #9
 800b594:	d922      	bls.n	800b5dc <__ssvfiscanf_r+0xf4>
 800b596:	2203      	movs	r2, #3
 800b598:	4879      	ldr	r0, [pc, #484]	; (800b780 <__ssvfiscanf_r+0x298>)
 800b59a:	f000 fbf3 	bl	800bd84 <memchr>
 800b59e:	b138      	cbz	r0, 800b5b0 <__ssvfiscanf_r+0xc8>
 800b5a0:	eba0 0309 	sub.w	r3, r0, r9
 800b5a4:	2001      	movs	r0, #1
 800b5a6:	46aa      	mov	sl, r5
 800b5a8:	4098      	lsls	r0, r3
 800b5aa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b5ac:	4318      	orrs	r0, r3
 800b5ae:	9041      	str	r0, [sp, #260]	; 0x104
 800b5b0:	f89a 3000 	ldrb.w	r3, [sl]
 800b5b4:	f10a 0501 	add.w	r5, sl, #1
 800b5b8:	2b67      	cmp	r3, #103	; 0x67
 800b5ba:	d82b      	bhi.n	800b614 <__ssvfiscanf_r+0x12c>
 800b5bc:	2b65      	cmp	r3, #101	; 0x65
 800b5be:	f080 809f 	bcs.w	800b700 <__ssvfiscanf_r+0x218>
 800b5c2:	2b47      	cmp	r3, #71	; 0x47
 800b5c4:	d810      	bhi.n	800b5e8 <__ssvfiscanf_r+0x100>
 800b5c6:	2b45      	cmp	r3, #69	; 0x45
 800b5c8:	f080 809a 	bcs.w	800b700 <__ssvfiscanf_r+0x218>
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d06c      	beq.n	800b6aa <__ssvfiscanf_r+0x1c2>
 800b5d0:	2b25      	cmp	r3, #37	; 0x25
 800b5d2:	d051      	beq.n	800b678 <__ssvfiscanf_r+0x190>
 800b5d4:	2303      	movs	r3, #3
 800b5d6:	9742      	str	r7, [sp, #264]	; 0x108
 800b5d8:	9347      	str	r3, [sp, #284]	; 0x11c
 800b5da:	e027      	b.n	800b62c <__ssvfiscanf_r+0x144>
 800b5dc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b5de:	fb07 1303 	mla	r3, r7, r3, r1
 800b5e2:	3b30      	subs	r3, #48	; 0x30
 800b5e4:	9343      	str	r3, [sp, #268]	; 0x10c
 800b5e6:	e7cf      	b.n	800b588 <__ssvfiscanf_r+0xa0>
 800b5e8:	2b5b      	cmp	r3, #91	; 0x5b
 800b5ea:	d06a      	beq.n	800b6c2 <__ssvfiscanf_r+0x1da>
 800b5ec:	d80c      	bhi.n	800b608 <__ssvfiscanf_r+0x120>
 800b5ee:	2b58      	cmp	r3, #88	; 0x58
 800b5f0:	d1f0      	bne.n	800b5d4 <__ssvfiscanf_r+0xec>
 800b5f2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b5f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b5f8:	9241      	str	r2, [sp, #260]	; 0x104
 800b5fa:	2210      	movs	r2, #16
 800b5fc:	9242      	str	r2, [sp, #264]	; 0x108
 800b5fe:	2b6e      	cmp	r3, #110	; 0x6e
 800b600:	bf8c      	ite	hi
 800b602:	2304      	movhi	r3, #4
 800b604:	2303      	movls	r3, #3
 800b606:	e010      	b.n	800b62a <__ssvfiscanf_r+0x142>
 800b608:	2b63      	cmp	r3, #99	; 0x63
 800b60a:	d065      	beq.n	800b6d8 <__ssvfiscanf_r+0x1f0>
 800b60c:	2b64      	cmp	r3, #100	; 0x64
 800b60e:	d1e1      	bne.n	800b5d4 <__ssvfiscanf_r+0xec>
 800b610:	9742      	str	r7, [sp, #264]	; 0x108
 800b612:	e7f4      	b.n	800b5fe <__ssvfiscanf_r+0x116>
 800b614:	2b70      	cmp	r3, #112	; 0x70
 800b616:	d04b      	beq.n	800b6b0 <__ssvfiscanf_r+0x1c8>
 800b618:	d826      	bhi.n	800b668 <__ssvfiscanf_r+0x180>
 800b61a:	2b6e      	cmp	r3, #110	; 0x6e
 800b61c:	d062      	beq.n	800b6e4 <__ssvfiscanf_r+0x1fc>
 800b61e:	d84c      	bhi.n	800b6ba <__ssvfiscanf_r+0x1d2>
 800b620:	2b69      	cmp	r3, #105	; 0x69
 800b622:	d1d7      	bne.n	800b5d4 <__ssvfiscanf_r+0xec>
 800b624:	2300      	movs	r3, #0
 800b626:	9342      	str	r3, [sp, #264]	; 0x108
 800b628:	2303      	movs	r3, #3
 800b62a:	9347      	str	r3, [sp, #284]	; 0x11c
 800b62c:	6863      	ldr	r3, [r4, #4]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	dd68      	ble.n	800b704 <__ssvfiscanf_r+0x21c>
 800b632:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b634:	0659      	lsls	r1, r3, #25
 800b636:	d407      	bmi.n	800b648 <__ssvfiscanf_r+0x160>
 800b638:	f000 fb84 	bl	800bd44 <__locale_ctype_ptr>
 800b63c:	6823      	ldr	r3, [r4, #0]
 800b63e:	781a      	ldrb	r2, [r3, #0]
 800b640:	4410      	add	r0, r2
 800b642:	7842      	ldrb	r2, [r0, #1]
 800b644:	0712      	lsls	r2, r2, #28
 800b646:	d464      	bmi.n	800b712 <__ssvfiscanf_r+0x22a>
 800b648:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b64a:	2b02      	cmp	r3, #2
 800b64c:	dc73      	bgt.n	800b736 <__ssvfiscanf_r+0x24e>
 800b64e:	466b      	mov	r3, sp
 800b650:	4622      	mov	r2, r4
 800b652:	a941      	add	r1, sp, #260	; 0x104
 800b654:	4630      	mov	r0, r6
 800b656:	f000 f897 	bl	800b788 <_scanf_chars>
 800b65a:	2801      	cmp	r0, #1
 800b65c:	f000 8089 	beq.w	800b772 <__ssvfiscanf_r+0x28a>
 800b660:	2802      	cmp	r0, #2
 800b662:	f47f af71 	bne.w	800b548 <__ssvfiscanf_r+0x60>
 800b666:	e01d      	b.n	800b6a4 <__ssvfiscanf_r+0x1bc>
 800b668:	2b75      	cmp	r3, #117	; 0x75
 800b66a:	d0d1      	beq.n	800b610 <__ssvfiscanf_r+0x128>
 800b66c:	2b78      	cmp	r3, #120	; 0x78
 800b66e:	d0c0      	beq.n	800b5f2 <__ssvfiscanf_r+0x10a>
 800b670:	2b73      	cmp	r3, #115	; 0x73
 800b672:	d1af      	bne.n	800b5d4 <__ssvfiscanf_r+0xec>
 800b674:	2302      	movs	r3, #2
 800b676:	e7d8      	b.n	800b62a <__ssvfiscanf_r+0x142>
 800b678:	6863      	ldr	r3, [r4, #4]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	dd0c      	ble.n	800b698 <__ssvfiscanf_r+0x1b0>
 800b67e:	6823      	ldr	r3, [r4, #0]
 800b680:	781a      	ldrb	r2, [r3, #0]
 800b682:	455a      	cmp	r2, fp
 800b684:	d175      	bne.n	800b772 <__ssvfiscanf_r+0x28a>
 800b686:	3301      	adds	r3, #1
 800b688:	6862      	ldr	r2, [r4, #4]
 800b68a:	6023      	str	r3, [r4, #0]
 800b68c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800b68e:	3a01      	subs	r2, #1
 800b690:	3301      	adds	r3, #1
 800b692:	6062      	str	r2, [r4, #4]
 800b694:	9345      	str	r3, [sp, #276]	; 0x114
 800b696:	e757      	b.n	800b548 <__ssvfiscanf_r+0x60>
 800b698:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b69a:	4621      	mov	r1, r4
 800b69c:	4630      	mov	r0, r6
 800b69e:	4798      	blx	r3
 800b6a0:	2800      	cmp	r0, #0
 800b6a2:	d0ec      	beq.n	800b67e <__ssvfiscanf_r+0x196>
 800b6a4:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b6a6:	2800      	cmp	r0, #0
 800b6a8:	d159      	bne.n	800b75e <__ssvfiscanf_r+0x276>
 800b6aa:	f04f 30ff 	mov.w	r0, #4294967295
 800b6ae:	e05c      	b.n	800b76a <__ssvfiscanf_r+0x282>
 800b6b0:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b6b2:	f042 0220 	orr.w	r2, r2, #32
 800b6b6:	9241      	str	r2, [sp, #260]	; 0x104
 800b6b8:	e79b      	b.n	800b5f2 <__ssvfiscanf_r+0x10a>
 800b6ba:	2308      	movs	r3, #8
 800b6bc:	9342      	str	r3, [sp, #264]	; 0x108
 800b6be:	2304      	movs	r3, #4
 800b6c0:	e7b3      	b.n	800b62a <__ssvfiscanf_r+0x142>
 800b6c2:	4629      	mov	r1, r5
 800b6c4:	4640      	mov	r0, r8
 800b6c6:	f000 f9b7 	bl	800ba38 <__sccl>
 800b6ca:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b6cc:	4605      	mov	r5, r0
 800b6ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6d2:	9341      	str	r3, [sp, #260]	; 0x104
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	e7a8      	b.n	800b62a <__ssvfiscanf_r+0x142>
 800b6d8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b6da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6de:	9341      	str	r3, [sp, #260]	; 0x104
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	e7a2      	b.n	800b62a <__ssvfiscanf_r+0x142>
 800b6e4:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b6e6:	06c3      	lsls	r3, r0, #27
 800b6e8:	f53f af2e 	bmi.w	800b548 <__ssvfiscanf_r+0x60>
 800b6ec:	9b00      	ldr	r3, [sp, #0]
 800b6ee:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b6f0:	1d19      	adds	r1, r3, #4
 800b6f2:	9100      	str	r1, [sp, #0]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	07c0      	lsls	r0, r0, #31
 800b6f8:	bf4c      	ite	mi
 800b6fa:	801a      	strhmi	r2, [r3, #0]
 800b6fc:	601a      	strpl	r2, [r3, #0]
 800b6fe:	e723      	b.n	800b548 <__ssvfiscanf_r+0x60>
 800b700:	2305      	movs	r3, #5
 800b702:	e792      	b.n	800b62a <__ssvfiscanf_r+0x142>
 800b704:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b706:	4621      	mov	r1, r4
 800b708:	4630      	mov	r0, r6
 800b70a:	4798      	blx	r3
 800b70c:	2800      	cmp	r0, #0
 800b70e:	d090      	beq.n	800b632 <__ssvfiscanf_r+0x14a>
 800b710:	e7c8      	b.n	800b6a4 <__ssvfiscanf_r+0x1bc>
 800b712:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b714:	3201      	adds	r2, #1
 800b716:	9245      	str	r2, [sp, #276]	; 0x114
 800b718:	6862      	ldr	r2, [r4, #4]
 800b71a:	3a01      	subs	r2, #1
 800b71c:	2a00      	cmp	r2, #0
 800b71e:	6062      	str	r2, [r4, #4]
 800b720:	dd02      	ble.n	800b728 <__ssvfiscanf_r+0x240>
 800b722:	3301      	adds	r3, #1
 800b724:	6023      	str	r3, [r4, #0]
 800b726:	e787      	b.n	800b638 <__ssvfiscanf_r+0x150>
 800b728:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b72a:	4621      	mov	r1, r4
 800b72c:	4630      	mov	r0, r6
 800b72e:	4798      	blx	r3
 800b730:	2800      	cmp	r0, #0
 800b732:	d081      	beq.n	800b638 <__ssvfiscanf_r+0x150>
 800b734:	e7b6      	b.n	800b6a4 <__ssvfiscanf_r+0x1bc>
 800b736:	2b04      	cmp	r3, #4
 800b738:	dc06      	bgt.n	800b748 <__ssvfiscanf_r+0x260>
 800b73a:	466b      	mov	r3, sp
 800b73c:	4622      	mov	r2, r4
 800b73e:	a941      	add	r1, sp, #260	; 0x104
 800b740:	4630      	mov	r0, r6
 800b742:	f000 f883 	bl	800b84c <_scanf_i>
 800b746:	e788      	b.n	800b65a <__ssvfiscanf_r+0x172>
 800b748:	4b0e      	ldr	r3, [pc, #56]	; (800b784 <__ssvfiscanf_r+0x29c>)
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	f43f aefc 	beq.w	800b548 <__ssvfiscanf_r+0x60>
 800b750:	466b      	mov	r3, sp
 800b752:	4622      	mov	r2, r4
 800b754:	a941      	add	r1, sp, #260	; 0x104
 800b756:	4630      	mov	r0, r6
 800b758:	f3af 8000 	nop.w
 800b75c:	e77d      	b.n	800b65a <__ssvfiscanf_r+0x172>
 800b75e:	89a3      	ldrh	r3, [r4, #12]
 800b760:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b764:	bf18      	it	ne
 800b766:	f04f 30ff 	movne.w	r0, #4294967295
 800b76a:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800b76e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b772:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b774:	e7f9      	b.n	800b76a <__ssvfiscanf_r+0x282>
 800b776:	bf00      	nop
 800b778:	0800b435 	.word	0x0800b435
 800b77c:	0800b4af 	.word	0x0800b4af
 800b780:	0800c424 	.word	0x0800c424
 800b784:	00000000 	.word	0x00000000

0800b788 <_scanf_chars>:
 800b788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b78c:	4615      	mov	r5, r2
 800b78e:	688a      	ldr	r2, [r1, #8]
 800b790:	4680      	mov	r8, r0
 800b792:	460c      	mov	r4, r1
 800b794:	b932      	cbnz	r2, 800b7a4 <_scanf_chars+0x1c>
 800b796:	698a      	ldr	r2, [r1, #24]
 800b798:	2a00      	cmp	r2, #0
 800b79a:	bf14      	ite	ne
 800b79c:	f04f 32ff 	movne.w	r2, #4294967295
 800b7a0:	2201      	moveq	r2, #1
 800b7a2:	608a      	str	r2, [r1, #8]
 800b7a4:	2600      	movs	r6, #0
 800b7a6:	6822      	ldr	r2, [r4, #0]
 800b7a8:	06d1      	lsls	r1, r2, #27
 800b7aa:	bf5f      	itttt	pl
 800b7ac:	681a      	ldrpl	r2, [r3, #0]
 800b7ae:	1d11      	addpl	r1, r2, #4
 800b7b0:	6019      	strpl	r1, [r3, #0]
 800b7b2:	6817      	ldrpl	r7, [r2, #0]
 800b7b4:	69a3      	ldr	r3, [r4, #24]
 800b7b6:	b1db      	cbz	r3, 800b7f0 <_scanf_chars+0x68>
 800b7b8:	2b01      	cmp	r3, #1
 800b7ba:	d107      	bne.n	800b7cc <_scanf_chars+0x44>
 800b7bc:	682b      	ldr	r3, [r5, #0]
 800b7be:	6962      	ldr	r2, [r4, #20]
 800b7c0:	781b      	ldrb	r3, [r3, #0]
 800b7c2:	5cd3      	ldrb	r3, [r2, r3]
 800b7c4:	b9a3      	cbnz	r3, 800b7f0 <_scanf_chars+0x68>
 800b7c6:	2e00      	cmp	r6, #0
 800b7c8:	d131      	bne.n	800b82e <_scanf_chars+0xa6>
 800b7ca:	e006      	b.n	800b7da <_scanf_chars+0x52>
 800b7cc:	2b02      	cmp	r3, #2
 800b7ce:	d007      	beq.n	800b7e0 <_scanf_chars+0x58>
 800b7d0:	2e00      	cmp	r6, #0
 800b7d2:	d12c      	bne.n	800b82e <_scanf_chars+0xa6>
 800b7d4:	69a3      	ldr	r3, [r4, #24]
 800b7d6:	2b01      	cmp	r3, #1
 800b7d8:	d129      	bne.n	800b82e <_scanf_chars+0xa6>
 800b7da:	2001      	movs	r0, #1
 800b7dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7e0:	f000 fab0 	bl	800bd44 <__locale_ctype_ptr>
 800b7e4:	682b      	ldr	r3, [r5, #0]
 800b7e6:	781b      	ldrb	r3, [r3, #0]
 800b7e8:	4418      	add	r0, r3
 800b7ea:	7843      	ldrb	r3, [r0, #1]
 800b7ec:	071b      	lsls	r3, r3, #28
 800b7ee:	d4ef      	bmi.n	800b7d0 <_scanf_chars+0x48>
 800b7f0:	6823      	ldr	r3, [r4, #0]
 800b7f2:	3601      	adds	r6, #1
 800b7f4:	06da      	lsls	r2, r3, #27
 800b7f6:	bf5e      	ittt	pl
 800b7f8:	682b      	ldrpl	r3, [r5, #0]
 800b7fa:	781b      	ldrbpl	r3, [r3, #0]
 800b7fc:	703b      	strbpl	r3, [r7, #0]
 800b7fe:	682a      	ldr	r2, [r5, #0]
 800b800:	686b      	ldr	r3, [r5, #4]
 800b802:	f102 0201 	add.w	r2, r2, #1
 800b806:	602a      	str	r2, [r5, #0]
 800b808:	68a2      	ldr	r2, [r4, #8]
 800b80a:	f103 33ff 	add.w	r3, r3, #4294967295
 800b80e:	f102 32ff 	add.w	r2, r2, #4294967295
 800b812:	606b      	str	r3, [r5, #4]
 800b814:	bf58      	it	pl
 800b816:	3701      	addpl	r7, #1
 800b818:	60a2      	str	r2, [r4, #8]
 800b81a:	b142      	cbz	r2, 800b82e <_scanf_chars+0xa6>
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	dcc9      	bgt.n	800b7b4 <_scanf_chars+0x2c>
 800b820:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b824:	4629      	mov	r1, r5
 800b826:	4640      	mov	r0, r8
 800b828:	4798      	blx	r3
 800b82a:	2800      	cmp	r0, #0
 800b82c:	d0c2      	beq.n	800b7b4 <_scanf_chars+0x2c>
 800b82e:	6823      	ldr	r3, [r4, #0]
 800b830:	f013 0310 	ands.w	r3, r3, #16
 800b834:	d105      	bne.n	800b842 <_scanf_chars+0xba>
 800b836:	68e2      	ldr	r2, [r4, #12]
 800b838:	3201      	adds	r2, #1
 800b83a:	60e2      	str	r2, [r4, #12]
 800b83c:	69a2      	ldr	r2, [r4, #24]
 800b83e:	b102      	cbz	r2, 800b842 <_scanf_chars+0xba>
 800b840:	703b      	strb	r3, [r7, #0]
 800b842:	6923      	ldr	r3, [r4, #16]
 800b844:	2000      	movs	r0, #0
 800b846:	441e      	add	r6, r3
 800b848:	6126      	str	r6, [r4, #16]
 800b84a:	e7c7      	b.n	800b7dc <_scanf_chars+0x54>

0800b84c <_scanf_i>:
 800b84c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b850:	460c      	mov	r4, r1
 800b852:	469a      	mov	sl, r3
 800b854:	4b74      	ldr	r3, [pc, #464]	; (800ba28 <_scanf_i+0x1dc>)
 800b856:	b087      	sub	sp, #28
 800b858:	4683      	mov	fp, r0
 800b85a:	4616      	mov	r6, r2
 800b85c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b860:	ab03      	add	r3, sp, #12
 800b862:	68a7      	ldr	r7, [r4, #8]
 800b864:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b868:	4b70      	ldr	r3, [pc, #448]	; (800ba2c <_scanf_i+0x1e0>)
 800b86a:	69a1      	ldr	r1, [r4, #24]
 800b86c:	4a70      	ldr	r2, [pc, #448]	; (800ba30 <_scanf_i+0x1e4>)
 800b86e:	f104 091c 	add.w	r9, r4, #28
 800b872:	2903      	cmp	r1, #3
 800b874:	bf08      	it	eq
 800b876:	461a      	moveq	r2, r3
 800b878:	1e7b      	subs	r3, r7, #1
 800b87a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800b87e:	bf84      	itt	hi
 800b880:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b884:	60a3      	strhi	r3, [r4, #8]
 800b886:	6823      	ldr	r3, [r4, #0]
 800b888:	bf88      	it	hi
 800b88a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b88e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b892:	6023      	str	r3, [r4, #0]
 800b894:	bf98      	it	ls
 800b896:	2700      	movls	r7, #0
 800b898:	464b      	mov	r3, r9
 800b89a:	f04f 0800 	mov.w	r8, #0
 800b89e:	9200      	str	r2, [sp, #0]
 800b8a0:	bf88      	it	hi
 800b8a2:	197f      	addhi	r7, r7, r5
 800b8a4:	6831      	ldr	r1, [r6, #0]
 800b8a6:	9301      	str	r3, [sp, #4]
 800b8a8:	ab03      	add	r3, sp, #12
 800b8aa:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b8ae:	2202      	movs	r2, #2
 800b8b0:	7809      	ldrb	r1, [r1, #0]
 800b8b2:	f000 fa67 	bl	800bd84 <memchr>
 800b8b6:	9b01      	ldr	r3, [sp, #4]
 800b8b8:	b330      	cbz	r0, 800b908 <_scanf_i+0xbc>
 800b8ba:	f1b8 0f01 	cmp.w	r8, #1
 800b8be:	d15a      	bne.n	800b976 <_scanf_i+0x12a>
 800b8c0:	6862      	ldr	r2, [r4, #4]
 800b8c2:	b92a      	cbnz	r2, 800b8d0 <_scanf_i+0x84>
 800b8c4:	2108      	movs	r1, #8
 800b8c6:	6822      	ldr	r2, [r4, #0]
 800b8c8:	6061      	str	r1, [r4, #4]
 800b8ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b8ce:	6022      	str	r2, [r4, #0]
 800b8d0:	6822      	ldr	r2, [r4, #0]
 800b8d2:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b8d6:	6022      	str	r2, [r4, #0]
 800b8d8:	68a2      	ldr	r2, [r4, #8]
 800b8da:	1e51      	subs	r1, r2, #1
 800b8dc:	60a1      	str	r1, [r4, #8]
 800b8de:	b19a      	cbz	r2, 800b908 <_scanf_i+0xbc>
 800b8e0:	6832      	ldr	r2, [r6, #0]
 800b8e2:	1c5d      	adds	r5, r3, #1
 800b8e4:	1c51      	adds	r1, r2, #1
 800b8e6:	6031      	str	r1, [r6, #0]
 800b8e8:	7812      	ldrb	r2, [r2, #0]
 800b8ea:	701a      	strb	r2, [r3, #0]
 800b8ec:	6873      	ldr	r3, [r6, #4]
 800b8ee:	3b01      	subs	r3, #1
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	6073      	str	r3, [r6, #4]
 800b8f4:	dc07      	bgt.n	800b906 <_scanf_i+0xba>
 800b8f6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b8fa:	4631      	mov	r1, r6
 800b8fc:	4658      	mov	r0, fp
 800b8fe:	4798      	blx	r3
 800b900:	2800      	cmp	r0, #0
 800b902:	f040 8087 	bne.w	800ba14 <_scanf_i+0x1c8>
 800b906:	462b      	mov	r3, r5
 800b908:	f108 0801 	add.w	r8, r8, #1
 800b90c:	f1b8 0f03 	cmp.w	r8, #3
 800b910:	d1c8      	bne.n	800b8a4 <_scanf_i+0x58>
 800b912:	6862      	ldr	r2, [r4, #4]
 800b914:	b90a      	cbnz	r2, 800b91a <_scanf_i+0xce>
 800b916:	220a      	movs	r2, #10
 800b918:	6062      	str	r2, [r4, #4]
 800b91a:	6862      	ldr	r2, [r4, #4]
 800b91c:	4945      	ldr	r1, [pc, #276]	; (800ba34 <_scanf_i+0x1e8>)
 800b91e:	6960      	ldr	r0, [r4, #20]
 800b920:	1a89      	subs	r1, r1, r2
 800b922:	9301      	str	r3, [sp, #4]
 800b924:	f000 f888 	bl	800ba38 <__sccl>
 800b928:	9b01      	ldr	r3, [sp, #4]
 800b92a:	f04f 0800 	mov.w	r8, #0
 800b92e:	461d      	mov	r5, r3
 800b930:	68a3      	ldr	r3, [r4, #8]
 800b932:	6822      	ldr	r2, [r4, #0]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d03b      	beq.n	800b9b0 <_scanf_i+0x164>
 800b938:	6831      	ldr	r1, [r6, #0]
 800b93a:	6960      	ldr	r0, [r4, #20]
 800b93c:	f891 c000 	ldrb.w	ip, [r1]
 800b940:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b944:	2800      	cmp	r0, #0
 800b946:	d033      	beq.n	800b9b0 <_scanf_i+0x164>
 800b948:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800b94c:	d121      	bne.n	800b992 <_scanf_i+0x146>
 800b94e:	0510      	lsls	r0, r2, #20
 800b950:	d51f      	bpl.n	800b992 <_scanf_i+0x146>
 800b952:	f108 0801 	add.w	r8, r8, #1
 800b956:	b117      	cbz	r7, 800b95e <_scanf_i+0x112>
 800b958:	3301      	adds	r3, #1
 800b95a:	3f01      	subs	r7, #1
 800b95c:	60a3      	str	r3, [r4, #8]
 800b95e:	6873      	ldr	r3, [r6, #4]
 800b960:	3b01      	subs	r3, #1
 800b962:	2b00      	cmp	r3, #0
 800b964:	6073      	str	r3, [r6, #4]
 800b966:	dd1c      	ble.n	800b9a2 <_scanf_i+0x156>
 800b968:	6833      	ldr	r3, [r6, #0]
 800b96a:	3301      	adds	r3, #1
 800b96c:	6033      	str	r3, [r6, #0]
 800b96e:	68a3      	ldr	r3, [r4, #8]
 800b970:	3b01      	subs	r3, #1
 800b972:	60a3      	str	r3, [r4, #8]
 800b974:	e7dc      	b.n	800b930 <_scanf_i+0xe4>
 800b976:	f1b8 0f02 	cmp.w	r8, #2
 800b97a:	d1ad      	bne.n	800b8d8 <_scanf_i+0x8c>
 800b97c:	6822      	ldr	r2, [r4, #0]
 800b97e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b982:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b986:	d1bf      	bne.n	800b908 <_scanf_i+0xbc>
 800b988:	2110      	movs	r1, #16
 800b98a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b98e:	6061      	str	r1, [r4, #4]
 800b990:	e7a1      	b.n	800b8d6 <_scanf_i+0x8a>
 800b992:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b996:	6022      	str	r2, [r4, #0]
 800b998:	780b      	ldrb	r3, [r1, #0]
 800b99a:	3501      	adds	r5, #1
 800b99c:	f805 3c01 	strb.w	r3, [r5, #-1]
 800b9a0:	e7dd      	b.n	800b95e <_scanf_i+0x112>
 800b9a2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b9a6:	4631      	mov	r1, r6
 800b9a8:	4658      	mov	r0, fp
 800b9aa:	4798      	blx	r3
 800b9ac:	2800      	cmp	r0, #0
 800b9ae:	d0de      	beq.n	800b96e <_scanf_i+0x122>
 800b9b0:	6823      	ldr	r3, [r4, #0]
 800b9b2:	05d9      	lsls	r1, r3, #23
 800b9b4:	d50c      	bpl.n	800b9d0 <_scanf_i+0x184>
 800b9b6:	454d      	cmp	r5, r9
 800b9b8:	d908      	bls.n	800b9cc <_scanf_i+0x180>
 800b9ba:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b9be:	1e6f      	subs	r7, r5, #1
 800b9c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b9c4:	4632      	mov	r2, r6
 800b9c6:	4658      	mov	r0, fp
 800b9c8:	4798      	blx	r3
 800b9ca:	463d      	mov	r5, r7
 800b9cc:	454d      	cmp	r5, r9
 800b9ce:	d029      	beq.n	800ba24 <_scanf_i+0x1d8>
 800b9d0:	6822      	ldr	r2, [r4, #0]
 800b9d2:	f012 0210 	ands.w	r2, r2, #16
 800b9d6:	d113      	bne.n	800ba00 <_scanf_i+0x1b4>
 800b9d8:	702a      	strb	r2, [r5, #0]
 800b9da:	6863      	ldr	r3, [r4, #4]
 800b9dc:	4649      	mov	r1, r9
 800b9de:	4658      	mov	r0, fp
 800b9e0:	9e00      	ldr	r6, [sp, #0]
 800b9e2:	47b0      	blx	r6
 800b9e4:	f8da 3000 	ldr.w	r3, [sl]
 800b9e8:	6821      	ldr	r1, [r4, #0]
 800b9ea:	1d1a      	adds	r2, r3, #4
 800b9ec:	f8ca 2000 	str.w	r2, [sl]
 800b9f0:	f011 0f20 	tst.w	r1, #32
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	d010      	beq.n	800ba1a <_scanf_i+0x1ce>
 800b9f8:	6018      	str	r0, [r3, #0]
 800b9fa:	68e3      	ldr	r3, [r4, #12]
 800b9fc:	3301      	adds	r3, #1
 800b9fe:	60e3      	str	r3, [r4, #12]
 800ba00:	2000      	movs	r0, #0
 800ba02:	eba5 0509 	sub.w	r5, r5, r9
 800ba06:	44a8      	add	r8, r5
 800ba08:	6925      	ldr	r5, [r4, #16]
 800ba0a:	4445      	add	r5, r8
 800ba0c:	6125      	str	r5, [r4, #16]
 800ba0e:	b007      	add	sp, #28
 800ba10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba14:	f04f 0800 	mov.w	r8, #0
 800ba18:	e7ca      	b.n	800b9b0 <_scanf_i+0x164>
 800ba1a:	07ca      	lsls	r2, r1, #31
 800ba1c:	bf4c      	ite	mi
 800ba1e:	8018      	strhmi	r0, [r3, #0]
 800ba20:	6018      	strpl	r0, [r3, #0]
 800ba22:	e7ea      	b.n	800b9fa <_scanf_i+0x1ae>
 800ba24:	2001      	movs	r0, #1
 800ba26:	e7f2      	b.n	800ba0e <_scanf_i+0x1c2>
 800ba28:	0800c400 	.word	0x0800c400
 800ba2c:	0800bb91 	.word	0x0800bb91
 800ba30:	0800bca9 	.word	0x0800bca9
 800ba34:	0800c438 	.word	0x0800c438

0800ba38 <__sccl>:
 800ba38:	b570      	push	{r4, r5, r6, lr}
 800ba3a:	780b      	ldrb	r3, [r1, #0]
 800ba3c:	1e44      	subs	r4, r0, #1
 800ba3e:	2b5e      	cmp	r3, #94	; 0x5e
 800ba40:	bf13      	iteet	ne
 800ba42:	1c4a      	addne	r2, r1, #1
 800ba44:	1c8a      	addeq	r2, r1, #2
 800ba46:	784b      	ldrbeq	r3, [r1, #1]
 800ba48:	2100      	movne	r1, #0
 800ba4a:	bf08      	it	eq
 800ba4c:	2101      	moveq	r1, #1
 800ba4e:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800ba52:	f804 1f01 	strb.w	r1, [r4, #1]!
 800ba56:	42ac      	cmp	r4, r5
 800ba58:	d1fb      	bne.n	800ba52 <__sccl+0x1a>
 800ba5a:	b913      	cbnz	r3, 800ba62 <__sccl+0x2a>
 800ba5c:	3a01      	subs	r2, #1
 800ba5e:	4610      	mov	r0, r2
 800ba60:	bd70      	pop	{r4, r5, r6, pc}
 800ba62:	f081 0401 	eor.w	r4, r1, #1
 800ba66:	54c4      	strb	r4, [r0, r3]
 800ba68:	1c51      	adds	r1, r2, #1
 800ba6a:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800ba6e:	1e4e      	subs	r6, r1, #1
 800ba70:	2d2d      	cmp	r5, #45	; 0x2d
 800ba72:	460a      	mov	r2, r1
 800ba74:	d006      	beq.n	800ba84 <__sccl+0x4c>
 800ba76:	2d5d      	cmp	r5, #93	; 0x5d
 800ba78:	d0f1      	beq.n	800ba5e <__sccl+0x26>
 800ba7a:	b90d      	cbnz	r5, 800ba80 <__sccl+0x48>
 800ba7c:	4632      	mov	r2, r6
 800ba7e:	e7ee      	b.n	800ba5e <__sccl+0x26>
 800ba80:	462b      	mov	r3, r5
 800ba82:	e7f0      	b.n	800ba66 <__sccl+0x2e>
 800ba84:	780e      	ldrb	r6, [r1, #0]
 800ba86:	2e5d      	cmp	r6, #93	; 0x5d
 800ba88:	d0fa      	beq.n	800ba80 <__sccl+0x48>
 800ba8a:	42b3      	cmp	r3, r6
 800ba8c:	dcf8      	bgt.n	800ba80 <__sccl+0x48>
 800ba8e:	3301      	adds	r3, #1
 800ba90:	429e      	cmp	r6, r3
 800ba92:	54c4      	strb	r4, [r0, r3]
 800ba94:	dcfb      	bgt.n	800ba8e <__sccl+0x56>
 800ba96:	3102      	adds	r1, #2
 800ba98:	e7e7      	b.n	800ba6a <__sccl+0x32>

0800ba9a <_strtol_l.isra.0>:
 800ba9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba9e:	4680      	mov	r8, r0
 800baa0:	4689      	mov	r9, r1
 800baa2:	4692      	mov	sl, r2
 800baa4:	461e      	mov	r6, r3
 800baa6:	460f      	mov	r7, r1
 800baa8:	463d      	mov	r5, r7
 800baaa:	9808      	ldr	r0, [sp, #32]
 800baac:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bab0:	f000 f944 	bl	800bd3c <__locale_ctype_ptr_l>
 800bab4:	4420      	add	r0, r4
 800bab6:	7843      	ldrb	r3, [r0, #1]
 800bab8:	f013 0308 	ands.w	r3, r3, #8
 800babc:	d132      	bne.n	800bb24 <_strtol_l.isra.0+0x8a>
 800babe:	2c2d      	cmp	r4, #45	; 0x2d
 800bac0:	d132      	bne.n	800bb28 <_strtol_l.isra.0+0x8e>
 800bac2:	2201      	movs	r2, #1
 800bac4:	787c      	ldrb	r4, [r7, #1]
 800bac6:	1cbd      	adds	r5, r7, #2
 800bac8:	2e00      	cmp	r6, #0
 800baca:	d05d      	beq.n	800bb88 <_strtol_l.isra.0+0xee>
 800bacc:	2e10      	cmp	r6, #16
 800bace:	d109      	bne.n	800bae4 <_strtol_l.isra.0+0x4a>
 800bad0:	2c30      	cmp	r4, #48	; 0x30
 800bad2:	d107      	bne.n	800bae4 <_strtol_l.isra.0+0x4a>
 800bad4:	782b      	ldrb	r3, [r5, #0]
 800bad6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bada:	2b58      	cmp	r3, #88	; 0x58
 800badc:	d14f      	bne.n	800bb7e <_strtol_l.isra.0+0xe4>
 800bade:	2610      	movs	r6, #16
 800bae0:	786c      	ldrb	r4, [r5, #1]
 800bae2:	3502      	adds	r5, #2
 800bae4:	2a00      	cmp	r2, #0
 800bae6:	bf14      	ite	ne
 800bae8:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800baec:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800baf0:	2700      	movs	r7, #0
 800baf2:	fbb1 fcf6 	udiv	ip, r1, r6
 800baf6:	4638      	mov	r0, r7
 800baf8:	fb06 1e1c 	mls	lr, r6, ip, r1
 800bafc:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800bb00:	2b09      	cmp	r3, #9
 800bb02:	d817      	bhi.n	800bb34 <_strtol_l.isra.0+0x9a>
 800bb04:	461c      	mov	r4, r3
 800bb06:	42a6      	cmp	r6, r4
 800bb08:	dd23      	ble.n	800bb52 <_strtol_l.isra.0+0xb8>
 800bb0a:	1c7b      	adds	r3, r7, #1
 800bb0c:	d007      	beq.n	800bb1e <_strtol_l.isra.0+0x84>
 800bb0e:	4584      	cmp	ip, r0
 800bb10:	d31c      	bcc.n	800bb4c <_strtol_l.isra.0+0xb2>
 800bb12:	d101      	bne.n	800bb18 <_strtol_l.isra.0+0x7e>
 800bb14:	45a6      	cmp	lr, r4
 800bb16:	db19      	blt.n	800bb4c <_strtol_l.isra.0+0xb2>
 800bb18:	2701      	movs	r7, #1
 800bb1a:	fb00 4006 	mla	r0, r0, r6, r4
 800bb1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bb22:	e7eb      	b.n	800bafc <_strtol_l.isra.0+0x62>
 800bb24:	462f      	mov	r7, r5
 800bb26:	e7bf      	b.n	800baa8 <_strtol_l.isra.0+0xe>
 800bb28:	2c2b      	cmp	r4, #43	; 0x2b
 800bb2a:	bf04      	itt	eq
 800bb2c:	1cbd      	addeq	r5, r7, #2
 800bb2e:	787c      	ldrbeq	r4, [r7, #1]
 800bb30:	461a      	mov	r2, r3
 800bb32:	e7c9      	b.n	800bac8 <_strtol_l.isra.0+0x2e>
 800bb34:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800bb38:	2b19      	cmp	r3, #25
 800bb3a:	d801      	bhi.n	800bb40 <_strtol_l.isra.0+0xa6>
 800bb3c:	3c37      	subs	r4, #55	; 0x37
 800bb3e:	e7e2      	b.n	800bb06 <_strtol_l.isra.0+0x6c>
 800bb40:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800bb44:	2b19      	cmp	r3, #25
 800bb46:	d804      	bhi.n	800bb52 <_strtol_l.isra.0+0xb8>
 800bb48:	3c57      	subs	r4, #87	; 0x57
 800bb4a:	e7dc      	b.n	800bb06 <_strtol_l.isra.0+0x6c>
 800bb4c:	f04f 37ff 	mov.w	r7, #4294967295
 800bb50:	e7e5      	b.n	800bb1e <_strtol_l.isra.0+0x84>
 800bb52:	1c7b      	adds	r3, r7, #1
 800bb54:	d108      	bne.n	800bb68 <_strtol_l.isra.0+0xce>
 800bb56:	2322      	movs	r3, #34	; 0x22
 800bb58:	4608      	mov	r0, r1
 800bb5a:	f8c8 3000 	str.w	r3, [r8]
 800bb5e:	f1ba 0f00 	cmp.w	sl, #0
 800bb62:	d107      	bne.n	800bb74 <_strtol_l.isra.0+0xda>
 800bb64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb68:	b102      	cbz	r2, 800bb6c <_strtol_l.isra.0+0xd2>
 800bb6a:	4240      	negs	r0, r0
 800bb6c:	f1ba 0f00 	cmp.w	sl, #0
 800bb70:	d0f8      	beq.n	800bb64 <_strtol_l.isra.0+0xca>
 800bb72:	b10f      	cbz	r7, 800bb78 <_strtol_l.isra.0+0xde>
 800bb74:	f105 39ff 	add.w	r9, r5, #4294967295
 800bb78:	f8ca 9000 	str.w	r9, [sl]
 800bb7c:	e7f2      	b.n	800bb64 <_strtol_l.isra.0+0xca>
 800bb7e:	2430      	movs	r4, #48	; 0x30
 800bb80:	2e00      	cmp	r6, #0
 800bb82:	d1af      	bne.n	800bae4 <_strtol_l.isra.0+0x4a>
 800bb84:	2608      	movs	r6, #8
 800bb86:	e7ad      	b.n	800bae4 <_strtol_l.isra.0+0x4a>
 800bb88:	2c30      	cmp	r4, #48	; 0x30
 800bb8a:	d0a3      	beq.n	800bad4 <_strtol_l.isra.0+0x3a>
 800bb8c:	260a      	movs	r6, #10
 800bb8e:	e7a9      	b.n	800bae4 <_strtol_l.isra.0+0x4a>

0800bb90 <_strtol_r>:
 800bb90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bb92:	4c06      	ldr	r4, [pc, #24]	; (800bbac <_strtol_r+0x1c>)
 800bb94:	4d06      	ldr	r5, [pc, #24]	; (800bbb0 <_strtol_r+0x20>)
 800bb96:	6824      	ldr	r4, [r4, #0]
 800bb98:	6a24      	ldr	r4, [r4, #32]
 800bb9a:	2c00      	cmp	r4, #0
 800bb9c:	bf08      	it	eq
 800bb9e:	462c      	moveq	r4, r5
 800bba0:	9400      	str	r4, [sp, #0]
 800bba2:	f7ff ff7a 	bl	800ba9a <_strtol_l.isra.0>
 800bba6:	b003      	add	sp, #12
 800bba8:	bd30      	pop	{r4, r5, pc}
 800bbaa:	bf00      	nop
 800bbac:	2000017c 	.word	0x2000017c
 800bbb0:	200001e0 	.word	0x200001e0

0800bbb4 <_strtoul_l.isra.0>:
 800bbb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbb8:	4680      	mov	r8, r0
 800bbba:	4689      	mov	r9, r1
 800bbbc:	4692      	mov	sl, r2
 800bbbe:	461e      	mov	r6, r3
 800bbc0:	460f      	mov	r7, r1
 800bbc2:	463d      	mov	r5, r7
 800bbc4:	9808      	ldr	r0, [sp, #32]
 800bbc6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bbca:	f000 f8b7 	bl	800bd3c <__locale_ctype_ptr_l>
 800bbce:	4420      	add	r0, r4
 800bbd0:	7843      	ldrb	r3, [r0, #1]
 800bbd2:	f013 0308 	ands.w	r3, r3, #8
 800bbd6:	d130      	bne.n	800bc3a <_strtoul_l.isra.0+0x86>
 800bbd8:	2c2d      	cmp	r4, #45	; 0x2d
 800bbda:	d130      	bne.n	800bc3e <_strtoul_l.isra.0+0x8a>
 800bbdc:	2101      	movs	r1, #1
 800bbde:	787c      	ldrb	r4, [r7, #1]
 800bbe0:	1cbd      	adds	r5, r7, #2
 800bbe2:	2e00      	cmp	r6, #0
 800bbe4:	d05c      	beq.n	800bca0 <_strtoul_l.isra.0+0xec>
 800bbe6:	2e10      	cmp	r6, #16
 800bbe8:	d109      	bne.n	800bbfe <_strtoul_l.isra.0+0x4a>
 800bbea:	2c30      	cmp	r4, #48	; 0x30
 800bbec:	d107      	bne.n	800bbfe <_strtoul_l.isra.0+0x4a>
 800bbee:	782b      	ldrb	r3, [r5, #0]
 800bbf0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bbf4:	2b58      	cmp	r3, #88	; 0x58
 800bbf6:	d14e      	bne.n	800bc96 <_strtoul_l.isra.0+0xe2>
 800bbf8:	2610      	movs	r6, #16
 800bbfa:	786c      	ldrb	r4, [r5, #1]
 800bbfc:	3502      	adds	r5, #2
 800bbfe:	f04f 32ff 	mov.w	r2, #4294967295
 800bc02:	fbb2 f2f6 	udiv	r2, r2, r6
 800bc06:	2300      	movs	r3, #0
 800bc08:	fb06 fc02 	mul.w	ip, r6, r2
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	ea6f 0c0c 	mvn.w	ip, ip
 800bc12:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800bc16:	2f09      	cmp	r7, #9
 800bc18:	d817      	bhi.n	800bc4a <_strtoul_l.isra.0+0x96>
 800bc1a:	463c      	mov	r4, r7
 800bc1c:	42a6      	cmp	r6, r4
 800bc1e:	dd23      	ble.n	800bc68 <_strtoul_l.isra.0+0xb4>
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	db1e      	blt.n	800bc62 <_strtoul_l.isra.0+0xae>
 800bc24:	4282      	cmp	r2, r0
 800bc26:	d31c      	bcc.n	800bc62 <_strtoul_l.isra.0+0xae>
 800bc28:	d101      	bne.n	800bc2e <_strtoul_l.isra.0+0x7a>
 800bc2a:	45a4      	cmp	ip, r4
 800bc2c:	db19      	blt.n	800bc62 <_strtoul_l.isra.0+0xae>
 800bc2e:	2301      	movs	r3, #1
 800bc30:	fb00 4006 	mla	r0, r0, r6, r4
 800bc34:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bc38:	e7eb      	b.n	800bc12 <_strtoul_l.isra.0+0x5e>
 800bc3a:	462f      	mov	r7, r5
 800bc3c:	e7c1      	b.n	800bbc2 <_strtoul_l.isra.0+0xe>
 800bc3e:	2c2b      	cmp	r4, #43	; 0x2b
 800bc40:	bf04      	itt	eq
 800bc42:	1cbd      	addeq	r5, r7, #2
 800bc44:	787c      	ldrbeq	r4, [r7, #1]
 800bc46:	4619      	mov	r1, r3
 800bc48:	e7cb      	b.n	800bbe2 <_strtoul_l.isra.0+0x2e>
 800bc4a:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800bc4e:	2f19      	cmp	r7, #25
 800bc50:	d801      	bhi.n	800bc56 <_strtoul_l.isra.0+0xa2>
 800bc52:	3c37      	subs	r4, #55	; 0x37
 800bc54:	e7e2      	b.n	800bc1c <_strtoul_l.isra.0+0x68>
 800bc56:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800bc5a:	2f19      	cmp	r7, #25
 800bc5c:	d804      	bhi.n	800bc68 <_strtoul_l.isra.0+0xb4>
 800bc5e:	3c57      	subs	r4, #87	; 0x57
 800bc60:	e7dc      	b.n	800bc1c <_strtoul_l.isra.0+0x68>
 800bc62:	f04f 33ff 	mov.w	r3, #4294967295
 800bc66:	e7e5      	b.n	800bc34 <_strtoul_l.isra.0+0x80>
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	da09      	bge.n	800bc80 <_strtoul_l.isra.0+0xcc>
 800bc6c:	2322      	movs	r3, #34	; 0x22
 800bc6e:	f04f 30ff 	mov.w	r0, #4294967295
 800bc72:	f8c8 3000 	str.w	r3, [r8]
 800bc76:	f1ba 0f00 	cmp.w	sl, #0
 800bc7a:	d107      	bne.n	800bc8c <_strtoul_l.isra.0+0xd8>
 800bc7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc80:	b101      	cbz	r1, 800bc84 <_strtoul_l.isra.0+0xd0>
 800bc82:	4240      	negs	r0, r0
 800bc84:	f1ba 0f00 	cmp.w	sl, #0
 800bc88:	d0f8      	beq.n	800bc7c <_strtoul_l.isra.0+0xc8>
 800bc8a:	b10b      	cbz	r3, 800bc90 <_strtoul_l.isra.0+0xdc>
 800bc8c:	f105 39ff 	add.w	r9, r5, #4294967295
 800bc90:	f8ca 9000 	str.w	r9, [sl]
 800bc94:	e7f2      	b.n	800bc7c <_strtoul_l.isra.0+0xc8>
 800bc96:	2430      	movs	r4, #48	; 0x30
 800bc98:	2e00      	cmp	r6, #0
 800bc9a:	d1b0      	bne.n	800bbfe <_strtoul_l.isra.0+0x4a>
 800bc9c:	2608      	movs	r6, #8
 800bc9e:	e7ae      	b.n	800bbfe <_strtoul_l.isra.0+0x4a>
 800bca0:	2c30      	cmp	r4, #48	; 0x30
 800bca2:	d0a4      	beq.n	800bbee <_strtoul_l.isra.0+0x3a>
 800bca4:	260a      	movs	r6, #10
 800bca6:	e7aa      	b.n	800bbfe <_strtoul_l.isra.0+0x4a>

0800bca8 <_strtoul_r>:
 800bca8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bcaa:	4c06      	ldr	r4, [pc, #24]	; (800bcc4 <_strtoul_r+0x1c>)
 800bcac:	4d06      	ldr	r5, [pc, #24]	; (800bcc8 <_strtoul_r+0x20>)
 800bcae:	6824      	ldr	r4, [r4, #0]
 800bcb0:	6a24      	ldr	r4, [r4, #32]
 800bcb2:	2c00      	cmp	r4, #0
 800bcb4:	bf08      	it	eq
 800bcb6:	462c      	moveq	r4, r5
 800bcb8:	9400      	str	r4, [sp, #0]
 800bcba:	f7ff ff7b 	bl	800bbb4 <_strtoul_l.isra.0>
 800bcbe:	b003      	add	sp, #12
 800bcc0:	bd30      	pop	{r4, r5, pc}
 800bcc2:	bf00      	nop
 800bcc4:	2000017c 	.word	0x2000017c
 800bcc8:	200001e0 	.word	0x200001e0

0800bccc <__submore>:
 800bccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcd0:	460c      	mov	r4, r1
 800bcd2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800bcd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bcd8:	4299      	cmp	r1, r3
 800bcda:	d11b      	bne.n	800bd14 <__submore+0x48>
 800bcdc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bce0:	f000 f8aa 	bl	800be38 <_malloc_r>
 800bce4:	b918      	cbnz	r0, 800bcee <__submore+0x22>
 800bce6:	f04f 30ff 	mov.w	r0, #4294967295
 800bcea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bcf2:	63a3      	str	r3, [r4, #56]	; 0x38
 800bcf4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800bcf8:	6360      	str	r0, [r4, #52]	; 0x34
 800bcfa:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800bcfe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800bd02:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800bd06:	7043      	strb	r3, [r0, #1]
 800bd08:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800bd0c:	7003      	strb	r3, [r0, #0]
 800bd0e:	6020      	str	r0, [r4, #0]
 800bd10:	2000      	movs	r0, #0
 800bd12:	e7ea      	b.n	800bcea <__submore+0x1e>
 800bd14:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800bd16:	0077      	lsls	r7, r6, #1
 800bd18:	463a      	mov	r2, r7
 800bd1a:	f000 f8e7 	bl	800beec <_realloc_r>
 800bd1e:	4605      	mov	r5, r0
 800bd20:	2800      	cmp	r0, #0
 800bd22:	d0e0      	beq.n	800bce6 <__submore+0x1a>
 800bd24:	eb00 0806 	add.w	r8, r0, r6
 800bd28:	4601      	mov	r1, r0
 800bd2a:	4632      	mov	r2, r6
 800bd2c:	4640      	mov	r0, r8
 800bd2e:	f7ff fb41 	bl	800b3b4 <memcpy>
 800bd32:	f8c4 8000 	str.w	r8, [r4]
 800bd36:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800bd3a:	e7e9      	b.n	800bd10 <__submore+0x44>

0800bd3c <__locale_ctype_ptr_l>:
 800bd3c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800bd40:	4770      	bx	lr
	...

0800bd44 <__locale_ctype_ptr>:
 800bd44:	4b04      	ldr	r3, [pc, #16]	; (800bd58 <__locale_ctype_ptr+0x14>)
 800bd46:	4a05      	ldr	r2, [pc, #20]	; (800bd5c <__locale_ctype_ptr+0x18>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	6a1b      	ldr	r3, [r3, #32]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	bf08      	it	eq
 800bd50:	4613      	moveq	r3, r2
 800bd52:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800bd56:	4770      	bx	lr
 800bd58:	2000017c 	.word	0x2000017c
 800bd5c:	200001e0 	.word	0x200001e0

0800bd60 <__ascii_mbtowc>:
 800bd60:	b082      	sub	sp, #8
 800bd62:	b901      	cbnz	r1, 800bd66 <__ascii_mbtowc+0x6>
 800bd64:	a901      	add	r1, sp, #4
 800bd66:	b142      	cbz	r2, 800bd7a <__ascii_mbtowc+0x1a>
 800bd68:	b14b      	cbz	r3, 800bd7e <__ascii_mbtowc+0x1e>
 800bd6a:	7813      	ldrb	r3, [r2, #0]
 800bd6c:	600b      	str	r3, [r1, #0]
 800bd6e:	7812      	ldrb	r2, [r2, #0]
 800bd70:	1c10      	adds	r0, r2, #0
 800bd72:	bf18      	it	ne
 800bd74:	2001      	movne	r0, #1
 800bd76:	b002      	add	sp, #8
 800bd78:	4770      	bx	lr
 800bd7a:	4610      	mov	r0, r2
 800bd7c:	e7fb      	b.n	800bd76 <__ascii_mbtowc+0x16>
 800bd7e:	f06f 0001 	mvn.w	r0, #1
 800bd82:	e7f8      	b.n	800bd76 <__ascii_mbtowc+0x16>

0800bd84 <memchr>:
 800bd84:	b510      	push	{r4, lr}
 800bd86:	b2c9      	uxtb	r1, r1
 800bd88:	4402      	add	r2, r0
 800bd8a:	4290      	cmp	r0, r2
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	d101      	bne.n	800bd94 <memchr+0x10>
 800bd90:	2300      	movs	r3, #0
 800bd92:	e003      	b.n	800bd9c <memchr+0x18>
 800bd94:	781c      	ldrb	r4, [r3, #0]
 800bd96:	3001      	adds	r0, #1
 800bd98:	428c      	cmp	r4, r1
 800bd9a:	d1f6      	bne.n	800bd8a <memchr+0x6>
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	bd10      	pop	{r4, pc}

0800bda0 <_free_r>:
 800bda0:	b538      	push	{r3, r4, r5, lr}
 800bda2:	4605      	mov	r5, r0
 800bda4:	2900      	cmp	r1, #0
 800bda6:	d043      	beq.n	800be30 <_free_r+0x90>
 800bda8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bdac:	1f0c      	subs	r4, r1, #4
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	bfb8      	it	lt
 800bdb2:	18e4      	addlt	r4, r4, r3
 800bdb4:	f000 f8dd 	bl	800bf72 <__malloc_lock>
 800bdb8:	4a1e      	ldr	r2, [pc, #120]	; (800be34 <_free_r+0x94>)
 800bdba:	6813      	ldr	r3, [r2, #0]
 800bdbc:	4610      	mov	r0, r2
 800bdbe:	b933      	cbnz	r3, 800bdce <_free_r+0x2e>
 800bdc0:	6063      	str	r3, [r4, #4]
 800bdc2:	6014      	str	r4, [r2, #0]
 800bdc4:	4628      	mov	r0, r5
 800bdc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bdca:	f000 b8d3 	b.w	800bf74 <__malloc_unlock>
 800bdce:	42a3      	cmp	r3, r4
 800bdd0:	d90b      	bls.n	800bdea <_free_r+0x4a>
 800bdd2:	6821      	ldr	r1, [r4, #0]
 800bdd4:	1862      	adds	r2, r4, r1
 800bdd6:	4293      	cmp	r3, r2
 800bdd8:	bf01      	itttt	eq
 800bdda:	681a      	ldreq	r2, [r3, #0]
 800bddc:	685b      	ldreq	r3, [r3, #4]
 800bdde:	1852      	addeq	r2, r2, r1
 800bde0:	6022      	streq	r2, [r4, #0]
 800bde2:	6063      	str	r3, [r4, #4]
 800bde4:	6004      	str	r4, [r0, #0]
 800bde6:	e7ed      	b.n	800bdc4 <_free_r+0x24>
 800bde8:	4613      	mov	r3, r2
 800bdea:	685a      	ldr	r2, [r3, #4]
 800bdec:	b10a      	cbz	r2, 800bdf2 <_free_r+0x52>
 800bdee:	42a2      	cmp	r2, r4
 800bdf0:	d9fa      	bls.n	800bde8 <_free_r+0x48>
 800bdf2:	6819      	ldr	r1, [r3, #0]
 800bdf4:	1858      	adds	r0, r3, r1
 800bdf6:	42a0      	cmp	r0, r4
 800bdf8:	d10b      	bne.n	800be12 <_free_r+0x72>
 800bdfa:	6820      	ldr	r0, [r4, #0]
 800bdfc:	4401      	add	r1, r0
 800bdfe:	1858      	adds	r0, r3, r1
 800be00:	4282      	cmp	r2, r0
 800be02:	6019      	str	r1, [r3, #0]
 800be04:	d1de      	bne.n	800bdc4 <_free_r+0x24>
 800be06:	6810      	ldr	r0, [r2, #0]
 800be08:	6852      	ldr	r2, [r2, #4]
 800be0a:	4401      	add	r1, r0
 800be0c:	6019      	str	r1, [r3, #0]
 800be0e:	605a      	str	r2, [r3, #4]
 800be10:	e7d8      	b.n	800bdc4 <_free_r+0x24>
 800be12:	d902      	bls.n	800be1a <_free_r+0x7a>
 800be14:	230c      	movs	r3, #12
 800be16:	602b      	str	r3, [r5, #0]
 800be18:	e7d4      	b.n	800bdc4 <_free_r+0x24>
 800be1a:	6820      	ldr	r0, [r4, #0]
 800be1c:	1821      	adds	r1, r4, r0
 800be1e:	428a      	cmp	r2, r1
 800be20:	bf01      	itttt	eq
 800be22:	6811      	ldreq	r1, [r2, #0]
 800be24:	6852      	ldreq	r2, [r2, #4]
 800be26:	1809      	addeq	r1, r1, r0
 800be28:	6021      	streq	r1, [r4, #0]
 800be2a:	6062      	str	r2, [r4, #4]
 800be2c:	605c      	str	r4, [r3, #4]
 800be2e:	e7c9      	b.n	800bdc4 <_free_r+0x24>
 800be30:	bd38      	pop	{r3, r4, r5, pc}
 800be32:	bf00      	nop
 800be34:	20000590 	.word	0x20000590

0800be38 <_malloc_r>:
 800be38:	b570      	push	{r4, r5, r6, lr}
 800be3a:	1ccd      	adds	r5, r1, #3
 800be3c:	f025 0503 	bic.w	r5, r5, #3
 800be40:	3508      	adds	r5, #8
 800be42:	2d0c      	cmp	r5, #12
 800be44:	bf38      	it	cc
 800be46:	250c      	movcc	r5, #12
 800be48:	2d00      	cmp	r5, #0
 800be4a:	4606      	mov	r6, r0
 800be4c:	db01      	blt.n	800be52 <_malloc_r+0x1a>
 800be4e:	42a9      	cmp	r1, r5
 800be50:	d903      	bls.n	800be5a <_malloc_r+0x22>
 800be52:	230c      	movs	r3, #12
 800be54:	6033      	str	r3, [r6, #0]
 800be56:	2000      	movs	r0, #0
 800be58:	bd70      	pop	{r4, r5, r6, pc}
 800be5a:	f000 f88a 	bl	800bf72 <__malloc_lock>
 800be5e:	4a21      	ldr	r2, [pc, #132]	; (800bee4 <_malloc_r+0xac>)
 800be60:	6814      	ldr	r4, [r2, #0]
 800be62:	4621      	mov	r1, r4
 800be64:	b991      	cbnz	r1, 800be8c <_malloc_r+0x54>
 800be66:	4c20      	ldr	r4, [pc, #128]	; (800bee8 <_malloc_r+0xb0>)
 800be68:	6823      	ldr	r3, [r4, #0]
 800be6a:	b91b      	cbnz	r3, 800be74 <_malloc_r+0x3c>
 800be6c:	4630      	mov	r0, r6
 800be6e:	f000 f863 	bl	800bf38 <_sbrk_r>
 800be72:	6020      	str	r0, [r4, #0]
 800be74:	4629      	mov	r1, r5
 800be76:	4630      	mov	r0, r6
 800be78:	f000 f85e 	bl	800bf38 <_sbrk_r>
 800be7c:	1c43      	adds	r3, r0, #1
 800be7e:	d124      	bne.n	800beca <_malloc_r+0x92>
 800be80:	230c      	movs	r3, #12
 800be82:	4630      	mov	r0, r6
 800be84:	6033      	str	r3, [r6, #0]
 800be86:	f000 f875 	bl	800bf74 <__malloc_unlock>
 800be8a:	e7e4      	b.n	800be56 <_malloc_r+0x1e>
 800be8c:	680b      	ldr	r3, [r1, #0]
 800be8e:	1b5b      	subs	r3, r3, r5
 800be90:	d418      	bmi.n	800bec4 <_malloc_r+0x8c>
 800be92:	2b0b      	cmp	r3, #11
 800be94:	d90f      	bls.n	800beb6 <_malloc_r+0x7e>
 800be96:	600b      	str	r3, [r1, #0]
 800be98:	18cc      	adds	r4, r1, r3
 800be9a:	50cd      	str	r5, [r1, r3]
 800be9c:	4630      	mov	r0, r6
 800be9e:	f000 f869 	bl	800bf74 <__malloc_unlock>
 800bea2:	f104 000b 	add.w	r0, r4, #11
 800bea6:	1d23      	adds	r3, r4, #4
 800bea8:	f020 0007 	bic.w	r0, r0, #7
 800beac:	1ac3      	subs	r3, r0, r3
 800beae:	d0d3      	beq.n	800be58 <_malloc_r+0x20>
 800beb0:	425a      	negs	r2, r3
 800beb2:	50e2      	str	r2, [r4, r3]
 800beb4:	e7d0      	b.n	800be58 <_malloc_r+0x20>
 800beb6:	684b      	ldr	r3, [r1, #4]
 800beb8:	428c      	cmp	r4, r1
 800beba:	bf16      	itet	ne
 800bebc:	6063      	strne	r3, [r4, #4]
 800bebe:	6013      	streq	r3, [r2, #0]
 800bec0:	460c      	movne	r4, r1
 800bec2:	e7eb      	b.n	800be9c <_malloc_r+0x64>
 800bec4:	460c      	mov	r4, r1
 800bec6:	6849      	ldr	r1, [r1, #4]
 800bec8:	e7cc      	b.n	800be64 <_malloc_r+0x2c>
 800beca:	1cc4      	adds	r4, r0, #3
 800becc:	f024 0403 	bic.w	r4, r4, #3
 800bed0:	42a0      	cmp	r0, r4
 800bed2:	d005      	beq.n	800bee0 <_malloc_r+0xa8>
 800bed4:	1a21      	subs	r1, r4, r0
 800bed6:	4630      	mov	r0, r6
 800bed8:	f000 f82e 	bl	800bf38 <_sbrk_r>
 800bedc:	3001      	adds	r0, #1
 800bede:	d0cf      	beq.n	800be80 <_malloc_r+0x48>
 800bee0:	6025      	str	r5, [r4, #0]
 800bee2:	e7db      	b.n	800be9c <_malloc_r+0x64>
 800bee4:	20000590 	.word	0x20000590
 800bee8:	20000594 	.word	0x20000594

0800beec <_realloc_r>:
 800beec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beee:	4607      	mov	r7, r0
 800bef0:	4614      	mov	r4, r2
 800bef2:	460e      	mov	r6, r1
 800bef4:	b921      	cbnz	r1, 800bf00 <_realloc_r+0x14>
 800bef6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800befa:	4611      	mov	r1, r2
 800befc:	f7ff bf9c 	b.w	800be38 <_malloc_r>
 800bf00:	b922      	cbnz	r2, 800bf0c <_realloc_r+0x20>
 800bf02:	f7ff ff4d 	bl	800bda0 <_free_r>
 800bf06:	4625      	mov	r5, r4
 800bf08:	4628      	mov	r0, r5
 800bf0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf0c:	f000 f833 	bl	800bf76 <_malloc_usable_size_r>
 800bf10:	42a0      	cmp	r0, r4
 800bf12:	d20f      	bcs.n	800bf34 <_realloc_r+0x48>
 800bf14:	4621      	mov	r1, r4
 800bf16:	4638      	mov	r0, r7
 800bf18:	f7ff ff8e 	bl	800be38 <_malloc_r>
 800bf1c:	4605      	mov	r5, r0
 800bf1e:	2800      	cmp	r0, #0
 800bf20:	d0f2      	beq.n	800bf08 <_realloc_r+0x1c>
 800bf22:	4631      	mov	r1, r6
 800bf24:	4622      	mov	r2, r4
 800bf26:	f7ff fa45 	bl	800b3b4 <memcpy>
 800bf2a:	4631      	mov	r1, r6
 800bf2c:	4638      	mov	r0, r7
 800bf2e:	f7ff ff37 	bl	800bda0 <_free_r>
 800bf32:	e7e9      	b.n	800bf08 <_realloc_r+0x1c>
 800bf34:	4635      	mov	r5, r6
 800bf36:	e7e7      	b.n	800bf08 <_realloc_r+0x1c>

0800bf38 <_sbrk_r>:
 800bf38:	b538      	push	{r3, r4, r5, lr}
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	4c05      	ldr	r4, [pc, #20]	; (800bf54 <_sbrk_r+0x1c>)
 800bf3e:	4605      	mov	r5, r0
 800bf40:	4608      	mov	r0, r1
 800bf42:	6023      	str	r3, [r4, #0]
 800bf44:	f7f8 fa5a 	bl	80043fc <_sbrk>
 800bf48:	1c43      	adds	r3, r0, #1
 800bf4a:	d102      	bne.n	800bf52 <_sbrk_r+0x1a>
 800bf4c:	6823      	ldr	r3, [r4, #0]
 800bf4e:	b103      	cbz	r3, 800bf52 <_sbrk_r+0x1a>
 800bf50:	602b      	str	r3, [r5, #0]
 800bf52:	bd38      	pop	{r3, r4, r5, pc}
 800bf54:	20001a8c 	.word	0x20001a8c

0800bf58 <__ascii_wctomb>:
 800bf58:	b149      	cbz	r1, 800bf6e <__ascii_wctomb+0x16>
 800bf5a:	2aff      	cmp	r2, #255	; 0xff
 800bf5c:	bf8b      	itete	hi
 800bf5e:	238a      	movhi	r3, #138	; 0x8a
 800bf60:	700a      	strbls	r2, [r1, #0]
 800bf62:	6003      	strhi	r3, [r0, #0]
 800bf64:	2001      	movls	r0, #1
 800bf66:	bf88      	it	hi
 800bf68:	f04f 30ff 	movhi.w	r0, #4294967295
 800bf6c:	4770      	bx	lr
 800bf6e:	4608      	mov	r0, r1
 800bf70:	4770      	bx	lr

0800bf72 <__malloc_lock>:
 800bf72:	4770      	bx	lr

0800bf74 <__malloc_unlock>:
 800bf74:	4770      	bx	lr

0800bf76 <_malloc_usable_size_r>:
 800bf76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf7a:	1f18      	subs	r0, r3, #4
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	bfbc      	itt	lt
 800bf80:	580b      	ldrlt	r3, [r1, r0]
 800bf82:	18c0      	addlt	r0, r0, r3
 800bf84:	4770      	bx	lr
	...

0800bf88 <_init>:
 800bf88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf8a:	bf00      	nop
 800bf8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf8e:	bc08      	pop	{r3}
 800bf90:	469e      	mov	lr, r3
 800bf92:	4770      	bx	lr

0800bf94 <_fini>:
 800bf94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf96:	bf00      	nop
 800bf98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf9a:	bc08      	pop	{r3}
 800bf9c:	469e      	mov	lr, r3
 800bf9e:	4770      	bx	lr
